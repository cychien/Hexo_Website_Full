{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/happy.jpg","path":"images/happy.jpg","modified":0,"renderable":0},{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/about-bg.jpg","path":"images/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/eagle.jpg","path":"images/eagle.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/home-bg.jpg","path":"images/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/contact-bg.jpg","path":"images/contact-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/joe-green-475962.jpg","path":"images/joe-green-475962.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/WEBM/Productive-Morning.webm","path":"WEBM/Productive-Morning.webm","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/MP4/Productive-Morning.mp4","path":"MP4/Productive-Morning.mp4","modified":0,"renderable":1}],"Cache":[{"_id":"themes/clean-blog/README.md","hash":"861dd2f959ab75d121226f4f3e2f61f4bc95fddb","modified":1520001632000},{"_id":"source/.DS_Store","hash":"be095943f54f482cfefc9e09a2bcb7fb923219d0","modified":1520002959000},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1520001632000},{"_id":"themes/clean-blog/_config.yml","hash":"2952bd6cae00556eed3fe8388b7e8a5f1a19b85d","modified":1520001632000},{"_id":"source/_posts/<區塊鏈技術與應用上課筆記> 區塊鏈簡介.md","hash":"a84a0db373139571315d915d2cd1ef82b276959b","modified":1520006873000},{"_id":"source/_posts/Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介.md","hash":"1a28312a0973284df9ba0491c97599eafeb68473","modified":1520003425000},{"_id":"source/_posts/Collection-Method-Sort.md","hash":"7e52f84548e96f3b8a75c4352ead406b4a2b1092","modified":1520003429000},{"_id":"source/_posts/Handlebars模板引擎(2) - 使用Handlebars.md","hash":"97e26858e516fe4c9b9c4cee3654c521d79b824c","modified":1520003423000},{"_id":"source/_posts/cookie-parser中間件深入理解.md","hash":"1de49ef5c65348cade1cdb83a070dd0f908df123","modified":1520003427000},{"_id":"source/categories/index.md","hash":"056224078f21e49cf4c6b4e634d0d8f795fca1e2","modified":1520001632000},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1520001632000},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1520001632000},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1520001632000},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1520001632000},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1520001632000},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1520001632000},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1520001632000},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1520001632000},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1520001632000},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1520001632000},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1520001632000},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"f2ef73afc3d275333329bb30b9369b82e119da76","modified":1520001632000},{"_id":"themes/clean-blog/layout/index.ejs","hash":"e7c8ee6fbb1184818a1b18b9cfbe168a19fd2f7f","modified":1520001632000},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1520001632000},{"_id":"themes/clean-blog/layout/page.ejs","hash":"591af587e1aae962950de7e79bd25c1f060c69ac","modified":1520001632000},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1520001632000},{"_id":"source/images/happy.jpg","hash":"80967c65d1dc9e743df528b94764e6bbb1cc32c8","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"b564e64cc1a9af7b54f1e27d5dbd5926233ac4e7","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"aa91c7097bacafcefdee08327c556213c6057415","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/tag-category-index.ejs","hash":"10cdc1b7866999c714a666557c150d2c79c1fba9","modified":1520001632000},{"_id":"themes/clean-blog/source/css/article.styl","hash":"85445d283b11ecbc05f091b4acfa3a060baf8933","modified":1520001632000},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1520001632000},{"_id":"themes/clean-blog/source/css/base.styl","hash":"946927217bf025621ef57630feb6c37dcce752b1","modified":1520001632000},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1520001632000},{"_id":"themes/clean-blog/source/css/style.styl","hash":"16034e6af7330934eda42f9c262008c0610e9317","modified":1520001632000},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1520001632000},{"_id":"themes/clean-blog/source/images/favicon.ico","hash":"63750d8cd91c2ec67a689edb42f6e9e3904de344","modified":1520001632000},{"_id":"themes/clean-blog/source/images/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1520001632000},{"_id":"themes/clean-blog/source/images/eagle.jpg","hash":"16efc4997af4cac7da8eb6028cca19d1f1cb4114","modified":1520001632000},{"_id":"themes/clean-blog/source/images/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1520001632000},{"_id":"themes/clean-blog/source/images/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1520001632000},{"_id":"themes/clean-blog/source/images/joe-green-475962.jpg","hash":"ed771bc6abfe50b6bb3d80a30bdd5a8c3c698e4c","modified":1520001632000},{"_id":"themes/clean-blog/source/WEBM/Productive-Morning.webm","hash":"79502896941dbaa1842a60cbaf488cb9d69052b2","modified":1520001632000},{"_id":"themes/clean-blog/source/MP4/Productive-Morning.mp4","hash":"8681d455f04509a5b8fe9a88758a9826b4ba932f","modified":1520001632000},{"_id":"public/categories/index.html","hash":"0925132efa45c57215b5485c2e53eb3edc2796ad","modified":1520007224294},{"_id":"public/archives/index.html","hash":"cffa773b409c4f0c68cecc27c20c6f8d75800d26","modified":1520007224294},{"_id":"public/archives/2017/index.html","hash":"27c4cbba6a12ca942c2270593510e914b9c8fdf9","modified":1520007224294},{"_id":"public/archives/2017/06/index.html","hash":"326aef8ab96a7d69c6275cc3bbf78d10b3b1a764","modified":1520007224294},{"_id":"public/archives/2017/09/index.html","hash":"80fae05484637dc6f49465a2e9e5f1847bbff2e1","modified":1520007224294},{"_id":"public/archives/2017/12/index.html","hash":"0994b2e124b7428d8e84ae40c265a7285cfa231b","modified":1520007224294},{"_id":"public/archives/2018/index.html","hash":"d5a83935c3eefd358723ff46820a06efbd7e633c","modified":1520007224294},{"_id":"public/archives/2018/03/index.html","hash":"5b621c99936423ebeeee09af0925e4381e25e3c9","modified":1520007224295},{"_id":"public/categories/Blockchain/index.html","hash":"8487bc4d3fa15e1cdbf6fd114d210ed33399491f","modified":1520007224295},{"_id":"public/categories/NodeJS/index.html","hash":"44f8b34d9f1d30058c646fb3573d52e952183135","modified":1520007224295},{"_id":"public/categories/Java/index.html","hash":"864f6ab42892620e01b80e922b55fdc0c00072ee","modified":1520007224295},{"_id":"public/2018/03/02/<區塊鏈技術與應用上課筆記> 區塊鏈簡介/index.html","hash":"758f649d4394eef19f64b10fd3c3b3e248652660","modified":1520007224295},{"_id":"public/2017/12/18/cookie-parser中間件深入理解/index.html","hash":"eae15942b63cbdfff0f678b3ffd96b6d25f83c8f","modified":1520007224295},{"_id":"public/2017/09/14/Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介/index.html","hash":"ffe3b2c860c1de5861e860936693e839acfd196a","modified":1520007224295},{"_id":"public/2017/09/14/Handlebars模板引擎(2) - 使用Handlebars/index.html","hash":"a11b406d7a1a5253dc4c376ff1ca6eb8e71b1b3e","modified":1520007224295},{"_id":"public/2017/06/27/Collection-Method-Sort/index.html","hash":"bb8fccac82b317f75129dcbe68b91f6aa91f467f","modified":1520007224295},{"_id":"public/index.html","hash":"761e1321d445152f6c1b0016afc183aca233b8cd","modified":1520007224295},{"_id":"public/images/favicon.ico","hash":"63750d8cd91c2ec67a689edb42f6e9e3904de344","modified":1520007224299},{"_id":"public/images/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1520007224299},{"_id":"public/images/happy.jpg","hash":"80967c65d1dc9e743df528b94764e6bbb1cc32c8","modified":1520007224792},{"_id":"public/images/eagle.jpg","hash":"16efc4997af4cac7da8eb6028cca19d1f1cb4114","modified":1520007224793},{"_id":"public/css/article.css","hash":"78ad62a1b44ebb0bc2a104e27fe19d131c6190e0","modified":1520007224829},{"_id":"public/css/base.css","hash":"3a99029787e439fd9950cee8232f3b7b68c98e19","modified":1520007224829},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520007224829},{"_id":"public/css/style.css","hash":"ace6e7f770d503bbedf108c1b7b5e4359a4e26e4","modified":1520007224829},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1520007224830},{"_id":"public/images/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1520007224830},{"_id":"public/images/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1520007224834},{"_id":"public/images/joe-green-475962.jpg","hash":"ed771bc6abfe50b6bb3d80a30bdd5a8c3c698e4c","modified":1520007224872},{"_id":"public/WEBM/Productive-Morning.webm","hash":"79502896941dbaa1842a60cbaf488cb9d69052b2","modified":1520007224897},{"_id":"public/MP4/Productive-Morning.mp4","hash":"8681d455f04509a5b8fe9a88758a9826b4ba932f","modified":1520007224906}],"Category":[{"name":"Blockchain","_id":"cjea5202k0003ucugruidao0x"},{"name":"NodeJS","_id":"cjea5202q0007ucugitx15tuz"},{"name":"Java","_id":"cjea5202q0009ucugnrjzjrl0"}],"Data":[],"Page":[{"title":"分類","date":"2017-06-27T14:07:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2017-06-27 22:07:23\ntype: \"categories\"\n---\n","updated":"2018-03-02T14:40:32.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjea5202h0001ucugrrfujmsg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"<區塊鏈技術與應用上課筆記> 區塊鏈簡介","date":"2018-03-02T15:06:18.000Z","author":"Justin","cover":null,"_content":"\n## 比特幣的交易過程\n\n大致可分為三大部分\n\n1.  當有交易產生時，交易並不會馬上被記到區塊上，而會廣播到各個節點中，放置到礦工們的mempool，被視為**待確認的交易**\n\n2.  接著，礦工們開始解一道很難的數學題，先解出來的那個人就有寫帳的權利。一個區塊可以容納不只一筆交易，但區塊有大小限制(比特幣: 1MB)，因此礦工們會盡可能地從mempool中選出價值最高的組合優先計算，算出來後將結果廣播到整個網路\n\n3.  其他節點會進行驗證的動作，因為區塊的大小是有限制的，所以這一部份並不會太耗時，驗證通過後就將新的區塊接上現在的區塊鏈，在區塊鏈上的交易被視為**已確認的交易**，最後每個節點從mempool中刪去已確認的交易\n\n## 為什麼比特幣要用解數學題的方式？\n\n在P2P網路中，每一個人的帳本都長得不太一樣，而就出現了一個難題“**究竟我們該相信誰的帳本？**”，傳統上我們可能會想以多數決來解決，大部分人的帳本就是真正的帳本，這就是所謂的**共識機制**，但是在整個網路中很難知道怎樣算多數，因為網路不停地變化，無法準確的知道總結點的數量，因此比特幣才用這種特別的共識機制，他們的共識就是\n\n> 只有最先解出答案的那一個人，才有寫帳的權利\n\n## Blockchain 特點\n\n- 去中心化\n- 不可篡改\n- 帳本公開透明(帳本必須公開，礦工才能做驗證)\n- 信任機器\n\n## 以應用觀點來看區塊鏈\n\n- Blockchain1.0 Currency \n- Blockchain2.0 Smart Contracts\n- Blockchain3.0 Decentralized Applications = DApp\n\n## 以技術觀點來看區塊鏈\n\n- Blockchain1.0 Bitcoin\n- Blockchain2.0 Ethereum\n- Blockchain3.0 DAG\n\n## 區塊鏈的研究挑戰\n\n- 共識機制(PoW PoS)\n- 智能合約安全及隱私\n- 擴充性\n- 高效(確認交易的速度)\n- 經濟誘因(讓生態系可以順利運作)\n","source":"_posts/<區塊鏈技術與應用上課筆記> 區塊鏈簡介.md","raw":"---\ntitle: <區塊鏈技術與應用上課筆記> 區塊鏈簡介\ndate: 2018-03-02 23:06:18\ntags:\nauthor: Justin\ncover:\ncategories:\n- Blockchain\n---\n\n## 比特幣的交易過程\n\n大致可分為三大部分\n\n1.  當有交易產生時，交易並不會馬上被記到區塊上，而會廣播到各個節點中，放置到礦工們的mempool，被視為**待確認的交易**\n\n2.  接著，礦工們開始解一道很難的數學題，先解出來的那個人就有寫帳的權利。一個區塊可以容納不只一筆交易，但區塊有大小限制(比特幣: 1MB)，因此礦工們會盡可能地從mempool中選出價值最高的組合優先計算，算出來後將結果廣播到整個網路\n\n3.  其他節點會進行驗證的動作，因為區塊的大小是有限制的，所以這一部份並不會太耗時，驗證通過後就將新的區塊接上現在的區塊鏈，在區塊鏈上的交易被視為**已確認的交易**，最後每個節點從mempool中刪去已確認的交易\n\n## 為什麼比特幣要用解數學題的方式？\n\n在P2P網路中，每一個人的帳本都長得不太一樣，而就出現了一個難題“**究竟我們該相信誰的帳本？**”，傳統上我們可能會想以多數決來解決，大部分人的帳本就是真正的帳本，這就是所謂的**共識機制**，但是在整個網路中很難知道怎樣算多數，因為網路不停地變化，無法準確的知道總結點的數量，因此比特幣才用這種特別的共識機制，他們的共識就是\n\n> 只有最先解出答案的那一個人，才有寫帳的權利\n\n## Blockchain 特點\n\n- 去中心化\n- 不可篡改\n- 帳本公開透明(帳本必須公開，礦工才能做驗證)\n- 信任機器\n\n## 以應用觀點來看區塊鏈\n\n- Blockchain1.0 Currency \n- Blockchain2.0 Smart Contracts\n- Blockchain3.0 Decentralized Applications = DApp\n\n## 以技術觀點來看區塊鏈\n\n- Blockchain1.0 Bitcoin\n- Blockchain2.0 Ethereum\n- Blockchain3.0 DAG\n\n## 區塊鏈的研究挑戰\n\n- 共識機制(PoW PoS)\n- 智能合約安全及隱私\n- 擴充性\n- 高效(確認交易的速度)\n- 經濟誘因(讓生態系可以順利運作)\n","slug":"<區塊鏈技術與應用上課筆記> 區塊鏈簡介","published":1,"updated":"2018-03-02T16:07:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjea5202d0000ucug3mjorajz","content":"<h2 id=\"比特幣的交易過程\"><a href=\"#比特幣的交易過程\" class=\"headerlink\" title=\"比特幣的交易過程\"></a>比特幣的交易過程</h2><p>大致可分為三大部分</p>\n<ol>\n<li><p>當有交易產生時，交易並不會馬上被記到區塊上，而會廣播到各個節點中，放置到礦工們的mempool，被視為<strong>待確認的交易</strong></p>\n</li>\n<li><p>接著，礦工們開始解一道很難的數學題，先解出來的那個人就有寫帳的權利。一個區塊可以容納不只一筆交易，但區塊有大小限制(比特幣: 1MB)，因此礦工們會盡可能地從mempool中選出價值最高的組合優先計算，算出來後將結果廣播到整個網路</p>\n</li>\n<li><p>其他節點會進行驗證的動作，因為區塊的大小是有限制的，所以這一部份並不會太耗時，驗證通過後就將新的區塊接上現在的區塊鏈，在區塊鏈上的交易被視為<strong>已確認的交易</strong>，最後每個節點從mempool中刪去已確認的交易</p>\n</li>\n</ol>\n<h2 id=\"為什麼比特幣要用解數學題的方式？\"><a href=\"#為什麼比特幣要用解數學題的方式？\" class=\"headerlink\" title=\"為什麼比特幣要用解數學題的方式？\"></a>為什麼比特幣要用解數學題的方式？</h2><p>在P2P網路中，每一個人的帳本都長得不太一樣，而就出現了一個難題“<strong>究竟我們該相信誰的帳本？</strong>”，傳統上我們可能會想以多數決來解決，大部分人的帳本就是真正的帳本，這就是所謂的<strong>共識機制</strong>，但是在整個網路中很難知道怎樣算多數，因為網路不停地變化，無法準確的知道總結點的數量，因此比特幣才用這種特別的共識機制，他們的共識就是</p>\n<blockquote>\n<p>只有最先解出答案的那一個人，才有寫帳的權利</p>\n</blockquote>\n<h2 id=\"Blockchain-特點\"><a href=\"#Blockchain-特點\" class=\"headerlink\" title=\"Blockchain 特點\"></a>Blockchain 特點</h2><ul>\n<li>去中心化</li>\n<li>不可篡改</li>\n<li>帳本公開透明(帳本必須公開，礦工才能做驗證)</li>\n<li>信任機器</li>\n</ul>\n<h2 id=\"以應用觀點來看區塊鏈\"><a href=\"#以應用觀點來看區塊鏈\" class=\"headerlink\" title=\"以應用觀點來看區塊鏈\"></a>以應用觀點來看區塊鏈</h2><ul>\n<li>Blockchain1.0 Currency </li>\n<li>Blockchain2.0 Smart Contracts</li>\n<li>Blockchain3.0 Decentralized Applications = DApp</li>\n</ul>\n<h2 id=\"以技術觀點來看區塊鏈\"><a href=\"#以技術觀點來看區塊鏈\" class=\"headerlink\" title=\"以技術觀點來看區塊鏈\"></a>以技術觀點來看區塊鏈</h2><ul>\n<li>Blockchain1.0 Bitcoin</li>\n<li>Blockchain2.0 Ethereum</li>\n<li>Blockchain3.0 DAG</li>\n</ul>\n<h2 id=\"區塊鏈的研究挑戰\"><a href=\"#區塊鏈的研究挑戰\" class=\"headerlink\" title=\"區塊鏈的研究挑戰\"></a>區塊鏈的研究挑戰</h2><ul>\n<li>共識機制(PoW PoS)</li>\n<li>智能合約安全及隱私</li>\n<li>擴充性</li>\n<li>高效(確認交易的速度)</li>\n<li>經濟誘因(讓生態系可以順利運作)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"比特幣的交易過程\"><a href=\"#比特幣的交易過程\" class=\"headerlink\" title=\"比特幣的交易過程\"></a>比特幣的交易過程</h2><p>大致可分為三大部分</p>\n<ol>\n<li><p>當有交易產生時，交易並不會馬上被記到區塊上，而會廣播到各個節點中，放置到礦工們的mempool，被視為<strong>待確認的交易</strong></p>\n</li>\n<li><p>接著，礦工們開始解一道很難的數學題，先解出來的那個人就有寫帳的權利。一個區塊可以容納不只一筆交易，但區塊有大小限制(比特幣: 1MB)，因此礦工們會盡可能地從mempool中選出價值最高的組合優先計算，算出來後將結果廣播到整個網路</p>\n</li>\n<li><p>其他節點會進行驗證的動作，因為區塊的大小是有限制的，所以這一部份並不會太耗時，驗證通過後就將新的區塊接上現在的區塊鏈，在區塊鏈上的交易被視為<strong>已確認的交易</strong>，最後每個節點從mempool中刪去已確認的交易</p>\n</li>\n</ol>\n<h2 id=\"為什麼比特幣要用解數學題的方式？\"><a href=\"#為什麼比特幣要用解數學題的方式？\" class=\"headerlink\" title=\"為什麼比特幣要用解數學題的方式？\"></a>為什麼比特幣要用解數學題的方式？</h2><p>在P2P網路中，每一個人的帳本都長得不太一樣，而就出現了一個難題“<strong>究竟我們該相信誰的帳本？</strong>”，傳統上我們可能會想以多數決來解決，大部分人的帳本就是真正的帳本，這就是所謂的<strong>共識機制</strong>，但是在整個網路中很難知道怎樣算多數，因為網路不停地變化，無法準確的知道總結點的數量，因此比特幣才用這種特別的共識機制，他們的共識就是</p>\n<blockquote>\n<p>只有最先解出答案的那一個人，才有寫帳的權利</p>\n</blockquote>\n<h2 id=\"Blockchain-特點\"><a href=\"#Blockchain-特點\" class=\"headerlink\" title=\"Blockchain 特點\"></a>Blockchain 特點</h2><ul>\n<li>去中心化</li>\n<li>不可篡改</li>\n<li>帳本公開透明(帳本必須公開，礦工才能做驗證)</li>\n<li>信任機器</li>\n</ul>\n<h2 id=\"以應用觀點來看區塊鏈\"><a href=\"#以應用觀點來看區塊鏈\" class=\"headerlink\" title=\"以應用觀點來看區塊鏈\"></a>以應用觀點來看區塊鏈</h2><ul>\n<li>Blockchain1.0 Currency </li>\n<li>Blockchain2.0 Smart Contracts</li>\n<li>Blockchain3.0 Decentralized Applications = DApp</li>\n</ul>\n<h2 id=\"以技術觀點來看區塊鏈\"><a href=\"#以技術觀點來看區塊鏈\" class=\"headerlink\" title=\"以技術觀點來看區塊鏈\"></a>以技術觀點來看區塊鏈</h2><ul>\n<li>Blockchain1.0 Bitcoin</li>\n<li>Blockchain2.0 Ethereum</li>\n<li>Blockchain3.0 DAG</li>\n</ul>\n<h2 id=\"區塊鏈的研究挑戰\"><a href=\"#區塊鏈的研究挑戰\" class=\"headerlink\" title=\"區塊鏈的研究挑戰\"></a>區塊鏈的研究挑戰</h2><ul>\n<li>共識機制(PoW PoS)</li>\n<li>智能合約安全及隱私</li>\n<li>擴充性</li>\n<li>高效(確認交易的速度)</li>\n<li>經濟誘因(讓生態系可以順利運作)</li>\n</ul>\n"},{"title":"Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介","author":"Justin","cover":"/images/eagle.jpg","date":"2017-09-14T04:47:07.000Z","_content":"## 模板引擎是什麼?\n\n有了模板引擎的協助，你可以將模板與資料分開撰寫，之後再透過模板引擎將兩者結合在一起。假設在沒有模板引擎的情況下，想要將ajax傳回來的資料填進HTML框架中，你需要這樣寫:\n\n```javascript\n$(function () {\n    ​var shoesData = [{name:\"Nike\", price:199.00 }, {name:\"Loafers\", price:59.00 }, {name:\"Wing Tip\", price:259.00 }];\n\t​\n    ​function updateAllShoes(shoes)  {\n        var theHTMLListOfShoes = \"\";\n\t​\n        shoes.forEach (function (eachShoe)  {\n            theHTMLListOfShoes += '<li class=\"shoes\">' + '<a href=\"/' + eachShoe.name.toLowerCase() + '\">' + eachShoe.name + ' -- Price: ' + eachShoe.price + '</a></li>';\n        });\n        return theHTMLListOfShoes;\n    }\n\n    $(\".shoesNav\").append (updateAllShoes(shoesData));\n});\n```\n\n這樣寫有一個最大壞處就是HTML程式碼和javascript程式碼結合在一起，當這樣子的程式碼越加龐大，你會越難看出生成出的HTML會長什麼樣子，最終導致難以維護，但若你用了模板引擎，寫法會變為這樣:\n\n```handlebars\n<script id=\"shoe-template\" type=\"x-handlebars-template\">​\n    {{#each this}}\n        <li class=\"shoes\"><a href=\"/{{name}}\">{{name}} -- Price: {{price}} </a></li>​\n    {{/each}}\n</script>\n```\n\n```javascript\n$(function  () {\n    var shoesData = [{name:\"Nike\", price:199.00 }, {name:\"Loafers\", price:59.00 }, {name:\"Wing Tip\", price:259.00 }];\n    \n    var theTemplate = Handlebars.compile (theTemplateScript); \n    $(\".shoesNav\").append (theTemplate(shoesData)); \n});\n```\n\n可以很清楚的看到模板與資料是分開的，這讓人很容易地看出生成出的HTML程式碼的樣子\n\n## 為什麼要使用javaScript模板引擎?\n\n- 如果你使用了javascript框架，如Backone.js, Ember.js，這些框架多半依賴於javascript模板引擎\n\n- 如上述的例子，javaScript模板引擎可以使HTML和javascript程式碼分離\n\n## 為什麼要使用Handlebars?\n\nHandlebars是Mustache的擴充，他有以下的好處\n\n- Handlebars是**弱邏輯**的模板引擎，意思是在你的模板內將不會有太多的邏輯。使用模板引擎的目的就是為了使HTML程式碼乾淨、清楚、好維護，所以寫於模板中的邏輯自然愈少愈好\n\n- 在許多的javascript框架中你都能使用Handlebars.js，像是Meteor.js、Ember.js、Backbone.js，所以學習Handlebars是很有價值的\n\n## Handlebars是怎麼運作的?\n\nHandlebars是一個用javascript寫成的編譯器，它能夠接受一段包含HTML和Handlebars語法的文字，並將她轉換為一個javascript函式。\n\n這個特別的javascript函式會接受一串資料(在此特別稱為**Context**)，將相對應的資料塞進原先的HTML，之後回傳一段包含資料的HTML。在之後的文章中會介紹Handlebars的語法，及其他重要的特性。\n","source":"_posts/Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介.md","raw":"---\ntitle: Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介\nauthor: Justin\ncover: /images/eagle.jpg\ntags:\ncategories: \n- NodeJS\ndate: 2017-09-14 12:47:07\n---\n## 模板引擎是什麼?\n\n有了模板引擎的協助，你可以將模板與資料分開撰寫，之後再透過模板引擎將兩者結合在一起。假設在沒有模板引擎的情況下，想要將ajax傳回來的資料填進HTML框架中，你需要這樣寫:\n\n```javascript\n$(function () {\n    ​var shoesData = [{name:\"Nike\", price:199.00 }, {name:\"Loafers\", price:59.00 }, {name:\"Wing Tip\", price:259.00 }];\n\t​\n    ​function updateAllShoes(shoes)  {\n        var theHTMLListOfShoes = \"\";\n\t​\n        shoes.forEach (function (eachShoe)  {\n            theHTMLListOfShoes += '<li class=\"shoes\">' + '<a href=\"/' + eachShoe.name.toLowerCase() + '\">' + eachShoe.name + ' -- Price: ' + eachShoe.price + '</a></li>';\n        });\n        return theHTMLListOfShoes;\n    }\n\n    $(\".shoesNav\").append (updateAllShoes(shoesData));\n});\n```\n\n這樣寫有一個最大壞處就是HTML程式碼和javascript程式碼結合在一起，當這樣子的程式碼越加龐大，你會越難看出生成出的HTML會長什麼樣子，最終導致難以維護，但若你用了模板引擎，寫法會變為這樣:\n\n```handlebars\n<script id=\"shoe-template\" type=\"x-handlebars-template\">​\n    {{#each this}}\n        <li class=\"shoes\"><a href=\"/{{name}}\">{{name}} -- Price: {{price}} </a></li>​\n    {{/each}}\n</script>\n```\n\n```javascript\n$(function  () {\n    var shoesData = [{name:\"Nike\", price:199.00 }, {name:\"Loafers\", price:59.00 }, {name:\"Wing Tip\", price:259.00 }];\n    \n    var theTemplate = Handlebars.compile (theTemplateScript); \n    $(\".shoesNav\").append (theTemplate(shoesData)); \n});\n```\n\n可以很清楚的看到模板與資料是分開的，這讓人很容易地看出生成出的HTML程式碼的樣子\n\n## 為什麼要使用javaScript模板引擎?\n\n- 如果你使用了javascript框架，如Backone.js, Ember.js，這些框架多半依賴於javascript模板引擎\n\n- 如上述的例子，javaScript模板引擎可以使HTML和javascript程式碼分離\n\n## 為什麼要使用Handlebars?\n\nHandlebars是Mustache的擴充，他有以下的好處\n\n- Handlebars是**弱邏輯**的模板引擎，意思是在你的模板內將不會有太多的邏輯。使用模板引擎的目的就是為了使HTML程式碼乾淨、清楚、好維護，所以寫於模板中的邏輯自然愈少愈好\n\n- 在許多的javascript框架中你都能使用Handlebars.js，像是Meteor.js、Ember.js、Backbone.js，所以學習Handlebars是很有價值的\n\n## Handlebars是怎麼運作的?\n\nHandlebars是一個用javascript寫成的編譯器，它能夠接受一段包含HTML和Handlebars語法的文字，並將她轉換為一個javascript函式。\n\n這個特別的javascript函式會接受一串資料(在此特別稱為**Context**)，將相對應的資料塞進原先的HTML，之後回傳一段包含資料的HTML。在之後的文章中會介紹Handlebars的語法，及其他重要的特性。\n","slug":"Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介","published":1,"updated":"2018-03-02T15:10:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjea5202i0002ucugdawafrnf","content":"<h2 id=\"模板引擎是什麼\"><a href=\"#模板引擎是什麼\" class=\"headerlink\" title=\"模板引擎是什麼?\"></a>模板引擎是什麼?</h2><p>有了模板引擎的協助，你可以將模板與資料分開撰寫，之後再透過模板引擎將兩者結合在一起。假設在沒有模板引擎的情況下，想要將ajax傳回來的資料填進HTML框架中，你需要這樣寫:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ​<span class=\"keyword\">var</span> shoesData = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nike\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">199.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Loafers\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">59.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Wing Tip\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">259.00</span> &#125;];</div><div class=\"line\">\t​</div><div class=\"line\">    ​<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateAllShoes</span>(<span class=\"params\">shoes</span>)  </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> theHTMLListOfShoes = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t​</div><div class=\"line\">        shoes.forEach (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eachShoe</span>)  </span>&#123;</div><div class=\"line\">            theHTMLListOfShoes += <span class=\"string\">'&lt;li class=\"shoes\"&gt;'</span> + <span class=\"string\">'&lt;a href=\"/'</span> + eachShoe.name.toLowerCase() + <span class=\"string\">'\"&gt;'</span> + eachShoe.name + <span class=\"string\">' -- Price: '</span> + eachShoe.price + <span class=\"string\">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> theHTMLListOfShoes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\".shoesNav\"</span>).append (updateAllShoes(shoesData));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣寫有一個最大壞處就是HTML程式碼和javascript程式碼結合在一起，當這樣子的程式碼越加龐大，你會越難看出生成出的HTML會長什麼樣子，最終導致難以維護，但若你用了模板引擎，寫法會變為這樣:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script id=\"shoe-template\" type=\"x-handlebars-template\"&gt;​</div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> this&#125;&#125;</span></div><div class=\"line\">        &lt;li class=\"shoes\"&gt;&lt;a href=\"/<span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>\"&gt;<span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span> -- Price: <span class=\"template-variable\">&#123;&#123;price&#125;&#125;</span> &lt;/a&gt;&lt;/li&gt;​</div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>  (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> shoesData = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nike\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">199.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Loafers\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">59.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Wing Tip\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">259.00</span> &#125;];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> theTemplate = Handlebars.compile (theTemplateScript); </div><div class=\"line\">    $(<span class=\"string\">\".shoesNav\"</span>).append (theTemplate(shoesData)); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>可以很清楚的看到模板與資料是分開的，這讓人很容易地看出生成出的HTML程式碼的樣子</p>\n<h2 id=\"為什麼要使用javaScript模板引擎\"><a href=\"#為什麼要使用javaScript模板引擎\" class=\"headerlink\" title=\"為什麼要使用javaScript模板引擎?\"></a>為什麼要使用javaScript模板引擎?</h2><ul>\n<li><p>如果你使用了javascript框架，如Backone.js, Ember.js，這些框架多半依賴於javascript模板引擎</p>\n</li>\n<li><p>如上述的例子，javaScript模板引擎可以使HTML和javascript程式碼分離</p>\n</li>\n</ul>\n<h2 id=\"為什麼要使用Handlebars\"><a href=\"#為什麼要使用Handlebars\" class=\"headerlink\" title=\"為什麼要使用Handlebars?\"></a>為什麼要使用Handlebars?</h2><p>Handlebars是Mustache的擴充，他有以下的好處</p>\n<ul>\n<li><p>Handlebars是<strong>弱邏輯</strong>的模板引擎，意思是在你的模板內將不會有太多的邏輯。使用模板引擎的目的就是為了使HTML程式碼乾淨、清楚、好維護，所以寫於模板中的邏輯自然愈少愈好</p>\n</li>\n<li><p>在許多的javascript框架中你都能使用Handlebars.js，像是Meteor.js、Ember.js、Backbone.js，所以學習Handlebars是很有價值的</p>\n</li>\n</ul>\n<h2 id=\"Handlebars是怎麼運作的\"><a href=\"#Handlebars是怎麼運作的\" class=\"headerlink\" title=\"Handlebars是怎麼運作的?\"></a>Handlebars是怎麼運作的?</h2><p>Handlebars是一個用javascript寫成的編譯器，它能夠接受一段包含HTML和Handlebars語法的文字，並將她轉換為一個javascript函式。</p>\n<p>這個特別的javascript函式會接受一串資料(在此特別稱為<strong>Context</strong>)，將相對應的資料塞進原先的HTML，之後回傳一段包含資料的HTML。在之後的文章中會介紹Handlebars的語法，及其他重要的特性。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模板引擎是什麼\"><a href=\"#模板引擎是什麼\" class=\"headerlink\" title=\"模板引擎是什麼?\"></a>模板引擎是什麼?</h2><p>有了模板引擎的協助，你可以將模板與資料分開撰寫，之後再透過模板引擎將兩者結合在一起。假設在沒有模板引擎的情況下，想要將ajax傳回來的資料填進HTML框架中，你需要這樣寫:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ​<span class=\"keyword\">var</span> shoesData = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nike\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">199.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Loafers\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">59.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Wing Tip\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">259.00</span> &#125;];</div><div class=\"line\">\t​</div><div class=\"line\">    ​<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateAllShoes</span>(<span class=\"params\">shoes</span>)  </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> theHTMLListOfShoes = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t​</div><div class=\"line\">        shoes.forEach (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eachShoe</span>)  </span>&#123;</div><div class=\"line\">            theHTMLListOfShoes += <span class=\"string\">'&lt;li class=\"shoes\"&gt;'</span> + <span class=\"string\">'&lt;a href=\"/'</span> + eachShoe.name.toLowerCase() + <span class=\"string\">'\"&gt;'</span> + eachShoe.name + <span class=\"string\">' -- Price: '</span> + eachShoe.price + <span class=\"string\">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> theHTMLListOfShoes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\".shoesNav\"</span>).append (updateAllShoes(shoesData));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣寫有一個最大壞處就是HTML程式碼和javascript程式碼結合在一起，當這樣子的程式碼越加龐大，你會越難看出生成出的HTML會長什麼樣子，最終導致難以維護，但若你用了模板引擎，寫法會變為這樣:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script id=\"shoe-template\" type=\"x-handlebars-template\"&gt;​</div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> this&#125;&#125;</span></div><div class=\"line\">        &lt;li class=\"shoes\"&gt;&lt;a href=\"/<span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>\"&gt;<span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span> -- Price: <span class=\"template-variable\">&#123;&#123;price&#125;&#125;</span> &lt;/a&gt;&lt;/li&gt;​</div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>  (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> shoesData = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nike\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">199.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Loafers\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">59.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Wing Tip\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">259.00</span> &#125;];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> theTemplate = Handlebars.compile (theTemplateScript); </div><div class=\"line\">    $(<span class=\"string\">\".shoesNav\"</span>).append (theTemplate(shoesData)); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>可以很清楚的看到模板與資料是分開的，這讓人很容易地看出生成出的HTML程式碼的樣子</p>\n<h2 id=\"為什麼要使用javaScript模板引擎\"><a href=\"#為什麼要使用javaScript模板引擎\" class=\"headerlink\" title=\"為什麼要使用javaScript模板引擎?\"></a>為什麼要使用javaScript模板引擎?</h2><ul>\n<li><p>如果你使用了javascript框架，如Backone.js, Ember.js，這些框架多半依賴於javascript模板引擎</p>\n</li>\n<li><p>如上述的例子，javaScript模板引擎可以使HTML和javascript程式碼分離</p>\n</li>\n</ul>\n<h2 id=\"為什麼要使用Handlebars\"><a href=\"#為什麼要使用Handlebars\" class=\"headerlink\" title=\"為什麼要使用Handlebars?\"></a>為什麼要使用Handlebars?</h2><p>Handlebars是Mustache的擴充，他有以下的好處</p>\n<ul>\n<li><p>Handlebars是<strong>弱邏輯</strong>的模板引擎，意思是在你的模板內將不會有太多的邏輯。使用模板引擎的目的就是為了使HTML程式碼乾淨、清楚、好維護，所以寫於模板中的邏輯自然愈少愈好</p>\n</li>\n<li><p>在許多的javascript框架中你都能使用Handlebars.js，像是Meteor.js、Ember.js、Backbone.js，所以學習Handlebars是很有價值的</p>\n</li>\n</ul>\n<h2 id=\"Handlebars是怎麼運作的\"><a href=\"#Handlebars是怎麼運作的\" class=\"headerlink\" title=\"Handlebars是怎麼運作的?\"></a>Handlebars是怎麼運作的?</h2><p>Handlebars是一個用javascript寫成的編譯器，它能夠接受一段包含HTML和Handlebars語法的文字，並將她轉換為一個javascript函式。</p>\n<p>這個特別的javascript函式會接受一串資料(在此特別稱為<strong>Context</strong>)，將相對應的資料塞進原先的HTML，之後回傳一段包含資料的HTML。在之後的文章中會介紹Handlebars的語法，及其他重要的特性。</p>\n"},{"title":"Collection Method - Sort","date":"2017-06-27T13:45:57.000Z","author":"Justin","cover":"/images/contact-bg.jpg","_content":"\n## Function 描述\n\njava.util.Collection 提供了sort方法，對List進行排序\n\n> public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  \n\n由於List有索引，因此才能進行排序\n\nComparator則允許你以不同的方法對List進行排序\n\n## 實作細節\n\n想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  **java.lang.Comparable** 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:\n```Java\n\timport java.util.*;\n\n\tclass Time implements Comparable< Time> {\n\t\tprivate int hour;\n\t\tprivate int minute;\n\t\tprivate int second;\n\n\t\t//Constructor\n\t\tTime(int hour, int minute, int second) {\n\t\t\tthis.hour = hour;\n\t\t\tthis.minute = minute;\n\t\t\tthis.second = second;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Time other) {\n\t\t\tint hourDifference = this.hour - other.hour;\n\n\t\t\tif(hourDifference != 0)\n\t\t\t\treturn hourDifference;\n\n\t\t\tint minuteDifference = this.minute - other.minute;\n\n\t\t\tif(minuteDifference != 0)\n\t\t\t\treturn minuteDifference;\n\n\t\t\tint secondDifference = this.second - other.second;\n\n\t\t\treturn secondDifference;\t\t\t\n\t\t}\n\t}\n```\n\n若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a>b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b\n\n\n那另一個參數 **Comparator**是什麼呢?\n\nComparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:\n```Java\n\timport java.util.*;\n\n\tclass ReverseStringComparator implements Comparator< ReverseStringComparator> {\n\t\t@Override\n\t\tpublic int compare(String s1, String s2) {\n\t\t\treturn -s1.compareTo(s2);\n\t\t}\n\t}\n```\n需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣\n\n在以下的情況中，你必須使用到Comparator\n\n1.  不能修改原始碼(修改了就不是標準API了)\n\n2.  class被宣告為final，無法先繼承再做修改\n\n3.  想有不只一種排序的方法\n\n\n其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面\n\n## Further More\n\n1.  底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序\n\n2.  Collections裡有一個方法 **reverseOrder()** 會傳回一個Comparator，倒轉原來的排序方式\n\n3.  若被比較的物件沒有實作Comparable介面，則會拋出 **ClassCastException** 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯","source":"_posts/Collection-Method-Sort.md","raw":"---\ntitle: Collection Method - Sort\ndate: 2017-06-27 21:45:57\nauthor: Justin\ncover: /images/contact-bg.jpg\ntags:\ncategories: \n- Java\n---\n\n## Function 描述\n\njava.util.Collection 提供了sort方法，對List進行排序\n\n> public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  \n\n由於List有索引，因此才能進行排序\n\nComparator則允許你以不同的方法對List進行排序\n\n## 實作細節\n\n想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  **java.lang.Comparable** 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:\n```Java\n\timport java.util.*;\n\n\tclass Time implements Comparable< Time> {\n\t\tprivate int hour;\n\t\tprivate int minute;\n\t\tprivate int second;\n\n\t\t//Constructor\n\t\tTime(int hour, int minute, int second) {\n\t\t\tthis.hour = hour;\n\t\t\tthis.minute = minute;\n\t\t\tthis.second = second;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Time other) {\n\t\t\tint hourDifference = this.hour - other.hour;\n\n\t\t\tif(hourDifference != 0)\n\t\t\t\treturn hourDifference;\n\n\t\t\tint minuteDifference = this.minute - other.minute;\n\n\t\t\tif(minuteDifference != 0)\n\t\t\t\treturn minuteDifference;\n\n\t\t\tint secondDifference = this.second - other.second;\n\n\t\t\treturn secondDifference;\t\t\t\n\t\t}\n\t}\n```\n\n若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a>b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b\n\n\n那另一個參數 **Comparator**是什麼呢?\n\nComparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:\n```Java\n\timport java.util.*;\n\n\tclass ReverseStringComparator implements Comparator< ReverseStringComparator> {\n\t\t@Override\n\t\tpublic int compare(String s1, String s2) {\n\t\t\treturn -s1.compareTo(s2);\n\t\t}\n\t}\n```\n需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣\n\n在以下的情況中，你必須使用到Comparator\n\n1.  不能修改原始碼(修改了就不是標準API了)\n\n2.  class被宣告為final，無法先繼承再做修改\n\n3.  想有不只一種排序的方法\n\n\n其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面\n\n## Further More\n\n1.  底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序\n\n2.  Collections裡有一個方法 **reverseOrder()** 會傳回一個Comparator，倒轉原來的排序方式\n\n3.  若被比較的物件沒有實作Comparable介面，則會拋出 **ClassCastException** 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯","slug":"Collection-Method-Sort","published":1,"updated":"2018-03-02T15:10:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjea5202m0004ucugmcjuc086","content":"<h2 id=\"Function-描述\"><a href=\"#Function-描述\" class=\"headerlink\" title=\"Function 描述\"></a>Function 描述</h2><p>java.util.Collection 提供了sort方法，對List進行排序</p>\n<blockquote>\n<p>public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  </p>\n</blockquote>\n<p>由於List有索引，因此才能進行排序</p>\n<p>Comparator則允許你以不同的方法對List進行排序</p>\n<h2 id=\"實作細節\"><a href=\"#實作細節\" class=\"headerlink\" title=\"實作細節\"></a>實作細節</h2><p>想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  <strong>java.lang.Comparable</strong> 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Time</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt; <span class=\"title\">Time</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hour;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> minute;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> second;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//Constructor</span></div><div class=\"line\">\tTime(<span class=\"keyword\">int</span> hour, <span class=\"keyword\">int</span> minute, <span class=\"keyword\">int</span> second) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.hour = hour;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.minute = minute;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.second = second;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Time other)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hourDifference = <span class=\"keyword\">this</span>.hour - other.hour;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hourDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> hourDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> minuteDifference = <span class=\"keyword\">this</span>.minute - other.minute;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(minuteDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> minuteDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> secondDifference = <span class=\"keyword\">this</span>.second - other.second;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> secondDifference;\t\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a&gt;b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b</p>\n<p>那另一個參數 <strong>Comparator</strong>是什麼呢?</p>\n<p>Comparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReverseStringComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt; <span class=\"title\">ReverseStringComparator</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -s1.compareTo(s2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣</p>\n<p>在以下的情況中，你必須使用到Comparator</p>\n<ol>\n<li><p>不能修改原始碼(修改了就不是標準API了)</p>\n</li>\n<li><p>class被宣告為final，無法先繼承再做修改</p>\n</li>\n<li><p>想有不只一種排序的方法</p>\n</li>\n</ol>\n<p>其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面</p>\n<h2 id=\"Further-More\"><a href=\"#Further-More\" class=\"headerlink\" title=\"Further More\"></a>Further More</h2><ol>\n<li><p>底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序</p>\n</li>\n<li><p>Collections裡有一個方法 <strong>reverseOrder()</strong> 會傳回一個Comparator，倒轉原來的排序方式</p>\n</li>\n<li><p>若被比較的物件沒有實作Comparable介面，則會拋出 <strong>ClassCastException</strong> 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Function-描述\"><a href=\"#Function-描述\" class=\"headerlink\" title=\"Function 描述\"></a>Function 描述</h2><p>java.util.Collection 提供了sort方法，對List進行排序</p>\n<blockquote>\n<p>public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  </p>\n</blockquote>\n<p>由於List有索引，因此才能進行排序</p>\n<p>Comparator則允許你以不同的方法對List進行排序</p>\n<h2 id=\"實作細節\"><a href=\"#實作細節\" class=\"headerlink\" title=\"實作細節\"></a>實作細節</h2><p>想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  <strong>java.lang.Comparable</strong> 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Time</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt; <span class=\"title\">Time</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hour;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> minute;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> second;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//Constructor</span></div><div class=\"line\">\tTime(<span class=\"keyword\">int</span> hour, <span class=\"keyword\">int</span> minute, <span class=\"keyword\">int</span> second) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.hour = hour;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.minute = minute;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.second = second;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Time other)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hourDifference = <span class=\"keyword\">this</span>.hour - other.hour;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hourDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> hourDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> minuteDifference = <span class=\"keyword\">this</span>.minute - other.minute;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(minuteDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> minuteDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> secondDifference = <span class=\"keyword\">this</span>.second - other.second;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> secondDifference;\t\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a&gt;b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b</p>\n<p>那另一個參數 <strong>Comparator</strong>是什麼呢?</p>\n<p>Comparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReverseStringComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt; <span class=\"title\">ReverseStringComparator</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -s1.compareTo(s2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣</p>\n<p>在以下的情況中，你必須使用到Comparator</p>\n<ol>\n<li><p>不能修改原始碼(修改了就不是標準API了)</p>\n</li>\n<li><p>class被宣告為final，無法先繼承再做修改</p>\n</li>\n<li><p>想有不只一種排序的方法</p>\n</li>\n</ol>\n<p>其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面</p>\n<h2 id=\"Further-More\"><a href=\"#Further-More\" class=\"headerlink\" title=\"Further More\"></a>Further More</h2><ol>\n<li><p>底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序</p>\n</li>\n<li><p>Collections裡有一個方法 <strong>reverseOrder()</strong> 會傳回一個Comparator，倒轉原來的排序方式</p>\n</li>\n<li><p>若被比較的物件沒有實作Comparable介面，則會拋出 <strong>ClassCastException</strong> 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯</p>\n</li>\n</ol>\n"},{"title":"Handlebars模板引擎(2) - 使用Handlebars","author":"Justin","cover":"/images/about-bg.jpg","date":"2017-09-14T04:47:07.000Z","_content":"Handlebars是一個可用於clint端或server端的模板引擎，Handlebars由javascript寫成。\n\n## 安裝方法\n\n在創建express時用以下命令\n\n\texpress (project name) --hbs\n\n或在不使用express-generator的情況下，使用以下命令自行加入\n\n\tnpm install hbs --save\n\n若使用第二種方法，還必須在app.js中將view engine修改為Handlebars\n\n\tapp.set('view engine', 'hbs');\n\n## Handlebars基礎\n\n### 大括號的使用\n\n在Handlebars模板中用 `{ { } }` 框住的內容是可以被替換的部分，像是\n\n```handlebars\n<p>Hello, {{name}}</p>\n```\n\n這樣的一個模板，如果傳入的內容是{name: 'Justin'}的話，則最終輸出的HTML將會是\n\n\t<p>Hello, Justin</p>\n\n特別的是如果你想傳如一段HTML，像是{name: '&lt;b&gt;Justin&lt;/b&gt;'}  \n使用之前的模板，輸出結果會是\n\n\t<p>Hello, &lt;b&gt;Justin&lt;/b&gt;</p>\n\n要解決這個問題，必須在模板中使用 `{ { { } } }` ，它會關閉HTML的轉義功能:\n\n```handlebars\n<p>Hello, {{{name}}}</p>\n```\n\n### 區塊\n\n為了解釋區塊，我們先來假設一段內容\n\n```json\n{\n    name: 'Golem',\n    type: ['Rock', 'Ground'],\n    quickMoves: [\n                {name: Rock Throw, DPS: 16}, \n                {name: Mud Slap, DPS: 12.9}\n    ],\n    mainMoves: [\n                {name: Stone Edge, DPS: 42.9}, \n                {name: Earthquake, DPS: 35.1}, \n                {name: Rock Blast, DPS: 23.1}\n    ],\n    moveType: 'Rock or Ground' \n}\n```\n\n這是一段有關Pokemon Go資料的內容，現在我們來檢視一個可傳入以上內容的模板\n\n```handlebars\n<div>\n    <p>Name: {{name}}</p>\n    <p>\n        {{#each type}}\n            {{.}} \n        {{/each}}\n    </p>\n    <ul>\n        {{#each quickMoves}}\n            <li>\n                Move Name: {{name}}, DPS: {{DPS}}\n                {{#if ../type}}\n                    ({{../../moveType}})\n                {{/if}}\n            </li>\n        {{/each}}\n    </ul>\n</div>\n```\n\n原先的內容包括name, type, quickMoves, mainMoves等等屬性，但是在 `{ { #each type} }` 與 `{ { /each} }` 之間**進入了另一個\"區塊\"**，這個區塊的內容只包括了type的陣列，而 `{ {.} }` 則代表的是當前遍歷到的值\n\n我們再來看看下面比較複雜的結構，一樣這個each區塊將內容改變了，變成只包含了quickMoves陣列，比較特別的是if，**在if區塊中的內容與他的父層是一樣的，但是與他的父層仍舊相隔了一層**，所以在這個例子中你可以看到，第一個 `../` 先回到父層的內容，也就是只包含了quickMoves陣列的內容，第二個 `../` 再跑到上一層，也就是回到了最原始、最完整的內容，這時就可以取用moveType的值了\n\n千萬要記得的是: **`../` 代表的父級是就模板結構而言，不是內容本身的結構**\n\n## 後端模板\n\n### View & Layout\n\n在express專案中有一個資料夾是views，當中存放著一張張的網頁(View)，不過大部分的網頁都有相似的結構，因此我們可以創造出一個Layout，Layout是一個特殊的View，是模板的模板，在hbs中，hbs會尋找名為layout.hbs的這個模板，將這個模板作為Layout\n\n以下是一個例子: \n\nlayout.hbs\n\n```handlebars\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{title}}</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n    </head>\n    <body>\n        {{{body}}}\n    </body>\n</html>\n```\n\nwelcome.hbs\n\n```html\n<h1>Welcome! My Friends!</h1>\n```\n\n這時你用下列程式碼渲染頁面:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !'});\n});\n```\n\n處理順序是這樣的:\n\n1.  傳入的內容和welcome.hbs做結合\n2.  之後將welcome.hbs的內容放入layout.hbs的body中，同時傳入的內容一樣會與layout.hbs做結合\n\n最後顯示的html如下:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Pokemon Go is Fun !</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n    </head>\n    <body>\n        <h1>Welcome! My Friends!</h1>\n    </body>\n</html>\n```\n\n如果你有多個Layout，那麼你只要在傳入的內容裡指定要使用哪一個Layout就可以了，像是:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !', layout: 'layout2.hbs'});\n});\n```\n\n如果你不需要套入Layout，那麼就將layout的值設為null，像是:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !', layout: null});\n});\n```\n\n如果你想改變預設的Layout，那麼就更改view option的設定值，加入以下程式:\n\n```javascript\napp.set('view options', {\n    layout: layout2.hbs;\n})\n```\n\n### Partial\n\n在不同的網頁上我們經常重複使用了許多相同的元件，如果將這些元件寫在每個檔案裡，不僅網頁內容變得更龐大、更難以維護，在元件的修改上也會變得十分麻煩，所以比較好的做法就是將它抽離，獨自形成一個模板，我們特別稱這種模板為\"Partial\"\n\n我們先建立一個partial檔案(檔案位子在views/partials/pokemonInfo.hbs):\n\n```handlebars\n<div class=\"popularPokemon\">\n    {{#each popularPokemon}}\n        <div class=\"pokemon\">\n            <img src=\"/images/{{imagePath}}\" />\n            <h3>名字: {{name}}</h3>\n            <p>屬性: {{type}}</p>\n            <p>外部連結: <a href=\"{{link}}\"></a></p>\n        </div>\n    {{/each}}\n</div>\n```\n\n再來我們要註冊partial，目的是為了在view裡面帶入這個partial，一種方式是註冊單一個partial:\n\n```javascript\nhbs.registerPartial('pokemonInfo', fs.readFileSync(__dirname + '/views/partials/pokemonInfo.hbs', 'utf-8'));\n```\n\n第二種方式是一次註冊整個資料夾內所有的內容\n\n```javascript\nhbs.registerPartials(__dirname + '/view/partials');\n```\n\n之後設定要傳入的內容，為了簡潔一點，我們用一個函式包裝:\n\n```javascript\nfunction getPokemonInfo() {\n    return {\n        popularPokemon: [\n            {\n                imagePath: 'Tyranitar.jpg',\n                name: '班基拉斯',\n                type: 'Rock、Dark',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/248-tyranitar'\n            },\n            {\n                imagePath: 'Dragonite.jpg',\n                name: '快龍',\n                type: 'Dragon、Fly',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/149-dragonite'\n            },\n            {\n                imagePath: 'Golem.jpg',\n                name: '隆隆岩',\n                type: 'Rock、Ground',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/76-golem'\t\n            }\n        ]\n    };\n}\n```\n\n你可以用如下的方式傳輸數據:\n\n```javascript\napp.get('/', function(req, res) {\n    res.locals = getPokemonInfo();\n    res.render('welcome');\n});\n```\n\n然後在welcome.hbs裡添加這個partial:\n\n```handlebars\n<h1>Welcome! My Friends!</h1>\n{{> pokemonInfo}}\n```\n\n就大功告成了!  \n當然這種做法還稱不上是完美，原因是你每次需要這份partial時，都要傳一次pokemonInfo內容，我們換種寫法，讓所有的view都能使用這份pokemonInfo內容，用的方式是加入中介軟體:  \n\n```javascript\napp.use(function(req, res, next) {\n    res.locals = getPokemonInfo();\n    next();\n});\n```\n\n這樣就能為資料注入res.locals物件，而不用在每個路由處理程式裡都寫一次\n\n### Helper\n\nHandlebars是一個弱邏輯的模板引擎，舉個例子，你在前面看到的 `{ { #if} }` ，後面是不能接判斷式的，像 `{ { #if type!=null} }` 和 `{ { #if type&&name} }` 都是不合法的，但如果你想要處理更複雜的邏輯該怎麼辦呢?這時你就需要helper的協助了。\n\n你可以想像helper是一個自訂義標籤，它可以在handlebars模板的任何地方，helper和partial一樣需要被事先的註冊，底下是一個簡單的helper:\n\n```javascript\nhbs.registerHelper('list', function(context, option) {\n    var out = \"</ul>\";\n\n    for(var i=0; i<context.length; i++) {\n        out = out + \"<li>\" + options.fn(context[i]) + \"</li>\";\n    }\n\n    return out + \"</ul>\";\n});\n```\n\n在解釋以上語法之前，我們先來看看傳入的內容(context)是什麼:\n\n```json\n{\n    people: [\n        {firstName: 'Justin', lastName: 'Chien'},\n        {firstName: 'Jack', lastName: 'Lee'},\n        {firstName: 'Mandy', lastNmae: 'Wu'}\n    ]\n}\n```\n\n第一個參數 `list` 是這個自定義標籤的名字，第二個參數則傳入一個function，代表你想要做到的事，function的第一個參數傳入一段context，如果沒有設則是同於當前的context，第二個參數 `option` 有一個方法 `fn` ， 假設在你的list區塊中還有其他的模板，那麼 `option.fn()` 代表的就會是編譯過的那些模板，當你傳入一段context時，它就會回傳出相應的HTML，底下是一個實際應用的例子:\n\n```handlebars\n{{#list people}}{{firstName}} {{lastName}}{{/list}}\n```\n\n嘗試理解一下，people代表現在的context已經被鎖定在people陣列中，而此時的option.fn()代表的是被編譯過的 `{ {firstName} } { {lastName} }` ，譬如將{firstName: 'Justin', lastName: 'Chien'}傳入option.fn()，它就會回傳給你 `Chien Justin` ，所以最終的結果會是這樣:\n\n```html\n<ul>\n    <li>Justin Chien</li>\n    <li>Jack Lee</li>\n    <li>Mandy Wu</li>\n</ul>\n```\n\n老實說前面看到的 `{ { #if} }` 、 `{ { #each} }` 都是helper，只是他們是內建的helper，其他內建的helper還有 `{ { #with} }` 、 `{ { #unless} }` 等等，可以在[此連結](https://segmentfault.com/a/1190000000342636)中查看\n\n## 前端模板\n\n在前端中一樣可以引入Handlebars，步驟是這樣的:  \n\n1.  將Handlebars下載後放入靜態內容或直接使用CDN\n\n2.  寫一個模板\n\n3.  編譯模板\n\n4.  將內容(context)傳入編譯後的模板\n\n為了方便理解，底下是一個簡單的例子，首先引入Handlebars:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js\"></script>\n```\n\n再來寫一個模板:\n\n```handlebars\n<script id=\"template\" type=\"text/x-handlebars-template\">\n    Hi! My name is {{{name}}}.\n</script>\n```\n\n然後編譯它:\n\n```javascript\nvar compiledTemplate = Handlebars.compile($('#template').html());\n```\n\n最後將內容傳入編譯後的模板:\n\n```html\n<div id=\"result\"></div>\n\nvar data = {name: 'Kevin'};\n$('#result').html(compiledTemplate(data));\n```\n\n當然你一樣可以在前端模板中使用partial、helper等特性，就像Handlebars用於後端時的那樣\n\n這篇文章主要講述一些Handlebars的基礎功能，在之後的文章中我們再來探討更多Handlebars可以做到的事","source":"_posts/Handlebars模板引擎(2) - 使用Handlebars.md","raw":"---\ntitle: Handlebars模板引擎(2) - 使用Handlebars\nauthor: Justin\ncover: /images/about-bg.jpg\ntags:\ncategories: \n- NodeJS\ndate: 2017-09-14 12:47:07\n---\nHandlebars是一個可用於clint端或server端的模板引擎，Handlebars由javascript寫成。\n\n## 安裝方法\n\n在創建express時用以下命令\n\n\texpress (project name) --hbs\n\n或在不使用express-generator的情況下，使用以下命令自行加入\n\n\tnpm install hbs --save\n\n若使用第二種方法，還必須在app.js中將view engine修改為Handlebars\n\n\tapp.set('view engine', 'hbs');\n\n## Handlebars基礎\n\n### 大括號的使用\n\n在Handlebars模板中用 `{ { } }` 框住的內容是可以被替換的部分，像是\n\n```handlebars\n<p>Hello, {{name}}</p>\n```\n\n這樣的一個模板，如果傳入的內容是{name: 'Justin'}的話，則最終輸出的HTML將會是\n\n\t<p>Hello, Justin</p>\n\n特別的是如果你想傳如一段HTML，像是{name: '&lt;b&gt;Justin&lt;/b&gt;'}  \n使用之前的模板，輸出結果會是\n\n\t<p>Hello, &lt;b&gt;Justin&lt;/b&gt;</p>\n\n要解決這個問題，必須在模板中使用 `{ { { } } }` ，它會關閉HTML的轉義功能:\n\n```handlebars\n<p>Hello, {{{name}}}</p>\n```\n\n### 區塊\n\n為了解釋區塊，我們先來假設一段內容\n\n```json\n{\n    name: 'Golem',\n    type: ['Rock', 'Ground'],\n    quickMoves: [\n                {name: Rock Throw, DPS: 16}, \n                {name: Mud Slap, DPS: 12.9}\n    ],\n    mainMoves: [\n                {name: Stone Edge, DPS: 42.9}, \n                {name: Earthquake, DPS: 35.1}, \n                {name: Rock Blast, DPS: 23.1}\n    ],\n    moveType: 'Rock or Ground' \n}\n```\n\n這是一段有關Pokemon Go資料的內容，現在我們來檢視一個可傳入以上內容的模板\n\n```handlebars\n<div>\n    <p>Name: {{name}}</p>\n    <p>\n        {{#each type}}\n            {{.}} \n        {{/each}}\n    </p>\n    <ul>\n        {{#each quickMoves}}\n            <li>\n                Move Name: {{name}}, DPS: {{DPS}}\n                {{#if ../type}}\n                    ({{../../moveType}})\n                {{/if}}\n            </li>\n        {{/each}}\n    </ul>\n</div>\n```\n\n原先的內容包括name, type, quickMoves, mainMoves等等屬性，但是在 `{ { #each type} }` 與 `{ { /each} }` 之間**進入了另一個\"區塊\"**，這個區塊的內容只包括了type的陣列，而 `{ {.} }` 則代表的是當前遍歷到的值\n\n我們再來看看下面比較複雜的結構，一樣這個each區塊將內容改變了，變成只包含了quickMoves陣列，比較特別的是if，**在if區塊中的內容與他的父層是一樣的，但是與他的父層仍舊相隔了一層**，所以在這個例子中你可以看到，第一個 `../` 先回到父層的內容，也就是只包含了quickMoves陣列的內容，第二個 `../` 再跑到上一層，也就是回到了最原始、最完整的內容，這時就可以取用moveType的值了\n\n千萬要記得的是: **`../` 代表的父級是就模板結構而言，不是內容本身的結構**\n\n## 後端模板\n\n### View & Layout\n\n在express專案中有一個資料夾是views，當中存放著一張張的網頁(View)，不過大部分的網頁都有相似的結構，因此我們可以創造出一個Layout，Layout是一個特殊的View，是模板的模板，在hbs中，hbs會尋找名為layout.hbs的這個模板，將這個模板作為Layout\n\n以下是一個例子: \n\nlayout.hbs\n\n```handlebars\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{title}}</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n    </head>\n    <body>\n        {{{body}}}\n    </body>\n</html>\n```\n\nwelcome.hbs\n\n```html\n<h1>Welcome! My Friends!</h1>\n```\n\n這時你用下列程式碼渲染頁面:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !'});\n});\n```\n\n處理順序是這樣的:\n\n1.  傳入的內容和welcome.hbs做結合\n2.  之後將welcome.hbs的內容放入layout.hbs的body中，同時傳入的內容一樣會與layout.hbs做結合\n\n最後顯示的html如下:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Pokemon Go is Fun !</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n    </head>\n    <body>\n        <h1>Welcome! My Friends!</h1>\n    </body>\n</html>\n```\n\n如果你有多個Layout，那麼你只要在傳入的內容裡指定要使用哪一個Layout就可以了，像是:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !', layout: 'layout2.hbs'});\n});\n```\n\n如果你不需要套入Layout，那麼就將layout的值設為null，像是:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !', layout: null});\n});\n```\n\n如果你想改變預設的Layout，那麼就更改view option的設定值，加入以下程式:\n\n```javascript\napp.set('view options', {\n    layout: layout2.hbs;\n})\n```\n\n### Partial\n\n在不同的網頁上我們經常重複使用了許多相同的元件，如果將這些元件寫在每個檔案裡，不僅網頁內容變得更龐大、更難以維護，在元件的修改上也會變得十分麻煩，所以比較好的做法就是將它抽離，獨自形成一個模板，我們特別稱這種模板為\"Partial\"\n\n我們先建立一個partial檔案(檔案位子在views/partials/pokemonInfo.hbs):\n\n```handlebars\n<div class=\"popularPokemon\">\n    {{#each popularPokemon}}\n        <div class=\"pokemon\">\n            <img src=\"/images/{{imagePath}}\" />\n            <h3>名字: {{name}}</h3>\n            <p>屬性: {{type}}</p>\n            <p>外部連結: <a href=\"{{link}}\"></a></p>\n        </div>\n    {{/each}}\n</div>\n```\n\n再來我們要註冊partial，目的是為了在view裡面帶入這個partial，一種方式是註冊單一個partial:\n\n```javascript\nhbs.registerPartial('pokemonInfo', fs.readFileSync(__dirname + '/views/partials/pokemonInfo.hbs', 'utf-8'));\n```\n\n第二種方式是一次註冊整個資料夾內所有的內容\n\n```javascript\nhbs.registerPartials(__dirname + '/view/partials');\n```\n\n之後設定要傳入的內容，為了簡潔一點，我們用一個函式包裝:\n\n```javascript\nfunction getPokemonInfo() {\n    return {\n        popularPokemon: [\n            {\n                imagePath: 'Tyranitar.jpg',\n                name: '班基拉斯',\n                type: 'Rock、Dark',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/248-tyranitar'\n            },\n            {\n                imagePath: 'Dragonite.jpg',\n                name: '快龍',\n                type: 'Dragon、Fly',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/149-dragonite'\n            },\n            {\n                imagePath: 'Golem.jpg',\n                name: '隆隆岩',\n                type: 'Rock、Ground',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/76-golem'\t\n            }\n        ]\n    };\n}\n```\n\n你可以用如下的方式傳輸數據:\n\n```javascript\napp.get('/', function(req, res) {\n    res.locals = getPokemonInfo();\n    res.render('welcome');\n});\n```\n\n然後在welcome.hbs裡添加這個partial:\n\n```handlebars\n<h1>Welcome! My Friends!</h1>\n{{> pokemonInfo}}\n```\n\n就大功告成了!  \n當然這種做法還稱不上是完美，原因是你每次需要這份partial時，都要傳一次pokemonInfo內容，我們換種寫法，讓所有的view都能使用這份pokemonInfo內容，用的方式是加入中介軟體:  \n\n```javascript\napp.use(function(req, res, next) {\n    res.locals = getPokemonInfo();\n    next();\n});\n```\n\n這樣就能為資料注入res.locals物件，而不用在每個路由處理程式裡都寫一次\n\n### Helper\n\nHandlebars是一個弱邏輯的模板引擎，舉個例子，你在前面看到的 `{ { #if} }` ，後面是不能接判斷式的，像 `{ { #if type!=null} }` 和 `{ { #if type&&name} }` 都是不合法的，但如果你想要處理更複雜的邏輯該怎麼辦呢?這時你就需要helper的協助了。\n\n你可以想像helper是一個自訂義標籤，它可以在handlebars模板的任何地方，helper和partial一樣需要被事先的註冊，底下是一個簡單的helper:\n\n```javascript\nhbs.registerHelper('list', function(context, option) {\n    var out = \"</ul>\";\n\n    for(var i=0; i<context.length; i++) {\n        out = out + \"<li>\" + options.fn(context[i]) + \"</li>\";\n    }\n\n    return out + \"</ul>\";\n});\n```\n\n在解釋以上語法之前，我們先來看看傳入的內容(context)是什麼:\n\n```json\n{\n    people: [\n        {firstName: 'Justin', lastName: 'Chien'},\n        {firstName: 'Jack', lastName: 'Lee'},\n        {firstName: 'Mandy', lastNmae: 'Wu'}\n    ]\n}\n```\n\n第一個參數 `list` 是這個自定義標籤的名字，第二個參數則傳入一個function，代表你想要做到的事，function的第一個參數傳入一段context，如果沒有設則是同於當前的context，第二個參數 `option` 有一個方法 `fn` ， 假設在你的list區塊中還有其他的模板，那麼 `option.fn()` 代表的就會是編譯過的那些模板，當你傳入一段context時，它就會回傳出相應的HTML，底下是一個實際應用的例子:\n\n```handlebars\n{{#list people}}{{firstName}} {{lastName}}{{/list}}\n```\n\n嘗試理解一下，people代表現在的context已經被鎖定在people陣列中，而此時的option.fn()代表的是被編譯過的 `{ {firstName} } { {lastName} }` ，譬如將{firstName: 'Justin', lastName: 'Chien'}傳入option.fn()，它就會回傳給你 `Chien Justin` ，所以最終的結果會是這樣:\n\n```html\n<ul>\n    <li>Justin Chien</li>\n    <li>Jack Lee</li>\n    <li>Mandy Wu</li>\n</ul>\n```\n\n老實說前面看到的 `{ { #if} }` 、 `{ { #each} }` 都是helper，只是他們是內建的helper，其他內建的helper還有 `{ { #with} }` 、 `{ { #unless} }` 等等，可以在[此連結](https://segmentfault.com/a/1190000000342636)中查看\n\n## 前端模板\n\n在前端中一樣可以引入Handlebars，步驟是這樣的:  \n\n1.  將Handlebars下載後放入靜態內容或直接使用CDN\n\n2.  寫一個模板\n\n3.  編譯模板\n\n4.  將內容(context)傳入編譯後的模板\n\n為了方便理解，底下是一個簡單的例子，首先引入Handlebars:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js\"></script>\n```\n\n再來寫一個模板:\n\n```handlebars\n<script id=\"template\" type=\"text/x-handlebars-template\">\n    Hi! My name is {{{name}}}.\n</script>\n```\n\n然後編譯它:\n\n```javascript\nvar compiledTemplate = Handlebars.compile($('#template').html());\n```\n\n最後將內容傳入編譯後的模板:\n\n```html\n<div id=\"result\"></div>\n\nvar data = {name: 'Kevin'};\n$('#result').html(compiledTemplate(data));\n```\n\n當然你一樣可以在前端模板中使用partial、helper等特性，就像Handlebars用於後端時的那樣\n\n這篇文章主要講述一些Handlebars的基礎功能，在之後的文章中我們再來探討更多Handlebars可以做到的事","slug":"Handlebars模板引擎(2) - 使用Handlebars","published":1,"updated":"2018-03-02T15:10:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjea5202o0005ucugrfgkzku3","content":"<p>Handlebars是一個可用於clint端或server端的模板引擎，Handlebars由javascript寫成。</p>\n<h2 id=\"安裝方法\"><a href=\"#安裝方法\" class=\"headerlink\" title=\"安裝方法\"></a>安裝方法</h2><p>在創建express時用以下命令</p>\n<pre><code>express (project name) --hbs\n</code></pre><p>或在不使用express-generator的情況下，使用以下命令自行加入</p>\n<pre><code>npm install hbs --save\n</code></pre><p>若使用第二種方法，還必須在app.js中將view engine修改為Handlebars</p>\n<pre><code>app.set(&apos;view engine&apos;, &apos;hbs&apos;);\n</code></pre><h2 id=\"Handlebars基礎\"><a href=\"#Handlebars基礎\" class=\"headerlink\" title=\"Handlebars基礎\"></a>Handlebars基礎</h2><h3 id=\"大括號的使用\"><a href=\"#大括號的使用\" class=\"headerlink\" title=\"大括號的使用\"></a>大括號的使用</h3><p>在Handlebars模板中用 <code>{ { } }</code> 框住的內容是可以被替換的部分，像是</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;Hello, <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>這樣的一個模板，如果傳入的內容是{name: ‘Justin’}的話，則最終輸出的HTML將會是</p>\n<pre><code>&lt;p&gt;Hello, Justin&lt;/p&gt;\n</code></pre><p>特別的是如果你想傳如一段HTML，像是{name: ‘&lt;b&gt;Justin&lt;/b&gt;’}<br>使用之前的模板，輸出結果會是</p>\n<pre><code>&lt;p&gt;Hello, &amp;lt;b&amp;gt;Justin&amp;lt;/b&amp;gt;&lt;/p&gt;\n</code></pre><p>要解決這個問題，必須在模板中使用 <code>{ { { } } }</code> ，它會關閉HTML的轉義功能:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;Hello, <span class=\"template-variable\">&#123;&#123;&#123;name&#125;&#125;</span>&#125;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"區塊\"><a href=\"#區塊\" class=\"headerlink\" title=\"區塊\"></a>區塊</h3><p>為了解釋區塊，我們先來假設一段內容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    name: 'Golem',</div><div class=\"line\">    type: ['Rock', 'Ground'],</div><div class=\"line\">    quickMoves: [</div><div class=\"line\">                &#123;name: Rock Throw, DPS: 16&#125;, </div><div class=\"line\">                &#123;name: Mud Slap, DPS: 12.9&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    mainMoves: [</div><div class=\"line\">                &#123;name: Stone Edge, DPS: 42.9&#125;, </div><div class=\"line\">                &#123;name: Earthquake, DPS: 35.1&#125;, </div><div class=\"line\">                &#123;name: Rock Blast, DPS: 23.1&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    moveType: 'Rock or Ground' </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這是一段有關Pokemon Go資料的內容，現在我們來檢視一個可傳入以上內容的模板</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;p&gt;Name: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> type&#125;&#125;</span></div><div class=\"line\">            <span class=\"template-variable\">&#123;&#123;.&#125;&#125;</span> </div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">    &lt;/p&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> quickMoves&#125;&#125;</span></div><div class=\"line\">            &lt;li&gt;</div><div class=\"line\">                Move Name: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>, DPS: <span class=\"template-variable\">&#123;&#123;DPS&#125;&#125;</span></div><div class=\"line\">                <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">if</span></span> ../type&#125;&#125;</span></div><div class=\"line\">                    (<span class=\"template-variable\">&#123;&#123;../../moveType&#125;&#125;</span>)</div><div class=\"line\">                <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">if</span></span>&#125;&#125;</span></div><div class=\"line\">            &lt;/li&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>原先的內容包括name, type, quickMoves, mainMoves等等屬性，但是在 <code>{ { #each type} }</code> 與 <code>{ { /each} }</code> 之間<strong>進入了另一個”區塊”</strong>，這個區塊的內容只包括了type的陣列，而 <code>{ {.} }</code> 則代表的是當前遍歷到的值</p>\n<p>我們再來看看下面比較複雜的結構，一樣這個each區塊將內容改變了，變成只包含了quickMoves陣列，比較特別的是if，<strong>在if區塊中的內容與他的父層是一樣的，但是與他的父層仍舊相隔了一層</strong>，所以在這個例子中你可以看到，第一個 <code>../</code> 先回到父層的內容，也就是只包含了quickMoves陣列的內容，第二個 <code>../</code> 再跑到上一層，也就是回到了最原始、最完整的內容，這時就可以取用moveType的值了</p>\n<p>千萬要記得的是: <strong><code>../</code> 代表的父級是就模板結構而言，不是內容本身的結構</strong></p>\n<h2 id=\"後端模板\"><a href=\"#後端模板\" class=\"headerlink\" title=\"後端模板\"></a>後端模板</h2><h3 id=\"View-amp-Layout\"><a href=\"#View-amp-Layout\" class=\"headerlink\" title=\"View &amp; Layout\"></a>View &amp; Layout</h3><p>在express專案中有一個資料夾是views，當中存放著一張張的網頁(View)，不過大部分的網頁都有相似的結構，因此我們可以創造出一個Layout，Layout是一個特殊的View，是模板的模板，在hbs中，hbs會尋找名為layout.hbs的這個模板，將這個模板作為Layout</p>\n<p>以下是一個例子: </p>\n<p>layout.hbs</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;<span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span>&lt;/title&gt;</div><div class=\"line\">        &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        <span class=\"template-variable\">&#123;&#123;&#123;body&#125;&#125;</span>&#125;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>welcome.hbs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這時你用下列程式碼渲染頁面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>處理順序是這樣的:</p>\n<ol>\n<li>傳入的內容和welcome.hbs做結合</li>\n<li>之後將welcome.hbs的內容放入layout.hbs的body中，同時傳入的內容一樣會與layout.hbs做結合</li>\n</ol>\n<p>最後顯示的html如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Pokemon Go is Fun !<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet'</span> <span class=\"attr\">href</span>=<span class=\"string\">'/stylesheets/style.css'</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你有多個Layout，那麼你只要在傳入的內容裡指定要使用哪一個Layout就可以了，像是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>, <span class=\"attr\">layout</span>: <span class=\"string\">'layout2.hbs'</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你不需要套入Layout，那麼就將layout的值設為null，像是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>, <span class=\"attr\">layout</span>: <span class=\"literal\">null</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你想改變預設的Layout，那麼就更改view option的設定值，加入以下程式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.set(<span class=\"string\">'view options'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">layout</span>: layout2.hbs;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p>在不同的網頁上我們經常重複使用了許多相同的元件，如果將這些元件寫在每個檔案裡，不僅網頁內容變得更龐大、更難以維護，在元件的修改上也會變得十分麻煩，所以比較好的做法就是將它抽離，獨自形成一個模板，我們特別稱這種模板為”Partial”</p>\n<p>我們先建立一個partial檔案(檔案位子在views/partials/pokemonInfo.hbs):</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"popularPokemon\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> popularPokemon&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pokemon\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/</span></span><span class=\"template-variable\">&#123;&#123;imagePath&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>名字: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>屬性: <span class=\"template-variable\">&#123;&#123;type&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>外部連結: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;link&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來我們要註冊partial，目的是為了在view裡面帶入這個partial，一種方式是註冊單一個partial:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerPartial(<span class=\"string\">'pokemonInfo'</span>, fs.readFileSync(__dirname + <span class=\"string\">'/views/partials/pokemonInfo.hbs'</span>, <span class=\"string\">'utf-8'</span>));</div></pre></td></tr></table></figure>\n<p>第二種方式是一次註冊整個資料夾內所有的內容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerPartials(__dirname + <span class=\"string\">'/view/partials'</span>);</div></pre></td></tr></table></figure>\n<p>之後設定要傳入的內容，為了簡潔一點，我們用一個函式包裝:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPokemonInfo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">popularPokemon</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Tyranitar.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'班基拉斯'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Rock、Dark'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/248-tyranitar'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Dragonite.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'快龍'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Dragon、Fly'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/149-dragonite'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Golem.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'隆隆岩'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Rock、Ground'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/76-golem'</span>\t</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以用如下的方式傳輸數據:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.locals = getPokemonInfo();</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然後在welcome.hbs裡添加這個partial:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\"><span class=\"template-variable\">&#123;&#123;&gt; pokemonInfo&#125;&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>就大功告成了!<br>當然這種做法還稱不上是完美，原因是你每次需要這份partial時，都要傳一次pokemonInfo內容，我們換種寫法，讓所有的view都能使用這份pokemonInfo內容，用的方式是加入中介軟體:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    res.locals = getPokemonInfo();</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣就能為資料注入res.locals物件，而不用在每個路由處理程式裡都寫一次</p>\n<h3 id=\"Helper\"><a href=\"#Helper\" class=\"headerlink\" title=\"Helper\"></a>Helper</h3><p>Handlebars是一個弱邏輯的模板引擎，舉個例子，你在前面看到的 <code>{ { #if} }</code> ，後面是不能接判斷式的，像 <code>{ { #if type!=null} }</code> 和 <code>{ { #if type&amp;&amp;name} }</code> 都是不合法的，但如果你想要處理更複雜的邏輯該怎麼辦呢?這時你就需要helper的協助了。</p>\n<p>你可以想像helper是一個自訂義標籤，它可以在handlebars模板的任何地方，helper和partial一樣需要被事先的註冊，底下是一個簡單的helper:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerHelper(<span class=\"string\">'list'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, option</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> out = <span class=\"string\">\"&lt;/ul&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;context.length; i++) &#123;</div><div class=\"line\">        out = out + <span class=\"string\">\"&lt;li&gt;\"</span> + options.fn(context[i]) + <span class=\"string\">\"&lt;/li&gt;\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> out + <span class=\"string\">\"&lt;/ul&gt;\"</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在解釋以上語法之前，我們先來看看傳入的內容(context)是什麼:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    people: [</div><div class=\"line\">        &#123;firstName: 'Justin', lastName: 'Chien'&#125;,</div><div class=\"line\">        &#123;firstName: 'Jack', lastName: 'Lee'&#125;,</div><div class=\"line\">        &#123;firstName: 'Mandy', lastNmae: 'Wu'&#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一個參數 <code>list</code> 是這個自定義標籤的名字，第二個參數則傳入一個function，代表你想要做到的事，function的第一個參數傳入一段context，如果沒有設則是同於當前的context，第二個參數 <code>option</code> 有一個方法 <code>fn</code> ， 假設在你的list區塊中還有其他的模板，那麼 <code>option.fn()</code> 代表的就會是編譯過的那些模板，當你傳入一段context時，它就會回傳出相應的HTML，底下是一個實際應用的例子:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;&#123;#<span class=\"name\">list</span> people&#125;&#125;</span><span class=\"xml\"></span><span class=\"template-variable\">&#123;&#123;firstName&#125;&#125;</span><span class=\"xml\"> </span><span class=\"template-variable\">&#123;&#123;lastName&#125;&#125;</span><span class=\"xml\"></span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\">list</span>&#125;&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>嘗試理解一下，people代表現在的context已經被鎖定在people陣列中，而此時的option.fn()代表的是被編譯過的 <code>{ {firstName} } { {lastName} }</code> ，譬如將{firstName: ‘Justin’, lastName: ‘Chien’}傳入option.fn()，它就會回傳給你 <code>Chien Justin</code> ，所以最終的結果會是這樣:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Justin Chien<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Jack Lee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Mandy Wu<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>老實說前面看到的 <code>{ { #if} }</code> 、 <code>{ { #each} }</code> 都是helper，只是他們是內建的helper，其他內建的helper還有 <code>{ { #with} }</code> 、 <code>{ { #unless} }</code> 等等，可以在<a href=\"https://segmentfault.com/a/1190000000342636\" target=\"_blank\" rel=\"external\">此連結</a>中查看</p>\n<h2 id=\"前端模板\"><a href=\"#前端模板\" class=\"headerlink\" title=\"前端模板\"></a>前端模板</h2><p>在前端中一樣可以引入Handlebars，步驟是這樣的:  </p>\n<ol>\n<li><p>將Handlebars下載後放入靜態內容或直接使用CDN</p>\n</li>\n<li><p>寫一個模板</p>\n</li>\n<li><p>編譯模板</p>\n</li>\n<li><p>將內容(context)傳入編譯後的模板</p>\n</li>\n</ol>\n<p>為了方便理解，底下是一個簡單的例子，首先引入Handlebars:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來寫一個模板:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-handlebars-template\"</span>&gt;</span><span class=\"undefined\"></span></span></div><div class=\"line\">    Hi! My name is <span class=\"template-variable\">&#123;&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\">&#125;.</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然後編譯它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compiledTemplate = Handlebars.compile($(<span class=\"string\">'#template'</span>).html());</div></pre></td></tr></table></figure>\n<p>最後將內容傳入編譯後的模板:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">var data = &#123;name: 'Kevin'&#125;;</div><div class=\"line\">$('#result').html(compiledTemplate(data));</div></pre></td></tr></table></figure>\n<p>當然你一樣可以在前端模板中使用partial、helper等特性，就像Handlebars用於後端時的那樣</p>\n<p>這篇文章主要講述一些Handlebars的基礎功能，在之後的文章中我們再來探討更多Handlebars可以做到的事</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Handlebars是一個可用於clint端或server端的模板引擎，Handlebars由javascript寫成。</p>\n<h2 id=\"安裝方法\"><a href=\"#安裝方法\" class=\"headerlink\" title=\"安裝方法\"></a>安裝方法</h2><p>在創建express時用以下命令</p>\n<pre><code>express (project name) --hbs\n</code></pre><p>或在不使用express-generator的情況下，使用以下命令自行加入</p>\n<pre><code>npm install hbs --save\n</code></pre><p>若使用第二種方法，還必須在app.js中將view engine修改為Handlebars</p>\n<pre><code>app.set(&apos;view engine&apos;, &apos;hbs&apos;);\n</code></pre><h2 id=\"Handlebars基礎\"><a href=\"#Handlebars基礎\" class=\"headerlink\" title=\"Handlebars基礎\"></a>Handlebars基礎</h2><h3 id=\"大括號的使用\"><a href=\"#大括號的使用\" class=\"headerlink\" title=\"大括號的使用\"></a>大括號的使用</h3><p>在Handlebars模板中用 <code>{ { } }</code> 框住的內容是可以被替換的部分，像是</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;Hello, <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>這樣的一個模板，如果傳入的內容是{name: ‘Justin’}的話，則最終輸出的HTML將會是</p>\n<pre><code>&lt;p&gt;Hello, Justin&lt;/p&gt;\n</code></pre><p>特別的是如果你想傳如一段HTML，像是{name: ‘&lt;b&gt;Justin&lt;/b&gt;’}<br>使用之前的模板，輸出結果會是</p>\n<pre><code>&lt;p&gt;Hello, &amp;lt;b&amp;gt;Justin&amp;lt;/b&amp;gt;&lt;/p&gt;\n</code></pre><p>要解決這個問題，必須在模板中使用 <code>{ { { } } }</code> ，它會關閉HTML的轉義功能:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;Hello, <span class=\"template-variable\">&#123;&#123;&#123;name&#125;&#125;</span>&#125;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"區塊\"><a href=\"#區塊\" class=\"headerlink\" title=\"區塊\"></a>區塊</h3><p>為了解釋區塊，我們先來假設一段內容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    name: 'Golem',</div><div class=\"line\">    type: ['Rock', 'Ground'],</div><div class=\"line\">    quickMoves: [</div><div class=\"line\">                &#123;name: Rock Throw, DPS: 16&#125;, </div><div class=\"line\">                &#123;name: Mud Slap, DPS: 12.9&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    mainMoves: [</div><div class=\"line\">                &#123;name: Stone Edge, DPS: 42.9&#125;, </div><div class=\"line\">                &#123;name: Earthquake, DPS: 35.1&#125;, </div><div class=\"line\">                &#123;name: Rock Blast, DPS: 23.1&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    moveType: 'Rock or Ground' </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這是一段有關Pokemon Go資料的內容，現在我們來檢視一個可傳入以上內容的模板</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;p&gt;Name: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> type&#125;&#125;</span></div><div class=\"line\">            <span class=\"template-variable\">&#123;&#123;.&#125;&#125;</span> </div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">    &lt;/p&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> quickMoves&#125;&#125;</span></div><div class=\"line\">            &lt;li&gt;</div><div class=\"line\">                Move Name: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>, DPS: <span class=\"template-variable\">&#123;&#123;DPS&#125;&#125;</span></div><div class=\"line\">                <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">if</span></span> ../type&#125;&#125;</span></div><div class=\"line\">                    (<span class=\"template-variable\">&#123;&#123;../../moveType&#125;&#125;</span>)</div><div class=\"line\">                <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">if</span></span>&#125;&#125;</span></div><div class=\"line\">            &lt;/li&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>原先的內容包括name, type, quickMoves, mainMoves等等屬性，但是在 <code>{ { #each type} }</code> 與 <code>{ { /each} }</code> 之間<strong>進入了另一個”區塊”</strong>，這個區塊的內容只包括了type的陣列，而 <code>{ {.} }</code> 則代表的是當前遍歷到的值</p>\n<p>我們再來看看下面比較複雜的結構，一樣這個each區塊將內容改變了，變成只包含了quickMoves陣列，比較特別的是if，<strong>在if區塊中的內容與他的父層是一樣的，但是與他的父層仍舊相隔了一層</strong>，所以在這個例子中你可以看到，第一個 <code>../</code> 先回到父層的內容，也就是只包含了quickMoves陣列的內容，第二個 <code>../</code> 再跑到上一層，也就是回到了最原始、最完整的內容，這時就可以取用moveType的值了</p>\n<p>千萬要記得的是: <strong><code>../</code> 代表的父級是就模板結構而言，不是內容本身的結構</strong></p>\n<h2 id=\"後端模板\"><a href=\"#後端模板\" class=\"headerlink\" title=\"後端模板\"></a>後端模板</h2><h3 id=\"View-amp-Layout\"><a href=\"#View-amp-Layout\" class=\"headerlink\" title=\"View &amp; Layout\"></a>View &amp; Layout</h3><p>在express專案中有一個資料夾是views，當中存放著一張張的網頁(View)，不過大部分的網頁都有相似的結構，因此我們可以創造出一個Layout，Layout是一個特殊的View，是模板的模板，在hbs中，hbs會尋找名為layout.hbs的這個模板，將這個模板作為Layout</p>\n<p>以下是一個例子: </p>\n<p>layout.hbs</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;<span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span>&lt;/title&gt;</div><div class=\"line\">        &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        <span class=\"template-variable\">&#123;&#123;&#123;body&#125;&#125;</span>&#125;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>welcome.hbs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這時你用下列程式碼渲染頁面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>處理順序是這樣的:</p>\n<ol>\n<li>傳入的內容和welcome.hbs做結合</li>\n<li>之後將welcome.hbs的內容放入layout.hbs的body中，同時傳入的內容一樣會與layout.hbs做結合</li>\n</ol>\n<p>最後顯示的html如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Pokemon Go is Fun !<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet'</span> <span class=\"attr\">href</span>=<span class=\"string\">'/stylesheets/style.css'</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你有多個Layout，那麼你只要在傳入的內容裡指定要使用哪一個Layout就可以了，像是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>, <span class=\"attr\">layout</span>: <span class=\"string\">'layout2.hbs'</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你不需要套入Layout，那麼就將layout的值設為null，像是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>, <span class=\"attr\">layout</span>: <span class=\"literal\">null</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你想改變預設的Layout，那麼就更改view option的設定值，加入以下程式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.set(<span class=\"string\">'view options'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">layout</span>: layout2.hbs;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p>在不同的網頁上我們經常重複使用了許多相同的元件，如果將這些元件寫在每個檔案裡，不僅網頁內容變得更龐大、更難以維護，在元件的修改上也會變得十分麻煩，所以比較好的做法就是將它抽離，獨自形成一個模板，我們特別稱這種模板為”Partial”</p>\n<p>我們先建立一個partial檔案(檔案位子在views/partials/pokemonInfo.hbs):</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"popularPokemon\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> popularPokemon&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pokemon\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/</span></span><span class=\"template-variable\">&#123;&#123;imagePath&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>名字: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>屬性: <span class=\"template-variable\">&#123;&#123;type&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>外部連結: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;link&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來我們要註冊partial，目的是為了在view裡面帶入這個partial，一種方式是註冊單一個partial:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerPartial(<span class=\"string\">'pokemonInfo'</span>, fs.readFileSync(__dirname + <span class=\"string\">'/views/partials/pokemonInfo.hbs'</span>, <span class=\"string\">'utf-8'</span>));</div></pre></td></tr></table></figure>\n<p>第二種方式是一次註冊整個資料夾內所有的內容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerPartials(__dirname + <span class=\"string\">'/view/partials'</span>);</div></pre></td></tr></table></figure>\n<p>之後設定要傳入的內容，為了簡潔一點，我們用一個函式包裝:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPokemonInfo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">popularPokemon</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Tyranitar.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'班基拉斯'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Rock、Dark'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/248-tyranitar'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Dragonite.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'快龍'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Dragon、Fly'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/149-dragonite'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Golem.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'隆隆岩'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Rock、Ground'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/76-golem'</span>\t</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以用如下的方式傳輸數據:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.locals = getPokemonInfo();</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然後在welcome.hbs裡添加這個partial:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\"><span class=\"template-variable\">&#123;&#123;&gt; pokemonInfo&#125;&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>就大功告成了!<br>當然這種做法還稱不上是完美，原因是你每次需要這份partial時，都要傳一次pokemonInfo內容，我們換種寫法，讓所有的view都能使用這份pokemonInfo內容，用的方式是加入中介軟體:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    res.locals = getPokemonInfo();</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣就能為資料注入res.locals物件，而不用在每個路由處理程式裡都寫一次</p>\n<h3 id=\"Helper\"><a href=\"#Helper\" class=\"headerlink\" title=\"Helper\"></a>Helper</h3><p>Handlebars是一個弱邏輯的模板引擎，舉個例子，你在前面看到的 <code>{ { #if} }</code> ，後面是不能接判斷式的，像 <code>{ { #if type!=null} }</code> 和 <code>{ { #if type&amp;&amp;name} }</code> 都是不合法的，但如果你想要處理更複雜的邏輯該怎麼辦呢?這時你就需要helper的協助了。</p>\n<p>你可以想像helper是一個自訂義標籤，它可以在handlebars模板的任何地方，helper和partial一樣需要被事先的註冊，底下是一個簡單的helper:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerHelper(<span class=\"string\">'list'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, option</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> out = <span class=\"string\">\"&lt;/ul&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;context.length; i++) &#123;</div><div class=\"line\">        out = out + <span class=\"string\">\"&lt;li&gt;\"</span> + options.fn(context[i]) + <span class=\"string\">\"&lt;/li&gt;\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> out + <span class=\"string\">\"&lt;/ul&gt;\"</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在解釋以上語法之前，我們先來看看傳入的內容(context)是什麼:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    people: [</div><div class=\"line\">        &#123;firstName: 'Justin', lastName: 'Chien'&#125;,</div><div class=\"line\">        &#123;firstName: 'Jack', lastName: 'Lee'&#125;,</div><div class=\"line\">        &#123;firstName: 'Mandy', lastNmae: 'Wu'&#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一個參數 <code>list</code> 是這個自定義標籤的名字，第二個參數則傳入一個function，代表你想要做到的事，function的第一個參數傳入一段context，如果沒有設則是同於當前的context，第二個參數 <code>option</code> 有一個方法 <code>fn</code> ， 假設在你的list區塊中還有其他的模板，那麼 <code>option.fn()</code> 代表的就會是編譯過的那些模板，當你傳入一段context時，它就會回傳出相應的HTML，底下是一個實際應用的例子:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;&#123;#<span class=\"name\">list</span> people&#125;&#125;</span><span class=\"xml\"></span><span class=\"template-variable\">&#123;&#123;firstName&#125;&#125;</span><span class=\"xml\"> </span><span class=\"template-variable\">&#123;&#123;lastName&#125;&#125;</span><span class=\"xml\"></span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\">list</span>&#125;&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>嘗試理解一下，people代表現在的context已經被鎖定在people陣列中，而此時的option.fn()代表的是被編譯過的 <code>{ {firstName} } { {lastName} }</code> ，譬如將{firstName: ‘Justin’, lastName: ‘Chien’}傳入option.fn()，它就會回傳給你 <code>Chien Justin</code> ，所以最終的結果會是這樣:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Justin Chien<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Jack Lee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Mandy Wu<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>老實說前面看到的 <code>{ { #if} }</code> 、 <code>{ { #each} }</code> 都是helper，只是他們是內建的helper，其他內建的helper還有 <code>{ { #with} }</code> 、 <code>{ { #unless} }</code> 等等，可以在<a href=\"https://segmentfault.com/a/1190000000342636\" target=\"_blank\" rel=\"external\">此連結</a>中查看</p>\n<h2 id=\"前端模板\"><a href=\"#前端模板\" class=\"headerlink\" title=\"前端模板\"></a>前端模板</h2><p>在前端中一樣可以引入Handlebars，步驟是這樣的:  </p>\n<ol>\n<li><p>將Handlebars下載後放入靜態內容或直接使用CDN</p>\n</li>\n<li><p>寫一個模板</p>\n</li>\n<li><p>編譯模板</p>\n</li>\n<li><p>將內容(context)傳入編譯後的模板</p>\n</li>\n</ol>\n<p>為了方便理解，底下是一個簡單的例子，首先引入Handlebars:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來寫一個模板:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-handlebars-template\"</span>&gt;</span><span class=\"undefined\"></span></span></div><div class=\"line\">    Hi! My name is <span class=\"template-variable\">&#123;&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\">&#125;.</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然後編譯它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compiledTemplate = Handlebars.compile($(<span class=\"string\">'#template'</span>).html());</div></pre></td></tr></table></figure>\n<p>最後將內容傳入編譯後的模板:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">var data = &#123;name: 'Kevin'&#125;;</div><div class=\"line\">$('#result').html(compiledTemplate(data));</div></pre></td></tr></table></figure>\n<p>當然你一樣可以在前端模板中使用partial、helper等特性，就像Handlebars用於後端時的那樣</p>\n<p>這篇文章主要講述一些Handlebars的基礎功能，在之後的文章中我們再來探討更多Handlebars可以做到的事</p>\n"},{"title":"cookie-parser中間件深入理解","author":"Justin","cover":"/images/joe-green-475962.jpg","date":"2017-12-18T04:47:07.000Z","_content":"\n之前在理解cookie-parser運作原理的時候，看了網路上許多文章，但心中仍然有一些疑問未解，於是這次便鼓起勇氣直接看[原始碼](https://github.com/expressjs/cookie-parser/blob/master/index.js)，看完後發現真的理解不少，而且充滿成就感^_^\n\ncookie-parser是express在做cookie處理不可或缺的一個中間件，他的原始碼並不多，主檔只有180行程式，底下會深入的來看一下裡頭的內容，希望能在二十分鐘內讓大家懂cookie-parser的運作原理\n\n## 終極目標\n\ncookie-parser的終極目標只有一個，那就是\n> 將cookie轉換為物件型態，並將一般的cookie放到 `req.cookies` 裡，將有加密的cookie放到 `req.signedCookies` 裡\n\n## 先來認識cookie的種類\n\n1.  一般cookie\n    ```javascript\n    // 設置\n    res.cookie('name', 'John Lee')\n    // 在客戶端瀏覽器顯示，字串只會經過URL Encode\n    name=John%20Lee\n    ```\n\n2.  存物件的cookie\n    ```javascript\n    // 設置\n    res.cookie('name', {firstName: 'John'})\n    // 在客戶端瀏覽器顯示，字串不只會經過URL Encode，開頭還會補上'j:'，用來區別這串東西其實是物件，不是簡單的string，cookie-parser會針對有這種前綴的cookie進行特別的剖析\n    name=j%3A%7BfirstName%3A%27John%27%7D\n    ```\n\n3.  signedCookie\n    \n    signedCookie指的是有經過密文加密過的cookie\n    ```javascript\n    // 設定密文\n    app.use(reruire('cookie-parser')('secret'))\n    // 設置\n    res.cookie('name', 'John Lee', {signed: true})\n    // 在客戶端瀏覽器顯示，字串不只會經過URL Encode，開頭還會補上's:'，用來區別這串東西其實是signedCookie，後面的x代表內容與密文加密過後的字串\n    name=s%3AJohn%20Lee.xxxxxxxxxxxxxxxxxxxxxxxx\n    ```\n\n## 引入的library\n\n在cookie-parser的開頭處，你會看到\n```javascript\nvar cookie = require('cookie')\nvar signature = require('cookie-signature')\n```\n\n其中[cookie](https://www.npmjs.com/package/cookie)模組裡的parse方法能讓我們能把cookie字串轉成物件，就像底下的範例\n```javascript\nvar cookies = cookie.parse('name=John');\n// cookies = {name: 'John'};\n```\n\n[cookie-signature](https://www.npmjs.com/package/cookie-signature)主要是對signedCookies做unsign的動作，如果內容被更改，就會回傳false\n\n## 主函式\n\n```javascript\nmodule.exports = cookieParser\n```\n\n主函式是cookieParser，cookieParser的內容如下:\n\n```javascript\n// 傳入參數密文(secret)與設定項(options)\nfunction cookieParser (secret, options) {\n  \n  // 返回的是一個function\n  return function cookieParser (req, res, next) {\n\n    // 如果已經有req.cookies就跳過，不然會把舊值覆蓋掉\n    if (req.cookies) {\n      return next()\n    }\n\n    // 取得一長串的cookie，內容像是: name1=John%20Lee;name2=s%3AJohn%20Lee.xxxxxxxxxxxxxxxxxxxxxxxx\n    var cookies = req.headers.cookie\n\n    // 如果secret=undefined，secrets=[] ; 如果secret是一個多組密文組成的陣列，secrets = secret\n    var secrets = !secret || Array.isArray(secret)\n      ? (secret || [])\n      : [secret]\n\n    // 訂定第一個密文(如果有很多的話)做加密時的密文，在res.cookie('', '', { signed: true })會用到這個密文做加密\n    req.secret = secrets[0]\n    // 創立兩個空物件來存放解析後的cookie物件\n    req.cookies = Object.create(null)\n    req.signedCookies = Object.create(null)\n\n    // 沒有cookies當然就不用處理啦~\n    if (!cookies) {\n      return next()\n    }\n\n    // 調用上面說過的cookie.parse()，將cookie從字串，轉為物件\n    req.cookies = cookie.parse(cookies, options)\n\n    // 先處裡signedCookie(其實就是驗證內容有無被更改)，再處理內容是物件的cookie\n    if (secrets.length !== 0) {\n      // signedCookies()方法在主函式下面\n      req.signedCookies = signedCookies(req.cookies, secrets)\n      // JSONCookies()方法在主函式下面\n      req.signedCookies = JSONCookies(req.signedCookies)\n    }\n\n    // 處理內容是物件的cookie\n    req.cookies = JSONCookies(req.cookies)\n\n    next()\n  }\n}\n```\n\n## 其他函式\n\n在主函式裡調用的其他函式，像signedCookies()、JSONCookies()其實都被定義在主函式的下面，這邊就不一個個來細看，大致說明一下每個函式的用途就好，有興趣的可以去看原始碼，寫得很簡單易懂\n\n這邊定義四種函式 `signedCookies()`、`signedCookie()`、`JSONCookies()`、`JSONCookie()`\n\n可以看到其實只有兩類:\n\n1.  處理signedCookie的\n2.  處理JSONCookie的，也就是內容為物件的cookie\n\n有`加s`的函式多次調用`沒s`的函式\n\n在signedCookie()中做的是針對字串開頭為`s:`的cookie，調用cookie-signature的unsign()方法，將密文與內容用特殊的演算法加密得出一段xxxxxx，之後再與原先的xxxxxx做比對，如果相同就表示沒改過，回傳true; 如果不同就表示被改過，回傳false，並把這個錯的signedCookie刪掉\n\n在JSONCookie()中做的是針對字串開頭為`j:`的cookie，將cookie的內容由原先的字串轉回至物件型態，讓你能夠用物件的方法來操作cookie內容","source":"_posts/cookie-parser中間件深入理解.md","raw":"---\ntitle: cookie-parser中間件深入理解\nauthor: Justin\ncover: /images/joe-green-475962.jpg\ncategories: \n- NodeJS\ndate: 2017-12-18 12:47:07\n---\n\n之前在理解cookie-parser運作原理的時候，看了網路上許多文章，但心中仍然有一些疑問未解，於是這次便鼓起勇氣直接看[原始碼](https://github.com/expressjs/cookie-parser/blob/master/index.js)，看完後發現真的理解不少，而且充滿成就感^_^\n\ncookie-parser是express在做cookie處理不可或缺的一個中間件，他的原始碼並不多，主檔只有180行程式，底下會深入的來看一下裡頭的內容，希望能在二十分鐘內讓大家懂cookie-parser的運作原理\n\n## 終極目標\n\ncookie-parser的終極目標只有一個，那就是\n> 將cookie轉換為物件型態，並將一般的cookie放到 `req.cookies` 裡，將有加密的cookie放到 `req.signedCookies` 裡\n\n## 先來認識cookie的種類\n\n1.  一般cookie\n    ```javascript\n    // 設置\n    res.cookie('name', 'John Lee')\n    // 在客戶端瀏覽器顯示，字串只會經過URL Encode\n    name=John%20Lee\n    ```\n\n2.  存物件的cookie\n    ```javascript\n    // 設置\n    res.cookie('name', {firstName: 'John'})\n    // 在客戶端瀏覽器顯示，字串不只會經過URL Encode，開頭還會補上'j:'，用來區別這串東西其實是物件，不是簡單的string，cookie-parser會針對有這種前綴的cookie進行特別的剖析\n    name=j%3A%7BfirstName%3A%27John%27%7D\n    ```\n\n3.  signedCookie\n    \n    signedCookie指的是有經過密文加密過的cookie\n    ```javascript\n    // 設定密文\n    app.use(reruire('cookie-parser')('secret'))\n    // 設置\n    res.cookie('name', 'John Lee', {signed: true})\n    // 在客戶端瀏覽器顯示，字串不只會經過URL Encode，開頭還會補上's:'，用來區別這串東西其實是signedCookie，後面的x代表內容與密文加密過後的字串\n    name=s%3AJohn%20Lee.xxxxxxxxxxxxxxxxxxxxxxxx\n    ```\n\n## 引入的library\n\n在cookie-parser的開頭處，你會看到\n```javascript\nvar cookie = require('cookie')\nvar signature = require('cookie-signature')\n```\n\n其中[cookie](https://www.npmjs.com/package/cookie)模組裡的parse方法能讓我們能把cookie字串轉成物件，就像底下的範例\n```javascript\nvar cookies = cookie.parse('name=John');\n// cookies = {name: 'John'};\n```\n\n[cookie-signature](https://www.npmjs.com/package/cookie-signature)主要是對signedCookies做unsign的動作，如果內容被更改，就會回傳false\n\n## 主函式\n\n```javascript\nmodule.exports = cookieParser\n```\n\n主函式是cookieParser，cookieParser的內容如下:\n\n```javascript\n// 傳入參數密文(secret)與設定項(options)\nfunction cookieParser (secret, options) {\n  \n  // 返回的是一個function\n  return function cookieParser (req, res, next) {\n\n    // 如果已經有req.cookies就跳過，不然會把舊值覆蓋掉\n    if (req.cookies) {\n      return next()\n    }\n\n    // 取得一長串的cookie，內容像是: name1=John%20Lee;name2=s%3AJohn%20Lee.xxxxxxxxxxxxxxxxxxxxxxxx\n    var cookies = req.headers.cookie\n\n    // 如果secret=undefined，secrets=[] ; 如果secret是一個多組密文組成的陣列，secrets = secret\n    var secrets = !secret || Array.isArray(secret)\n      ? (secret || [])\n      : [secret]\n\n    // 訂定第一個密文(如果有很多的話)做加密時的密文，在res.cookie('', '', { signed: true })會用到這個密文做加密\n    req.secret = secrets[0]\n    // 創立兩個空物件來存放解析後的cookie物件\n    req.cookies = Object.create(null)\n    req.signedCookies = Object.create(null)\n\n    // 沒有cookies當然就不用處理啦~\n    if (!cookies) {\n      return next()\n    }\n\n    // 調用上面說過的cookie.parse()，將cookie從字串，轉為物件\n    req.cookies = cookie.parse(cookies, options)\n\n    // 先處裡signedCookie(其實就是驗證內容有無被更改)，再處理內容是物件的cookie\n    if (secrets.length !== 0) {\n      // signedCookies()方法在主函式下面\n      req.signedCookies = signedCookies(req.cookies, secrets)\n      // JSONCookies()方法在主函式下面\n      req.signedCookies = JSONCookies(req.signedCookies)\n    }\n\n    // 處理內容是物件的cookie\n    req.cookies = JSONCookies(req.cookies)\n\n    next()\n  }\n}\n```\n\n## 其他函式\n\n在主函式裡調用的其他函式，像signedCookies()、JSONCookies()其實都被定義在主函式的下面，這邊就不一個個來細看，大致說明一下每個函式的用途就好，有興趣的可以去看原始碼，寫得很簡單易懂\n\n這邊定義四種函式 `signedCookies()`、`signedCookie()`、`JSONCookies()`、`JSONCookie()`\n\n可以看到其實只有兩類:\n\n1.  處理signedCookie的\n2.  處理JSONCookie的，也就是內容為物件的cookie\n\n有`加s`的函式多次調用`沒s`的函式\n\n在signedCookie()中做的是針對字串開頭為`s:`的cookie，調用cookie-signature的unsign()方法，將密文與內容用特殊的演算法加密得出一段xxxxxx，之後再與原先的xxxxxx做比對，如果相同就表示沒改過，回傳true; 如果不同就表示被改過，回傳false，並把這個錯的signedCookie刪掉\n\n在JSONCookie()中做的是針對字串開頭為`j:`的cookie，將cookie的內容由原先的字串轉回至物件型態，讓你能夠用物件的方法來操作cookie內容","slug":"cookie-parser中間件深入理解","published":1,"updated":"2018-03-02T15:10:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjea5202p0006ucugin3pdkfm","content":"<p>之前在理解cookie-parser運作原理的時候，看了網路上許多文章，但心中仍然有一些疑問未解，於是這次便鼓起勇氣直接看<a href=\"https://github.com/expressjs/cookie-parser/blob/master/index.js\" target=\"_blank\" rel=\"external\">原始碼</a>，看完後發現真的理解不少，而且充滿成就感^_^</p>\n<p>cookie-parser是express在做cookie處理不可或缺的一個中間件，他的原始碼並不多，主檔只有180行程式，底下會深入的來看一下裡頭的內容，希望能在二十分鐘內讓大家懂cookie-parser的運作原理</p>\n<h2 id=\"終極目標\"><a href=\"#終極目標\" class=\"headerlink\" title=\"終極目標\"></a>終極目標</h2><p>cookie-parser的終極目標只有一個，那就是</p>\n<blockquote>\n<p>將cookie轉換為物件型態，並將一般的cookie放到 <code>req.cookies</code> 裡，將有加密的cookie放到 <code>req.signedCookies</code> 裡</p>\n</blockquote>\n<h2 id=\"先來認識cookie的種類\"><a href=\"#先來認識cookie的種類\" class=\"headerlink\" title=\"先來認識cookie的種類\"></a>先來認識cookie的種類</h2><ol>\n<li><p>一般cookie</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 設置</span></div><div class=\"line\">res.cookie(<span class=\"string\">'name'</span>, <span class=\"string\">'John Lee'</span>)</div><div class=\"line\"><span class=\"comment\">// 在客戶端瀏覽器顯示，字串只會經過URL Encode</span></div><div class=\"line\">name=John%<span class=\"number\">20</span>Lee</div></pre></td></tr></table></figure>\n</li>\n<li><p>存物件的cookie</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 設置</span></div><div class=\"line\">res.cookie(<span class=\"string\">'name'</span>, &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'John'</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// 在客戶端瀏覽器顯示，字串不只會經過URL Encode，開頭還會補上'j:'，用來區別這串東西其實是物件，不是簡單的string，cookie-parser會針對有這種前綴的cookie進行特別的剖析</span></div><div class=\"line\">name=j%<span class=\"number\">3</span>A%<span class=\"number\">7</span>BfirstName%<span class=\"number\">3</span>A%<span class=\"number\">27</span>John%<span class=\"number\">27</span>%<span class=\"number\">7</span>D</div></pre></td></tr></table></figure>\n</li>\n<li><p>signedCookie</p>\n<p>signedCookie指的是有經過密文加密過的cookie</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 設定密文</span></div><div class=\"line\">app.use(reruire(<span class=\"string\">'cookie-parser'</span>)(<span class=\"string\">'secret'</span>))</div><div class=\"line\"><span class=\"comment\">// 設置</span></div><div class=\"line\">res.cookie(<span class=\"string\">'name'</span>, <span class=\"string\">'John Lee'</span>, &#123;<span class=\"attr\">signed</span>: <span class=\"literal\">true</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// 在客戶端瀏覽器顯示，字串不只會經過URL Encode，開頭還會補上's:'，用來區別這串東西其實是signedCookie，後面的x代表內容與密文加密過後的字串</span></div><div class=\"line\">name=s%<span class=\"number\">3</span>AJohn%<span class=\"number\">20</span>Lee.xxxxxxxxxxxxxxxxxxxxxxxx</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"引入的library\"><a href=\"#引入的library\" class=\"headerlink\" title=\"引入的library\"></a>引入的library</h2><p>在cookie-parser的開頭處，你會看到<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cookie = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> signature = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-signature'</span>)</div></pre></td></tr></table></figure></p>\n<p>其中<a href=\"https://www.npmjs.com/package/cookie\" target=\"_blank\" rel=\"external\">cookie</a>模組裡的parse方法能讓我們能把cookie字串轉成物件，就像底下的範例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cookies = cookie.parse(<span class=\"string\">'name=John'</span>);</div><div class=\"line\"><span class=\"comment\">// cookies = &#123;name: 'John'&#125;;</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://www.npmjs.com/package/cookie-signature\" target=\"_blank\" rel=\"external\">cookie-signature</a>主要是對signedCookies做unsign的動作，如果內容被更改，就會回傳false</p>\n<h2 id=\"主函式\"><a href=\"#主函式\" class=\"headerlink\" title=\"主函式\"></a>主函式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = cookieParser</div></pre></td></tr></table></figure>\n<p>主函式是cookieParser，cookieParser的內容如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 傳入參數密文(secret)與設定項(options)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cookieParser</span> (<span class=\"params\">secret, options</span>) </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 返回的是一個function</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cookieParser</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果已經有req.cookies就跳過，不然會把舊值覆蓋掉</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (req.cookies) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> next()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 取得一長串的cookie，內容像是: name1=John%20Lee;name2=s%3AJohn%20Lee.xxxxxxxxxxxxxxxxxxxxxxxx</span></div><div class=\"line\">    <span class=\"keyword\">var</span> cookies = req.headers.cookie</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果secret=undefined，secrets=[] ; 如果secret是一個多組密文組成的陣列，secrets = secret</span></div><div class=\"line\">    <span class=\"keyword\">var</span> secrets = !secret || <span class=\"built_in\">Array</span>.isArray(secret)</div><div class=\"line\">      ? (secret || [])</div><div class=\"line\">      : [secret]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 訂定第一個密文(如果有很多的話)做加密時的密文，在res.cookie('', '', &#123; signed: true &#125;)會用到這個密文做加密</span></div><div class=\"line\">    req.secret = secrets[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"comment\">// 創立兩個空物件來存放解析後的cookie物件</span></div><div class=\"line\">    req.cookies = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    req.signedCookies = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 沒有cookies當然就不用處理啦~</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!cookies) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> next()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 調用上面說過的cookie.parse()，將cookie從字串，轉為物件</span></div><div class=\"line\">    req.cookies = cookie.parse(cookies, options)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 先處裡signedCookie(其實就是驗證內容有無被更改)，再處理內容是物件的cookie</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (secrets.length !== <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// signedCookies()方法在主函式下面</span></div><div class=\"line\">      req.signedCookies = signedCookies(req.cookies, secrets)</div><div class=\"line\">      <span class=\"comment\">// JSONCookies()方法在主函式下面</span></div><div class=\"line\">      req.signedCookies = JSONCookies(req.signedCookies)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 處理內容是物件的cookie</span></div><div class=\"line\">    req.cookies = JSONCookies(req.cookies)</div><div class=\"line\"></div><div class=\"line\">    next()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"其他函式\"><a href=\"#其他函式\" class=\"headerlink\" title=\"其他函式\"></a>其他函式</h2><p>在主函式裡調用的其他函式，像signedCookies()、JSONCookies()其實都被定義在主函式的下面，這邊就不一個個來細看，大致說明一下每個函式的用途就好，有興趣的可以去看原始碼，寫得很簡單易懂</p>\n<p>這邊定義四種函式 <code>signedCookies()</code>、<code>signedCookie()</code>、<code>JSONCookies()</code>、<code>JSONCookie()</code></p>\n<p>可以看到其實只有兩類:</p>\n<ol>\n<li>處理signedCookie的</li>\n<li>處理JSONCookie的，也就是內容為物件的cookie</li>\n</ol>\n<p>有<code>加s</code>的函式多次調用<code>沒s</code>的函式</p>\n<p>在signedCookie()中做的是針對字串開頭為<code>s:</code>的cookie，調用cookie-signature的unsign()方法，將密文與內容用特殊的演算法加密得出一段xxxxxx，之後再與原先的xxxxxx做比對，如果相同就表示沒改過，回傳true; 如果不同就表示被改過，回傳false，並把這個錯的signedCookie刪掉</p>\n<p>在JSONCookie()中做的是針對字串開頭為<code>j:</code>的cookie，將cookie的內容由原先的字串轉回至物件型態，讓你能夠用物件的方法來操作cookie內容</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前在理解cookie-parser運作原理的時候，看了網路上許多文章，但心中仍然有一些疑問未解，於是這次便鼓起勇氣直接看<a href=\"https://github.com/expressjs/cookie-parser/blob/master/index.js\" target=\"_blank\" rel=\"external\">原始碼</a>，看完後發現真的理解不少，而且充滿成就感^_^</p>\n<p>cookie-parser是express在做cookie處理不可或缺的一個中間件，他的原始碼並不多，主檔只有180行程式，底下會深入的來看一下裡頭的內容，希望能在二十分鐘內讓大家懂cookie-parser的運作原理</p>\n<h2 id=\"終極目標\"><a href=\"#終極目標\" class=\"headerlink\" title=\"終極目標\"></a>終極目標</h2><p>cookie-parser的終極目標只有一個，那就是</p>\n<blockquote>\n<p>將cookie轉換為物件型態，並將一般的cookie放到 <code>req.cookies</code> 裡，將有加密的cookie放到 <code>req.signedCookies</code> 裡</p>\n</blockquote>\n<h2 id=\"先來認識cookie的種類\"><a href=\"#先來認識cookie的種類\" class=\"headerlink\" title=\"先來認識cookie的種類\"></a>先來認識cookie的種類</h2><ol>\n<li><p>一般cookie</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 設置</span></div><div class=\"line\">res.cookie(<span class=\"string\">'name'</span>, <span class=\"string\">'John Lee'</span>)</div><div class=\"line\"><span class=\"comment\">// 在客戶端瀏覽器顯示，字串只會經過URL Encode</span></div><div class=\"line\">name=John%<span class=\"number\">20</span>Lee</div></pre></td></tr></table></figure>\n</li>\n<li><p>存物件的cookie</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 設置</span></div><div class=\"line\">res.cookie(<span class=\"string\">'name'</span>, &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'John'</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// 在客戶端瀏覽器顯示，字串不只會經過URL Encode，開頭還會補上'j:'，用來區別這串東西其實是物件，不是簡單的string，cookie-parser會針對有這種前綴的cookie進行特別的剖析</span></div><div class=\"line\">name=j%<span class=\"number\">3</span>A%<span class=\"number\">7</span>BfirstName%<span class=\"number\">3</span>A%<span class=\"number\">27</span>John%<span class=\"number\">27</span>%<span class=\"number\">7</span>D</div></pre></td></tr></table></figure>\n</li>\n<li><p>signedCookie</p>\n<p>signedCookie指的是有經過密文加密過的cookie</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 設定密文</span></div><div class=\"line\">app.use(reruire(<span class=\"string\">'cookie-parser'</span>)(<span class=\"string\">'secret'</span>))</div><div class=\"line\"><span class=\"comment\">// 設置</span></div><div class=\"line\">res.cookie(<span class=\"string\">'name'</span>, <span class=\"string\">'John Lee'</span>, &#123;<span class=\"attr\">signed</span>: <span class=\"literal\">true</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// 在客戶端瀏覽器顯示，字串不只會經過URL Encode，開頭還會補上's:'，用來區別這串東西其實是signedCookie，後面的x代表內容與密文加密過後的字串</span></div><div class=\"line\">name=s%<span class=\"number\">3</span>AJohn%<span class=\"number\">20</span>Lee.xxxxxxxxxxxxxxxxxxxxxxxx</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"引入的library\"><a href=\"#引入的library\" class=\"headerlink\" title=\"引入的library\"></a>引入的library</h2><p>在cookie-parser的開頭處，你會看到<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cookie = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> signature = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-signature'</span>)</div></pre></td></tr></table></figure></p>\n<p>其中<a href=\"https://www.npmjs.com/package/cookie\" target=\"_blank\" rel=\"external\">cookie</a>模組裡的parse方法能讓我們能把cookie字串轉成物件，就像底下的範例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cookies = cookie.parse(<span class=\"string\">'name=John'</span>);</div><div class=\"line\"><span class=\"comment\">// cookies = &#123;name: 'John'&#125;;</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://www.npmjs.com/package/cookie-signature\" target=\"_blank\" rel=\"external\">cookie-signature</a>主要是對signedCookies做unsign的動作，如果內容被更改，就會回傳false</p>\n<h2 id=\"主函式\"><a href=\"#主函式\" class=\"headerlink\" title=\"主函式\"></a>主函式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = cookieParser</div></pre></td></tr></table></figure>\n<p>主函式是cookieParser，cookieParser的內容如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 傳入參數密文(secret)與設定項(options)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cookieParser</span> (<span class=\"params\">secret, options</span>) </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 返回的是一個function</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cookieParser</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果已經有req.cookies就跳過，不然會把舊值覆蓋掉</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (req.cookies) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> next()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 取得一長串的cookie，內容像是: name1=John%20Lee;name2=s%3AJohn%20Lee.xxxxxxxxxxxxxxxxxxxxxxxx</span></div><div class=\"line\">    <span class=\"keyword\">var</span> cookies = req.headers.cookie</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果secret=undefined，secrets=[] ; 如果secret是一個多組密文組成的陣列，secrets = secret</span></div><div class=\"line\">    <span class=\"keyword\">var</span> secrets = !secret || <span class=\"built_in\">Array</span>.isArray(secret)</div><div class=\"line\">      ? (secret || [])</div><div class=\"line\">      : [secret]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 訂定第一個密文(如果有很多的話)做加密時的密文，在res.cookie('', '', &#123; signed: true &#125;)會用到這個密文做加密</span></div><div class=\"line\">    req.secret = secrets[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"comment\">// 創立兩個空物件來存放解析後的cookie物件</span></div><div class=\"line\">    req.cookies = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    req.signedCookies = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 沒有cookies當然就不用處理啦~</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!cookies) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> next()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 調用上面說過的cookie.parse()，將cookie從字串，轉為物件</span></div><div class=\"line\">    req.cookies = cookie.parse(cookies, options)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 先處裡signedCookie(其實就是驗證內容有無被更改)，再處理內容是物件的cookie</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (secrets.length !== <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// signedCookies()方法在主函式下面</span></div><div class=\"line\">      req.signedCookies = signedCookies(req.cookies, secrets)</div><div class=\"line\">      <span class=\"comment\">// JSONCookies()方法在主函式下面</span></div><div class=\"line\">      req.signedCookies = JSONCookies(req.signedCookies)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 處理內容是物件的cookie</span></div><div class=\"line\">    req.cookies = JSONCookies(req.cookies)</div><div class=\"line\"></div><div class=\"line\">    next()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"其他函式\"><a href=\"#其他函式\" class=\"headerlink\" title=\"其他函式\"></a>其他函式</h2><p>在主函式裡調用的其他函式，像signedCookies()、JSONCookies()其實都被定義在主函式的下面，這邊就不一個個來細看，大致說明一下每個函式的用途就好，有興趣的可以去看原始碼，寫得很簡單易懂</p>\n<p>這邊定義四種函式 <code>signedCookies()</code>、<code>signedCookie()</code>、<code>JSONCookies()</code>、<code>JSONCookie()</code></p>\n<p>可以看到其實只有兩類:</p>\n<ol>\n<li>處理signedCookie的</li>\n<li>處理JSONCookie的，也就是內容為物件的cookie</li>\n</ol>\n<p>有<code>加s</code>的函式多次調用<code>沒s</code>的函式</p>\n<p>在signedCookie()中做的是針對字串開頭為<code>s:</code>的cookie，調用cookie-signature的unsign()方法，將密文與內容用特殊的演算法加密得出一段xxxxxx，之後再與原先的xxxxxx做比對，如果相同就表示沒改過，回傳true; 如果不同就表示被改過，回傳false，並把這個錯的signedCookie刪掉</p>\n<p>在JSONCookie()中做的是針對字串開頭為<code>j:</code>的cookie，將cookie的內容由原先的字串轉回至物件型態，讓你能夠用物件的方法來操作cookie內容</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjea5202d0000ucug3mjorajz","category_id":"cjea5202k0003ucugruidao0x","_id":"cjea5202q0008ucug0fmcyftk"},{"post_id":"cjea5202i0002ucugdawafrnf","category_id":"cjea5202q0007ucugitx15tuz","_id":"cjea5202r000aucug1f7abdug"},{"post_id":"cjea5202m0004ucugmcjuc086","category_id":"cjea5202q0009ucugnrjzjrl0","_id":"cjea5202t000cucug9uwjtavl"},{"post_id":"cjea5202o0005ucugrfgkzku3","category_id":"cjea5202q0007ucugitx15tuz","_id":"cjea5202t000eucugighygyoy"},{"post_id":"cjea5202p0006ucugin3pdkfm","category_id":"cjea5202q0007ucugitx15tuz","_id":"cjea5202u000fucug2q13m6cg"}],"PostTag":[],"Tag":[]}}