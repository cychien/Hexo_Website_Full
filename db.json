{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/happy.jpg","path":"images/happy.jpg","modified":0,"renderable":0},{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/about-bg.jpg","path":"images/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/home-bg.jpg","path":"images/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/images/contact-bg.jpg","path":"images/contact-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/WEBM/Productive-Morning.webm","path":"WEBM/Productive-Morning.webm","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/MP4/Productive-Morning.mp4","path":"MP4/Productive-Morning.mp4","modified":0,"renderable":1}],"Cache":[{"_id":"themes/clean-blog/LICENSE","hash":"34ac5e147727699d1bbc346b014f2e0bdfbb0947","modified":1502933701589},{"_id":"themes/clean-blog/README.md","hash":"779e999931169acdbabf43ab0e70471e8631583a","modified":1502933701590},{"_id":"themes/clean-blog/_config.yml","hash":"a93495a986c864bf8840348f21dfe3da766ce439","modified":1502939175995},{"_id":"source/_posts/Collection-Method-Sort.md","hash":"5c4d6960befb7edcf7f3d9d9c96d1498e3a690c8","modified":1504110233790},{"_id":"source/_posts/Handlebars模板引擎(2) - 使用Handlebars.md","hash":"a78c89c40a6d0559ebcf418902d6e2cbfe0917b6","modified":1505120202869},{"_id":"source/_posts/Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介.md","hash":"9c73c1ef06654677b7b32a4314eeb40eed67dc96","modified":1505099596874},{"_id":"source/categories/index.md","hash":"056224078f21e49cf4c6b4e634d0d8f795fca1e2","modified":1498581305364},{"_id":"themes/clean-blog/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1502933701592},{"_id":"themes/clean-blog/languages/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1502933701593},{"_id":"themes/clean-blog/languages/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1502933701592},{"_id":"themes/clean-blog/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1502933701594},{"_id":"themes/clean-blog/languages/fr.yml","hash":"10e3529b8492d7a7601d5b35b44d8fc9e8ea8d1b","modified":1502933701595},{"_id":"themes/clean-blog/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1502933701595},{"_id":"themes/clean-blog/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1502933701596},{"_id":"themes/clean-blog/languages/pt.yml","hash":"6a31d548092af8af9f25d859063b0589c23ce13a","modified":1502933701597},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1502933701599},{"_id":"themes/clean-blog/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1502933701598},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1502933701600},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"c3aa4a76ee8b59b0e12ddbe951a9852176058eac","modified":1502933701616},{"_id":"themes/clean-blog/layout/index.ejs","hash":"bd6dc263bc6fad9fdca1eb4800576035ca12ce15","modified":1505359865429},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"acc791dc4346c135ce4cac3cdeba6f96708115e5","modified":1502933701618},{"_id":"themes/clean-blog/layout/page.ejs","hash":"b585761947e289f0e37380780cfdebee0674c378","modified":1502933701618},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1502933701619},{"_id":"source/images/happy.jpg","hash":"80967c65d1dc9e743df528b94764e6bbb1cc32c8","modified":1498451124870},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"75b9b24c226eda4884752a868177b590d3e8b06f","modified":1502933701603},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"f199b6e0039a7e9f840b8fbb9971fbd673ba5ce3","modified":1502933701602},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"b494e4a50f63d66e545da449af18a7198a057bd6","modified":1502933701604},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"fa77a175a9f156ab80b1c7835d5d64518e14ad10","modified":1504061714951},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"ad112adf312337c60d436fdd127e948fe81b3dd1","modified":1502933701606},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"12524df0c1ce5136a8f88cea2fe550f9e1b47b19","modified":1502933701607},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"5cafed11b6cfbf22e83674676c0edc6c4420cc0d","modified":1502933701608},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"8616d6fcb03ec41ea60e446cfb9273a5b8c83048","modified":1502933701609},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"15e9562d0f6146e25e22856693d1312cd3ade4af","modified":1502933701610},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1502933701611},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"b501bdc57e3c67339d32d3e262028ff876c8e48e","modified":1505360112613},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"3c51a2a2f950ab2ca80f10d3d3941d5d8cd08ec7","modified":1502933701613},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1502933701614},{"_id":"themes/clean-blog/layout/_partial/tag-category-index.ejs","hash":"008b4ed0b6fd6dc81bc0655ccc46e43eb310706b","modified":1502933701615},{"_id":"themes/clean-blog/source/css/article.styl","hash":"65d48f35605a9f616ff43b3207053cedc11c899f","modified":1503578067829},{"_id":"themes/clean-blog/source/css/base.styl","hash":"d9f9ee8841ac33ac7f0e0273b71cb0e9c94ddb4e","modified":1504071345291},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"cf700a1c1c62b17d35a8f7500bf1a32d9bc6ab6a","modified":1502933701623},{"_id":"themes/clean-blog/source/css/style.styl","hash":"455df0ce0b5b93e5be181c1900049613fce0dc7c","modified":1503063330450},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"06e16f64020cbddf2c2c49ef45f940141a1b2ada","modified":1502933701625},{"_id":"themes/clean-blog/source/images/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1502933701627},{"_id":"themes/clean-blog/source/images/favicon.ico","hash":"63750d8cd91c2ec67a689edb42f6e9e3904de344","modified":1502908160000},{"_id":"themes/clean-blog/source/images/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1502933701639},{"_id":"themes/clean-blog/source/images/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1502933701635},{"_id":"themes/clean-blog/source/WEBM/Productive-Morning.webm","hash":"79502896941dbaa1842a60cbaf488cb9d69052b2","modified":1439153548000},{"_id":"themes/clean-blog/source/MP4/Productive-Morning.mp4","hash":"8681d455f04509a5b8fe9a88758a9826b4ba932f","modified":1439153384000},{"_id":"public/categories/index.html","hash":"959f421e48525cf2b200f683cf24889ebb383258","modified":1505360128069},{"_id":"public/categories/Programming/index.html","hash":"b13a3a0c061c76a27971d2c80b92ac6b071d53ff","modified":1505360128069},{"_id":"public/archives/index.html","hash":"bbf4bc0d52761c4748d1bf18eaad1530b5f93ac0","modified":1505360128073},{"_id":"public/archives/2017/index.html","hash":"307a402439f3ea70c651e291c42787e1653e334f","modified":1505360128073},{"_id":"public/archives/2017/06/index.html","hash":"d50fe594b75d2a8ede6d1a44df1bcd709c48b89b","modified":1505360128073},{"_id":"public/archives/2017/09/index.html","hash":"027fb51daae9185b6adefdc1f3f38f063983bbdc","modified":1505360128073},{"_id":"public/index.html","hash":"f9e888a2013c824f35c21b92c636da9c8798fc7c","modified":1505360128073},{"_id":"public/2017/09/11/Handlebars模板引擎(2) - 使用Handlebars/index.html","hash":"6b0f095b3d49cc8aed1cc49e324f384b4b4c67ea","modified":1505360128073},{"_id":"public/2017/09/11/Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介/index.html","hash":"b2cb5ffcf84856d9d8767019b975b887d7239d37","modified":1505360128073},{"_id":"public/2017/06/27/Collection-Method-Sort/index.html","hash":"96598fe39be253f747c515fe43a8156afebbc9b9","modified":1505360128073},{"_id":"public/images/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1505360128085},{"_id":"public/images/favicon.ico","hash":"63750d8cd91c2ec67a689edb42f6e9e3904de344","modified":1505360128085},{"_id":"public/images/happy.jpg","hash":"80967c65d1dc9e743df528b94764e6bbb1cc32c8","modified":1505360128773},{"_id":"public/css/article.css","hash":"78ad62a1b44ebb0bc2a104e27fe19d131c6190e0","modified":1505360128777},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1505360128777},{"_id":"public/css/base.css","hash":"3a99029787e439fd9950cee8232f3b7b68c98e19","modified":1505360128777},{"_id":"public/css/style.css","hash":"ace6e7f770d503bbedf108c1b7b5e4359a4e26e4","modified":1505360128777},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505360128777},{"_id":"public/images/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1505360128777},{"_id":"public/images/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1505360128809},{"_id":"public/WEBM/Productive-Morning.webm","hash":"79502896941dbaa1842a60cbaf488cb9d69052b2","modified":1505360129017},{"_id":"public/MP4/Productive-Morning.mp4","hash":"8681d455f04509a5b8fe9a88758a9826b4ba932f","modified":1505360129024}],"Category":[{"name":"Programming","_id":"cj7jwjw750003z4juzb1kr11v"}],"Data":[],"Page":[{"title":"分類","date":"2017-06-27T14:07:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2017-06-27 22:07:23\ntype: \"categories\"\n---\n","updated":"2017-06-27T16:35:05.364Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj7jwjw6s0001z4juqibe4ipq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Handlebars模板引擎(2) - 使用Handlebars","author":"Justin","cover":"/images/about-bg.jpg","_content":"Handlebars是一個可用於clint端或server端的模板引擎，Handlebars由javascript寫成。\n\n## 安裝方法\n\n在創建express時用以下命令\n\n\texpress (project name) --hbs\n\n或在不使用express-generator的情況下，使用以下命令自行加入\n\n\tnpm install hbs --save\n\n若使用第二種方法，還必須在app.js中將view engine修改為Handlebars\n\n\tapp.set('view engine', 'hbs');\n\n## Handlebars基礎\n\n### 大括號的使用\n\n在Handlebars模板中用 `{ { } }` 框住的內容是可以被替換的部分，像是\n\n```handlebars\n<p>Hello, {{name}}</p>\n```\n\n這樣的一個模板，如果傳入的內容是{name: 'Justin'}的話，則最終輸出的HTML將會是\n\n\t<p>Hello, Justin</p>\n\n特別的是如果你想傳如一段HTML，像是{name: '&lt;b&gt;Justin&lt;/b&gt;'}  \n使用之前的模板，輸出結果會是\n\n\t<p>Hello, &lt;b&gt;Justin&lt;/b&gt;</p>\n\n要解決這個問題，必須在模板中使用 `{ { { } } }` ，它會關閉HTML的轉義功能:\n\n```handlebars\n<p>Hello, {{{name}}}</p>\n```\n\n### 區塊\n\n為了解釋區塊，我們先來假設一段內容\n\n```json\n{\n    name: 'Golem',\n    type: ['Rock', 'Ground'],\n    quickMoves: [\n                {name: Rock Throw, DPS: 16}, \n                {name: Mud Slap, DPS: 12.9}\n    ],\n    mainMoves: [\n                {name: Stone Edge, DPS: 42.9}, \n                {name: Earthquake, DPS: 35.1}, \n                {name: Rock Blast, DPS: 23.1}\n    ],\n    moveType: 'Rock or Ground' \n}\n```\n\n這是一段有關Pokemon Go資料的內容，現在我們來檢視一個可傳入以上內容的模板\n\n```handlebars\n<div>\n    <p>Name: {{name}}</p>\n    <p>\n        {{#each type}}\n            {{.}} \n        {{/each}}\n    </p>\n    <ul>\n        {{#each quickMoves}}\n            <li>\n                Move Name: {{name}}, DPS: {{DPS}}\n                {{#if ../type}}\n                    ({{../../moveType}})\n                {{/if}}\n            </li>\n        {{/each}}\n    </ul>\n</div>\n```\n\n原先的內容包括name, type, quickMoves, mainMoves等等屬性，但是在 `{ { #each type} }` 與 `{ { /each} }` 之間**進入了另一個\"區塊\"**，這個區塊的內容只包括了type的陣列，而 `{ {.} }` 則代表的是當前遍歷到的值\n\n我們再來看看下面比較複雜的結構，一樣這個each區塊將內容改變了，變成只包含了quickMoves陣列，比較特別的是if，**在if區塊中的內容與他的父層是一樣的，但是與他的父層仍舊相隔了一層**，所以在這個例子中你可以看到，第一個 `../` 先回到父層的內容，也就是只包含了quickMoves陣列的內容，第二個 `../` 再跑到上一層，也就是回到了最原始、最完整的內容，這時就可以取用moveType的值了\n\n千萬要記得的是: **`../` 代表的父級是就模板結構而言，不是內容本身的結構**\n\n## 後端模板\n\n### View & Layout\n\n在express專案中有一個資料夾是views，當中存放著一張張的網頁(View)，不過大部分的網頁都有相似的結構，因此我們可以創造出一個Layout，Layout是一個特殊的View，是模板的模板，在hbs中，hbs會尋找名為layout.hbs的這個模板，將這個模板作為Layout\n\n以下是一個例子: \n\nlayout.hbs\n\n```handlebars\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{title}}</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n    </head>\n    <body>\n        {{{body}}}\n    </body>\n</html>\n```\n\nwelcome.hbs\n\n```html\n<h1>Welcome! My Friends!</h1>\n```\n\n這時你用下列程式碼渲染頁面:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !'});\n});\n```\n\n處理順序是這樣的:\n\n1.  傳入的內容和welcome.hbs做結合\n2.  之後將welcome.hbs的內容放入layout.hbs的body中，同時傳入的內容一樣會與layout.hbs做結合\n\n最後顯示的html如下:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Pokemon Go is Fun !</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n    </head>\n    <body>\n        <h1>Welcome! My Friends!</h1>\n    </body>\n</html>\n```\n\n如果你有多個Layout，那麼你只要在傳入的內容裡指定要使用哪一個Layout就可以了，像是:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !', layout: 'layout2.hbs'});\n});\n```\n\n如果你不需要套入Layout，那麼就將layout的值設為null，像是:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !', layout: null});\n});\n```\n\n如果你想改變預設的Layout，那麼就更改view option的設定值，加入以下程式:\n\n```javascript\napp.set('view options', {\n    layout: layout2.hbs;\n})\n```\n\n### Partial\n\n在不同的網頁上我們經常重複使用了許多相同的元件，如果將這些元件寫在每個檔案裡，不僅網頁內容變得更龐大、更難以維護，在元件的修改上也會變得十分麻煩，所以比較好的做法就是將它抽離，獨自形成一個模板，我們特別稱這種模板為\"Partial\"\n\n我們先建立一個partial檔案(檔案位子在views/partials/pokemonInfo.hbs):\n\n```handlebars\n<div class=\"popularPokemon\">\n    {{#each popularPokemon}}\n        <div class=\"pokemon\">\n            <img src=\"/images/{{imagePath}}\" />\n            <h3>名字: {{name}}</h3>\n            <p>屬性: {{type}}</p>\n            <p>外部連結: <a href=\"{{link}}\"></a></p>\n        </div>\n    {{/each}}\n</div>\n```\n\n再來我們要註冊partial，目的是為了在view裡面帶入這個partial，一種方式是註冊單一個partial:\n\n```javascript\nhbs.registerPartial('pokemonInfo', fs.readFileSync(__dirname + '/views/partials/pokemonInfo.hbs', 'utf-8'));\n```\n\n第二種方式是一次註冊整個資料夾內所有的內容\n\n```javascript\nhbs.registerPartials(__dirname + '/view/partials');\n```\n\n之後設定要傳入的內容，為了簡潔一點，我們用一個函式包裝:\n\n```javascript\nfunction getPokemonInfo() {\n    return {\n        popularPokemon: [\n            {\n                imagePath: 'Tyranitar.jpg',\n                name: '班基拉斯',\n                type: 'Rock、Dark',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/248-tyranitar'\n            },\n            {\n                imagePath: 'Dragonite.jpg',\n                name: '快龍',\n                type: 'Dragon、Fly',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/149-dragonite'\n            },\n            {\n                imagePath: 'Golem.jpg',\n                name: '隆隆岩',\n                type: 'Rock、Ground',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/76-golem'\t\n            }\n        ]\n    };\n}\n```\n\n你可以用如下的方式傳輸數據:\n\n```javascript\napp.get('/', function(req, res) {\n    res.locals = getPokemonInfo();\n    res.render('welcome');\n});\n```\n\n然後在welcome.hbs裡添加這個partial:\n\n```handlebars\n<h1>Welcome! My Friends!</h1>\n{{> pokemonInfo}}\n```\n\n就大功告成了!  \n當然這種做法還稱不上是完美，原因是你每次需要這份partial時，都要傳一次pokemonInfo內容，我們換種寫法，讓所有的view都能使用這份pokemonInfo內容，用的方式是加入中介軟體:  \n\n```javascript\napp.use(function(req, res, next) {\n    res.locals = getPokemonInfo();\n    next();\n});\n```\n\n這樣就能為資料注入res.locals物件，而不用在每個路由處理程式裡都寫一次\n\n### Helper\n\nHandlebars是一個弱邏輯的模板引擎，舉個例子，你在前面看到的 `{ { #if} }` ，後面是不能接判斷式的，像 `{ { #if type!=null} }` 和 `{ { #if type&&name} }` 都是不合法的，但如果你想要處理更複雜的邏輯該怎麼辦呢?這時你就需要helper的協助了。\n\n你可以想像helper是一個自訂義標籤，它可以在handlebars模板的任何地方，helper和partial一樣需要被事先的註冊，底下是一個簡單的helper:\n\n```javascript\nhbs.registerHelper('list', function(context, option) {\n    var out = \"</ul>\";\n\n    for(var i=0; i<context.length; i++) {\n        out = out + \"<li>\" + options.fn(context[i]) + \"</li>\";\n    }\n\n    return out + \"</ul>\";\n});\n```\n\n在解釋以上語法之前，我們先來看看傳入的內容(context)是什麼:\n\n```json\n{\n    people: [\n        {firstName: 'Justin', lastName: 'Chien'},\n        {firstName: 'Jack', lastName: 'Lee'},\n        {firstName: 'Mandy', lastNmae: 'Wu'}\n    ]\n}\n```\n\n第一個參數 `list` 是這個自定義標籤的名字，第二個參數則傳入一個function，代表你想要做到的事，function的第一個參數傳入一段context，如果沒有設則是同於當前的context，第二個參數 `option` 有一個方法 `fn` ， 假設在你的list區塊中還有其他的模板，那麼 `option.fn()` 代表的就會是編譯過的那些模板，當你傳入一段context時，它就會回傳出相應的HTML，底下是一個實際應用的例子:\n\n```handlebars\n{{#list people}}{{firstName}} {{lastName}}{{/list}}\n```\n\n嘗試理解一下，people代表現在的context已經被鎖定在people陣列中，而此時的option.fn()代表的是被編譯過的 `{ {firstName} } { {lastName} }` ，譬如將{firstName: 'Justin', lastName: 'Chien'}傳入option.fn()，它就會回傳給你 `Chien Justin` ，所以最終的結果會是這樣:\n\n```html\n<ul>\n    <li>Justin Chien</li>\n    <li>Jack Lee</li>\n    <li>Mandy Wu</li>\n</ul>\n```\n\n老實說前面看到的 `{ { #if} }` 、 `{ { #each} }` 都是helper，只是他們是內建的helper，其他內建的helper還有 `{ { #with} }` 、 `{ { #unless} }` 等等，可以在[此連結](https://segmentfault.com/a/1190000000342636)中查看\n\n## 前端模板\n\n在前端中一樣可以引入Handlebars，步驟是這樣的:  \n\n1.  將Handlebars下載後放入靜態內容或直接使用CDN\n\n2.  寫一個模板\n\n3.  編譯模板\n\n4.  將內容(context)傳入編譯後的模板\n\n為了方便理解，底下是一個簡單的例子，首先引入Handlebars:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js\"></script>\n```\n\n再來寫一個模板:\n\n```handlebars\n<script id=\"template\" type=\"text/x-handlebars-template\">\n    Hi! My name is {{{name}}}.\n</script>\n```\n\n然後編譯它:\n\n```javascript\nvar compiledTemplate = Handlebars.compile($('#template').html());\n```\n\n最後將內容傳入編譯後的模板:\n\n```html\n<div id=\"result\"></div>\n\nvar data = {name: 'Kevin'};\n$('#result').html(compiledTemplate(data));\n```\n\n當然你一樣可以在前端模板中使用partial、helper等特性，就像Handlebars用於後端時的那樣\n\n這篇文章主要講述一些Handlebars的基礎功能，在之後的文章中我們再來探討更多Handlebars可以做到的事","source":"_posts/Handlebars模板引擎(2) - 使用Handlebars.md","raw":"---\ntitle: Handlebars模板引擎(2) - 使用Handlebars\nauthor: Justin\ncover: /images/about-bg.jpg\ntags:\ncategories: \n- Programming\n---\nHandlebars是一個可用於clint端或server端的模板引擎，Handlebars由javascript寫成。\n\n## 安裝方法\n\n在創建express時用以下命令\n\n\texpress (project name) --hbs\n\n或在不使用express-generator的情況下，使用以下命令自行加入\n\n\tnpm install hbs --save\n\n若使用第二種方法，還必須在app.js中將view engine修改為Handlebars\n\n\tapp.set('view engine', 'hbs');\n\n## Handlebars基礎\n\n### 大括號的使用\n\n在Handlebars模板中用 `{ { } }` 框住的內容是可以被替換的部分，像是\n\n```handlebars\n<p>Hello, {{name}}</p>\n```\n\n這樣的一個模板，如果傳入的內容是{name: 'Justin'}的話，則最終輸出的HTML將會是\n\n\t<p>Hello, Justin</p>\n\n特別的是如果你想傳如一段HTML，像是{name: '&lt;b&gt;Justin&lt;/b&gt;'}  \n使用之前的模板，輸出結果會是\n\n\t<p>Hello, &lt;b&gt;Justin&lt;/b&gt;</p>\n\n要解決這個問題，必須在模板中使用 `{ { { } } }` ，它會關閉HTML的轉義功能:\n\n```handlebars\n<p>Hello, {{{name}}}</p>\n```\n\n### 區塊\n\n為了解釋區塊，我們先來假設一段內容\n\n```json\n{\n    name: 'Golem',\n    type: ['Rock', 'Ground'],\n    quickMoves: [\n                {name: Rock Throw, DPS: 16}, \n                {name: Mud Slap, DPS: 12.9}\n    ],\n    mainMoves: [\n                {name: Stone Edge, DPS: 42.9}, \n                {name: Earthquake, DPS: 35.1}, \n                {name: Rock Blast, DPS: 23.1}\n    ],\n    moveType: 'Rock or Ground' \n}\n```\n\n這是一段有關Pokemon Go資料的內容，現在我們來檢視一個可傳入以上內容的模板\n\n```handlebars\n<div>\n    <p>Name: {{name}}</p>\n    <p>\n        {{#each type}}\n            {{.}} \n        {{/each}}\n    </p>\n    <ul>\n        {{#each quickMoves}}\n            <li>\n                Move Name: {{name}}, DPS: {{DPS}}\n                {{#if ../type}}\n                    ({{../../moveType}})\n                {{/if}}\n            </li>\n        {{/each}}\n    </ul>\n</div>\n```\n\n原先的內容包括name, type, quickMoves, mainMoves等等屬性，但是在 `{ { #each type} }` 與 `{ { /each} }` 之間**進入了另一個\"區塊\"**，這個區塊的內容只包括了type的陣列，而 `{ {.} }` 則代表的是當前遍歷到的值\n\n我們再來看看下面比較複雜的結構，一樣這個each區塊將內容改變了，變成只包含了quickMoves陣列，比較特別的是if，**在if區塊中的內容與他的父層是一樣的，但是與他的父層仍舊相隔了一層**，所以在這個例子中你可以看到，第一個 `../` 先回到父層的內容，也就是只包含了quickMoves陣列的內容，第二個 `../` 再跑到上一層，也就是回到了最原始、最完整的內容，這時就可以取用moveType的值了\n\n千萬要記得的是: **`../` 代表的父級是就模板結構而言，不是內容本身的結構**\n\n## 後端模板\n\n### View & Layout\n\n在express專案中有一個資料夾是views，當中存放著一張張的網頁(View)，不過大部分的網頁都有相似的結構，因此我們可以創造出一個Layout，Layout是一個特殊的View，是模板的模板，在hbs中，hbs會尋找名為layout.hbs的這個模板，將這個模板作為Layout\n\n以下是一個例子: \n\nlayout.hbs\n\n```handlebars\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{title}}</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n    </head>\n    <body>\n        {{{body}}}\n    </body>\n</html>\n```\n\nwelcome.hbs\n\n```html\n<h1>Welcome! My Friends!</h1>\n```\n\n這時你用下列程式碼渲染頁面:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !'});\n});\n```\n\n處理順序是這樣的:\n\n1.  傳入的內容和welcome.hbs做結合\n2.  之後將welcome.hbs的內容放入layout.hbs的body中，同時傳入的內容一樣會與layout.hbs做結合\n\n最後顯示的html如下:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Pokemon Go is Fun !</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n    </head>\n    <body>\n        <h1>Welcome! My Friends!</h1>\n    </body>\n</html>\n```\n\n如果你有多個Layout，那麼你只要在傳入的內容裡指定要使用哪一個Layout就可以了，像是:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !', layout: 'layout2.hbs'});\n});\n```\n\n如果你不需要套入Layout，那麼就將layout的值設為null，像是:\n\n```javascript\napp.get('/', function(req, res) {\n    res.render('welcome', {title: 'Pokemon Go is Fun !', layout: null});\n});\n```\n\n如果你想改變預設的Layout，那麼就更改view option的設定值，加入以下程式:\n\n```javascript\napp.set('view options', {\n    layout: layout2.hbs;\n})\n```\n\n### Partial\n\n在不同的網頁上我們經常重複使用了許多相同的元件，如果將這些元件寫在每個檔案裡，不僅網頁內容變得更龐大、更難以維護，在元件的修改上也會變得十分麻煩，所以比較好的做法就是將它抽離，獨自形成一個模板，我們特別稱這種模板為\"Partial\"\n\n我們先建立一個partial檔案(檔案位子在views/partials/pokemonInfo.hbs):\n\n```handlebars\n<div class=\"popularPokemon\">\n    {{#each popularPokemon}}\n        <div class=\"pokemon\">\n            <img src=\"/images/{{imagePath}}\" />\n            <h3>名字: {{name}}</h3>\n            <p>屬性: {{type}}</p>\n            <p>外部連結: <a href=\"{{link}}\"></a></p>\n        </div>\n    {{/each}}\n</div>\n```\n\n再來我們要註冊partial，目的是為了在view裡面帶入這個partial，一種方式是註冊單一個partial:\n\n```javascript\nhbs.registerPartial('pokemonInfo', fs.readFileSync(__dirname + '/views/partials/pokemonInfo.hbs', 'utf-8'));\n```\n\n第二種方式是一次註冊整個資料夾內所有的內容\n\n```javascript\nhbs.registerPartials(__dirname + '/view/partials');\n```\n\n之後設定要傳入的內容，為了簡潔一點，我們用一個函式包裝:\n\n```javascript\nfunction getPokemonInfo() {\n    return {\n        popularPokemon: [\n            {\n                imagePath: 'Tyranitar.jpg',\n                name: '班基拉斯',\n                type: 'Rock、Dark',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/248-tyranitar'\n            },\n            {\n                imagePath: 'Dragonite.jpg',\n                name: '快龍',\n                type: 'Dragon、Fly',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/149-dragonite'\n            },\n            {\n                imagePath: 'Golem.jpg',\n                name: '隆隆岩',\n                type: 'Rock、Ground',\n                link: 'https://pokemon.gameinfo.io/zh-tw/pokemon/76-golem'\t\n            }\n        ]\n    };\n}\n```\n\n你可以用如下的方式傳輸數據:\n\n```javascript\napp.get('/', function(req, res) {\n    res.locals = getPokemonInfo();\n    res.render('welcome');\n});\n```\n\n然後在welcome.hbs裡添加這個partial:\n\n```handlebars\n<h1>Welcome! My Friends!</h1>\n{{> pokemonInfo}}\n```\n\n就大功告成了!  \n當然這種做法還稱不上是完美，原因是你每次需要這份partial時，都要傳一次pokemonInfo內容，我們換種寫法，讓所有的view都能使用這份pokemonInfo內容，用的方式是加入中介軟體:  \n\n```javascript\napp.use(function(req, res, next) {\n    res.locals = getPokemonInfo();\n    next();\n});\n```\n\n這樣就能為資料注入res.locals物件，而不用在每個路由處理程式裡都寫一次\n\n### Helper\n\nHandlebars是一個弱邏輯的模板引擎，舉個例子，你在前面看到的 `{ { #if} }` ，後面是不能接判斷式的，像 `{ { #if type!=null} }` 和 `{ { #if type&&name} }` 都是不合法的，但如果你想要處理更複雜的邏輯該怎麼辦呢?這時你就需要helper的協助了。\n\n你可以想像helper是一個自訂義標籤，它可以在handlebars模板的任何地方，helper和partial一樣需要被事先的註冊，底下是一個簡單的helper:\n\n```javascript\nhbs.registerHelper('list', function(context, option) {\n    var out = \"</ul>\";\n\n    for(var i=0; i<context.length; i++) {\n        out = out + \"<li>\" + options.fn(context[i]) + \"</li>\";\n    }\n\n    return out + \"</ul>\";\n});\n```\n\n在解釋以上語法之前，我們先來看看傳入的內容(context)是什麼:\n\n```json\n{\n    people: [\n        {firstName: 'Justin', lastName: 'Chien'},\n        {firstName: 'Jack', lastName: 'Lee'},\n        {firstName: 'Mandy', lastNmae: 'Wu'}\n    ]\n}\n```\n\n第一個參數 `list` 是這個自定義標籤的名字，第二個參數則傳入一個function，代表你想要做到的事，function的第一個參數傳入一段context，如果沒有設則是同於當前的context，第二個參數 `option` 有一個方法 `fn` ， 假設在你的list區塊中還有其他的模板，那麼 `option.fn()` 代表的就會是編譯過的那些模板，當你傳入一段context時，它就會回傳出相應的HTML，底下是一個實際應用的例子:\n\n```handlebars\n{{#list people}}{{firstName}} {{lastName}}{{/list}}\n```\n\n嘗試理解一下，people代表現在的context已經被鎖定在people陣列中，而此時的option.fn()代表的是被編譯過的 `{ {firstName} } { {lastName} }` ，譬如將{firstName: 'Justin', lastName: 'Chien'}傳入option.fn()，它就會回傳給你 `Chien Justin` ，所以最終的結果會是這樣:\n\n```html\n<ul>\n    <li>Justin Chien</li>\n    <li>Jack Lee</li>\n    <li>Mandy Wu</li>\n</ul>\n```\n\n老實說前面看到的 `{ { #if} }` 、 `{ { #each} }` 都是helper，只是他們是內建的helper，其他內建的helper還有 `{ { #with} }` 、 `{ { #unless} }` 等等，可以在[此連結](https://segmentfault.com/a/1190000000342636)中查看\n\n## 前端模板\n\n在前端中一樣可以引入Handlebars，步驟是這樣的:  \n\n1.  將Handlebars下載後放入靜態內容或直接使用CDN\n\n2.  寫一個模板\n\n3.  編譯模板\n\n4.  將內容(context)傳入編譯後的模板\n\n為了方便理解，底下是一個簡單的例子，首先引入Handlebars:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js\"></script>\n```\n\n再來寫一個模板:\n\n```handlebars\n<script id=\"template\" type=\"text/x-handlebars-template\">\n    Hi! My name is {{{name}}}.\n</script>\n```\n\n然後編譯它:\n\n```javascript\nvar compiledTemplate = Handlebars.compile($('#template').html());\n```\n\n最後將內容傳入編譯後的模板:\n\n```html\n<div id=\"result\"></div>\n\nvar data = {name: 'Kevin'};\n$('#result').html(compiledTemplate(data));\n```\n\n當然你一樣可以在前端模板中使用partial、helper等特性，就像Handlebars用於後端時的那樣\n\n這篇文章主要講述一些Handlebars的基礎功能，在之後的文章中我們再來探討更多Handlebars可以做到的事","slug":"Handlebars模板引擎(2) - 使用Handlebars","published":1,"date":"2017-09-11T03:14:48.193Z","updated":"2017-09-11T08:56:42.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7jwjw6k0000z4juhcv0bw5l","content":"<p>Handlebars是一個可用於clint端或server端的模板引擎，Handlebars由javascript寫成。</p>\n<h2 id=\"安裝方法\"><a href=\"#安裝方法\" class=\"headerlink\" title=\"安裝方法\"></a>安裝方法</h2><p>在創建express時用以下命令</p>\n<pre><code>express (project name) --hbs\n</code></pre><p>或在不使用express-generator的情況下，使用以下命令自行加入</p>\n<pre><code>npm install hbs --save\n</code></pre><p>若使用第二種方法，還必須在app.js中將view engine修改為Handlebars</p>\n<pre><code>app.set(&apos;view engine&apos;, &apos;hbs&apos;);\n</code></pre><h2 id=\"Handlebars基礎\"><a href=\"#Handlebars基礎\" class=\"headerlink\" title=\"Handlebars基礎\"></a>Handlebars基礎</h2><h3 id=\"大括號的使用\"><a href=\"#大括號的使用\" class=\"headerlink\" title=\"大括號的使用\"></a>大括號的使用</h3><p>在Handlebars模板中用 <code>{ { } }</code> 框住的內容是可以被替換的部分，像是</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;Hello, <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>這樣的一個模板，如果傳入的內容是{name: ‘Justin’}的話，則最終輸出的HTML將會是</p>\n<pre><code>&lt;p&gt;Hello, Justin&lt;/p&gt;\n</code></pre><p>特別的是如果你想傳如一段HTML，像是{name: ‘&lt;b&gt;Justin&lt;/b&gt;’}<br>使用之前的模板，輸出結果會是</p>\n<pre><code>&lt;p&gt;Hello, &amp;lt;b&amp;gt;Justin&amp;lt;/b&amp;gt;&lt;/p&gt;\n</code></pre><p>要解決這個問題，必須在模板中使用 <code>{ { { } } }</code> ，它會關閉HTML的轉義功能:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;Hello, <span class=\"template-variable\">&#123;&#123;&#123;name&#125;&#125;</span>&#125;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"區塊\"><a href=\"#區塊\" class=\"headerlink\" title=\"區塊\"></a>區塊</h3><p>為了解釋區塊，我們先來假設一段內容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    name: 'Golem',</div><div class=\"line\">    type: ['Rock', 'Ground'],</div><div class=\"line\">    quickMoves: [</div><div class=\"line\">                &#123;name: Rock Throw, DPS: 16&#125;, </div><div class=\"line\">                &#123;name: Mud Slap, DPS: 12.9&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    mainMoves: [</div><div class=\"line\">                &#123;name: Stone Edge, DPS: 42.9&#125;, </div><div class=\"line\">                &#123;name: Earthquake, DPS: 35.1&#125;, </div><div class=\"line\">                &#123;name: Rock Blast, DPS: 23.1&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    moveType: 'Rock or Ground' </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這是一段有關Pokemon Go資料的內容，現在我們來檢視一個可傳入以上內容的模板</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;p&gt;Name: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> type&#125;&#125;</span></div><div class=\"line\">            <span class=\"template-variable\">&#123;&#123;.&#125;&#125;</span> </div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">    &lt;/p&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> quickMoves&#125;&#125;</span></div><div class=\"line\">            &lt;li&gt;</div><div class=\"line\">                Move Name: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>, DPS: <span class=\"template-variable\">&#123;&#123;DPS&#125;&#125;</span></div><div class=\"line\">                <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">if</span></span> ../type&#125;&#125;</span></div><div class=\"line\">                    (<span class=\"template-variable\">&#123;&#123;../../moveType&#125;&#125;</span>)</div><div class=\"line\">                <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">if</span></span>&#125;&#125;</span></div><div class=\"line\">            &lt;/li&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>原先的內容包括name, type, quickMoves, mainMoves等等屬性，但是在 <code>{ { #each type} }</code> 與 <code>{ { /each} }</code> 之間<strong>進入了另一個”區塊”</strong>，這個區塊的內容只包括了type的陣列，而 <code>{ {.} }</code> 則代表的是當前遍歷到的值</p>\n<p>我們再來看看下面比較複雜的結構，一樣這個each區塊將內容改變了，變成只包含了quickMoves陣列，比較特別的是if，<strong>在if區塊中的內容與他的父層是一樣的，但是與他的父層仍舊相隔了一層</strong>，所以在這個例子中你可以看到，第一個 <code>../</code> 先回到父層的內容，也就是只包含了quickMoves陣列的內容，第二個 <code>../</code> 再跑到上一層，也就是回到了最原始、最完整的內容，這時就可以取用moveType的值了</p>\n<p>千萬要記得的是: <strong><code>../</code> 代表的父級是就模板結構而言，不是內容本身的結構</strong></p>\n<h2 id=\"後端模板\"><a href=\"#後端模板\" class=\"headerlink\" title=\"後端模板\"></a>後端模板</h2><h3 id=\"View-amp-Layout\"><a href=\"#View-amp-Layout\" class=\"headerlink\" title=\"View &amp; Layout\"></a>View &amp; Layout</h3><p>在express專案中有一個資料夾是views，當中存放著一張張的網頁(View)，不過大部分的網頁都有相似的結構，因此我們可以創造出一個Layout，Layout是一個特殊的View，是模板的模板，在hbs中，hbs會尋找名為layout.hbs的這個模板，將這個模板作為Layout</p>\n<p>以下是一個例子: </p>\n<p>layout.hbs</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;<span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span>&lt;/title&gt;</div><div class=\"line\">        &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        <span class=\"template-variable\">&#123;&#123;&#123;body&#125;&#125;</span>&#125;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>welcome.hbs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這時你用下列程式碼渲染頁面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>處理順序是這樣的:</p>\n<ol>\n<li>傳入的內容和welcome.hbs做結合</li>\n<li>之後將welcome.hbs的內容放入layout.hbs的body中，同時傳入的內容一樣會與layout.hbs做結合</li>\n</ol>\n<p>最後顯示的html如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Pokemon Go is Fun !<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet'</span> <span class=\"attr\">href</span>=<span class=\"string\">'/stylesheets/style.css'</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你有多個Layout，那麼你只要在傳入的內容裡指定要使用哪一個Layout就可以了，像是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>, <span class=\"attr\">layout</span>: <span class=\"string\">'layout2.hbs'</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你不需要套入Layout，那麼就將layout的值設為null，像是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>, <span class=\"attr\">layout</span>: <span class=\"literal\">null</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你想改變預設的Layout，那麼就更改view option的設定值，加入以下程式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.set(<span class=\"string\">'view options'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">layout</span>: layout2.hbs;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p>在不同的網頁上我們經常重複使用了許多相同的元件，如果將這些元件寫在每個檔案裡，不僅網頁內容變得更龐大、更難以維護，在元件的修改上也會變得十分麻煩，所以比較好的做法就是將它抽離，獨自形成一個模板，我們特別稱這種模板為”Partial”</p>\n<p>我們先建立一個partial檔案(檔案位子在views/partials/pokemonInfo.hbs):</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"popularPokemon\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> popularPokemon&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pokemon\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/</span></span><span class=\"template-variable\">&#123;&#123;imagePath&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>名字: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>屬性: <span class=\"template-variable\">&#123;&#123;type&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>外部連結: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;link&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來我們要註冊partial，目的是為了在view裡面帶入這個partial，一種方式是註冊單一個partial:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerPartial(<span class=\"string\">'pokemonInfo'</span>, fs.readFileSync(__dirname + <span class=\"string\">'/views/partials/pokemonInfo.hbs'</span>, <span class=\"string\">'utf-8'</span>));</div></pre></td></tr></table></figure>\n<p>第二種方式是一次註冊整個資料夾內所有的內容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerPartials(__dirname + <span class=\"string\">'/view/partials'</span>);</div></pre></td></tr></table></figure>\n<p>之後設定要傳入的內容，為了簡潔一點，我們用一個函式包裝:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPokemonInfo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">popularPokemon</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Tyranitar.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'班基拉斯'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Rock、Dark'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/248-tyranitar'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Dragonite.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'快龍'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Dragon、Fly'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/149-dragonite'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Golem.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'隆隆岩'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Rock、Ground'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/76-golem'</span>\t</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以用如下的方式傳輸數據:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.locals = getPokemonInfo();</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然後在welcome.hbs裡添加這個partial:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\"><span class=\"template-variable\">&#123;&#123;&gt; pokemonInfo&#125;&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>就大功告成了!<br>當然這種做法還稱不上是完美，原因是你每次需要這份partial時，都要傳一次pokemonInfo內容，我們換種寫法，讓所有的view都能使用這份pokemonInfo內容，用的方式是加入中介軟體:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    res.locals = getPokemonInfo();</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣就能為資料注入res.locals物件，而不用在每個路由處理程式裡都寫一次</p>\n<h3 id=\"Helper\"><a href=\"#Helper\" class=\"headerlink\" title=\"Helper\"></a>Helper</h3><p>Handlebars是一個弱邏輯的模板引擎，舉個例子，你在前面看到的 <code>{ { #if} }</code> ，後面是不能接判斷式的，像 <code>{ { #if type!=null} }</code> 和 <code>{ { #if type&amp;&amp;name} }</code> 都是不合法的，但如果你想要處理更複雜的邏輯該怎麼辦呢?這時你就需要helper的協助了。</p>\n<p>你可以想像helper是一個自訂義標籤，它可以在handlebars模板的任何地方，helper和partial一樣需要被事先的註冊，底下是一個簡單的helper:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerHelper(<span class=\"string\">'list'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, option</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> out = <span class=\"string\">\"&lt;/ul&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;context.length; i++) &#123;</div><div class=\"line\">        out = out + <span class=\"string\">\"&lt;li&gt;\"</span> + options.fn(context[i]) + <span class=\"string\">\"&lt;/li&gt;\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> out + <span class=\"string\">\"&lt;/ul&gt;\"</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在解釋以上語法之前，我們先來看看傳入的內容(context)是什麼:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    people: [</div><div class=\"line\">        &#123;firstName: 'Justin', lastName: 'Chien'&#125;,</div><div class=\"line\">        &#123;firstName: 'Jack', lastName: 'Lee'&#125;,</div><div class=\"line\">        &#123;firstName: 'Mandy', lastNmae: 'Wu'&#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一個參數 <code>list</code> 是這個自定義標籤的名字，第二個參數則傳入一個function，代表你想要做到的事，function的第一個參數傳入一段context，如果沒有設則是同於當前的context，第二個參數 <code>option</code> 有一個方法 <code>fn</code> ， 假設在你的list區塊中還有其他的模板，那麼 <code>option.fn()</code> 代表的就會是編譯過的那些模板，當你傳入一段context時，它就會回傳出相應的HTML，底下是一個實際應用的例子:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;&#123;#<span class=\"name\">list</span> people&#125;&#125;</span><span class=\"xml\"></span><span class=\"template-variable\">&#123;&#123;firstName&#125;&#125;</span><span class=\"xml\"> </span><span class=\"template-variable\">&#123;&#123;lastName&#125;&#125;</span><span class=\"xml\"></span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\">list</span>&#125;&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>嘗試理解一下，people代表現在的context已經被鎖定在people陣列中，而此時的option.fn()代表的是被編譯過的 <code>{ {firstName} } { {lastName} }</code> ，譬如將{firstName: ‘Justin’, lastName: ‘Chien’}傳入option.fn()，它就會回傳給你 <code>Chien Justin</code> ，所以最終的結果會是這樣:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Justin Chien<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Jack Lee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Mandy Wu<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>老實說前面看到的 <code>{ { #if} }</code> 、 <code>{ { #each} }</code> 都是helper，只是他們是內建的helper，其他內建的helper還有 <code>{ { #with} }</code> 、 <code>{ { #unless} }</code> 等等，可以在<a href=\"https://segmentfault.com/a/1190000000342636\" target=\"_blank\" rel=\"external\">此連結</a>中查看</p>\n<h2 id=\"前端模板\"><a href=\"#前端模板\" class=\"headerlink\" title=\"前端模板\"></a>前端模板</h2><p>在前端中一樣可以引入Handlebars，步驟是這樣的:  </p>\n<ol>\n<li><p>將Handlebars下載後放入靜態內容或直接使用CDN</p>\n</li>\n<li><p>寫一個模板</p>\n</li>\n<li><p>編譯模板</p>\n</li>\n<li><p>將內容(context)傳入編譯後的模板</p>\n</li>\n</ol>\n<p>為了方便理解，底下是一個簡單的例子，首先引入Handlebars:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來寫一個模板:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-handlebars-template\"</span>&gt;</span><span class=\"undefined\"></span></span></div><div class=\"line\">    Hi! My name is <span class=\"template-variable\">&#123;&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\">&#125;.</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然後編譯它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compiledTemplate = Handlebars.compile($(<span class=\"string\">'#template'</span>).html());</div></pre></td></tr></table></figure>\n<p>最後將內容傳入編譯後的模板:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">var data = &#123;name: 'Kevin'&#125;;</div><div class=\"line\">$('#result').html(compiledTemplate(data));</div></pre></td></tr></table></figure>\n<p>當然你一樣可以在前端模板中使用partial、helper等特性，就像Handlebars用於後端時的那樣</p>\n<p>這篇文章主要講述一些Handlebars的基礎功能，在之後的文章中我們再來探討更多Handlebars可以做到的事</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Handlebars是一個可用於clint端或server端的模板引擎，Handlebars由javascript寫成。</p>\n<h2 id=\"安裝方法\"><a href=\"#安裝方法\" class=\"headerlink\" title=\"安裝方法\"></a>安裝方法</h2><p>在創建express時用以下命令</p>\n<pre><code>express (project name) --hbs\n</code></pre><p>或在不使用express-generator的情況下，使用以下命令自行加入</p>\n<pre><code>npm install hbs --save\n</code></pre><p>若使用第二種方法，還必須在app.js中將view engine修改為Handlebars</p>\n<pre><code>app.set(&apos;view engine&apos;, &apos;hbs&apos;);\n</code></pre><h2 id=\"Handlebars基礎\"><a href=\"#Handlebars基礎\" class=\"headerlink\" title=\"Handlebars基礎\"></a>Handlebars基礎</h2><h3 id=\"大括號的使用\"><a href=\"#大括號的使用\" class=\"headerlink\" title=\"大括號的使用\"></a>大括號的使用</h3><p>在Handlebars模板中用 <code>{ { } }</code> 框住的內容是可以被替換的部分，像是</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;Hello, <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>這樣的一個模板，如果傳入的內容是{name: ‘Justin’}的話，則最終輸出的HTML將會是</p>\n<pre><code>&lt;p&gt;Hello, Justin&lt;/p&gt;\n</code></pre><p>特別的是如果你想傳如一段HTML，像是{name: ‘&lt;b&gt;Justin&lt;/b&gt;’}<br>使用之前的模板，輸出結果會是</p>\n<pre><code>&lt;p&gt;Hello, &amp;lt;b&amp;gt;Justin&amp;lt;/b&amp;gt;&lt;/p&gt;\n</code></pre><p>要解決這個問題，必須在模板中使用 <code>{ { { } } }</code> ，它會關閉HTML的轉義功能:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;Hello, <span class=\"template-variable\">&#123;&#123;&#123;name&#125;&#125;</span>&#125;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"區塊\"><a href=\"#區塊\" class=\"headerlink\" title=\"區塊\"></a>區塊</h3><p>為了解釋區塊，我們先來假設一段內容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    name: 'Golem',</div><div class=\"line\">    type: ['Rock', 'Ground'],</div><div class=\"line\">    quickMoves: [</div><div class=\"line\">                &#123;name: Rock Throw, DPS: 16&#125;, </div><div class=\"line\">                &#123;name: Mud Slap, DPS: 12.9&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    mainMoves: [</div><div class=\"line\">                &#123;name: Stone Edge, DPS: 42.9&#125;, </div><div class=\"line\">                &#123;name: Earthquake, DPS: 35.1&#125;, </div><div class=\"line\">                &#123;name: Rock Blast, DPS: 23.1&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    moveType: 'Rock or Ground' </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這是一段有關Pokemon Go資料的內容，現在我們來檢視一個可傳入以上內容的模板</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;p&gt;Name: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> type&#125;&#125;</span></div><div class=\"line\">            <span class=\"template-variable\">&#123;&#123;.&#125;&#125;</span> </div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">    &lt;/p&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> quickMoves&#125;&#125;</span></div><div class=\"line\">            &lt;li&gt;</div><div class=\"line\">                Move Name: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span>, DPS: <span class=\"template-variable\">&#123;&#123;DPS&#125;&#125;</span></div><div class=\"line\">                <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">if</span></span> ../type&#125;&#125;</span></div><div class=\"line\">                    (<span class=\"template-variable\">&#123;&#123;../../moveType&#125;&#125;</span>)</div><div class=\"line\">                <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">if</span></span>&#125;&#125;</span></div><div class=\"line\">            &lt;/li&gt;</div><div class=\"line\">        <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span></div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>原先的內容包括name, type, quickMoves, mainMoves等等屬性，但是在 <code>{ { #each type} }</code> 與 <code>{ { /each} }</code> 之間<strong>進入了另一個”區塊”</strong>，這個區塊的內容只包括了type的陣列，而 <code>{ {.} }</code> 則代表的是當前遍歷到的值</p>\n<p>我們再來看看下面比較複雜的結構，一樣這個each區塊將內容改變了，變成只包含了quickMoves陣列，比較特別的是if，<strong>在if區塊中的內容與他的父層是一樣的，但是與他的父層仍舊相隔了一層</strong>，所以在這個例子中你可以看到，第一個 <code>../</code> 先回到父層的內容，也就是只包含了quickMoves陣列的內容，第二個 <code>../</code> 再跑到上一層，也就是回到了最原始、最完整的內容，這時就可以取用moveType的值了</p>\n<p>千萬要記得的是: <strong><code>../</code> 代表的父級是就模板結構而言，不是內容本身的結構</strong></p>\n<h2 id=\"後端模板\"><a href=\"#後端模板\" class=\"headerlink\" title=\"後端模板\"></a>後端模板</h2><h3 id=\"View-amp-Layout\"><a href=\"#View-amp-Layout\" class=\"headerlink\" title=\"View &amp; Layout\"></a>View &amp; Layout</h3><p>在express專案中有一個資料夾是views，當中存放著一張張的網頁(View)，不過大部分的網頁都有相似的結構，因此我們可以創造出一個Layout，Layout是一個特殊的View，是模板的模板，在hbs中，hbs會尋找名為layout.hbs的這個模板，將這個模板作為Layout</p>\n<p>以下是一個例子: </p>\n<p>layout.hbs</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;<span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span>&lt;/title&gt;</div><div class=\"line\">        &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        <span class=\"template-variable\">&#123;&#123;&#123;body&#125;&#125;</span>&#125;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>welcome.hbs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這時你用下列程式碼渲染頁面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>處理順序是這樣的:</p>\n<ol>\n<li>傳入的內容和welcome.hbs做結合</li>\n<li>之後將welcome.hbs的內容放入layout.hbs的body中，同時傳入的內容一樣會與layout.hbs做結合</li>\n</ol>\n<p>最後顯示的html如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Pokemon Go is Fun !<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet'</span> <span class=\"attr\">href</span>=<span class=\"string\">'/stylesheets/style.css'</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你有多個Layout，那麼你只要在傳入的內容裡指定要使用哪一個Layout就可以了，像是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>, <span class=\"attr\">layout</span>: <span class=\"string\">'layout2.hbs'</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你不需要套入Layout，那麼就將layout的值設為null，像是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'Pokemon Go is Fun !'</span>, <span class=\"attr\">layout</span>: <span class=\"literal\">null</span>&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你想改變預設的Layout，那麼就更改view option的設定值，加入以下程式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.set(<span class=\"string\">'view options'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">layout</span>: layout2.hbs;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p>在不同的網頁上我們經常重複使用了許多相同的元件，如果將這些元件寫在每個檔案裡，不僅網頁內容變得更龐大、更難以維護，在元件的修改上也會變得十分麻煩，所以比較好的做法就是將它抽離，獨自形成一個模板，我們特別稱這種模板為”Partial”</p>\n<p>我們先建立一個partial檔案(檔案位子在views/partials/pokemonInfo.hbs):</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"popularPokemon\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> popularPokemon&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pokemon\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/</span></span><span class=\"template-variable\">&#123;&#123;imagePath&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>名字: <span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>屬性: <span class=\"template-variable\">&#123;&#123;type&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>外部連結: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;link&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來我們要註冊partial，目的是為了在view裡面帶入這個partial，一種方式是註冊單一個partial:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerPartial(<span class=\"string\">'pokemonInfo'</span>, fs.readFileSync(__dirname + <span class=\"string\">'/views/partials/pokemonInfo.hbs'</span>, <span class=\"string\">'utf-8'</span>));</div></pre></td></tr></table></figure>\n<p>第二種方式是一次註冊整個資料夾內所有的內容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerPartials(__dirname + <span class=\"string\">'/view/partials'</span>);</div></pre></td></tr></table></figure>\n<p>之後設定要傳入的內容，為了簡潔一點，我們用一個函式包裝:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPokemonInfo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">popularPokemon</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Tyranitar.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'班基拉斯'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Rock、Dark'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/248-tyranitar'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Dragonite.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'快龍'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Dragon、Fly'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/149-dragonite'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">imagePath</span>: <span class=\"string\">'Golem.jpg'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'隆隆岩'</span>,</div><div class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">'Rock、Ground'</span>,</div><div class=\"line\">                <span class=\"attr\">link</span>: <span class=\"string\">'https://pokemon.gameinfo.io/zh-tw/pokemon/76-golem'</span>\t</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以用如下的方式傳輸數據:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.locals = getPokemonInfo();</div><div class=\"line\">    res.render(<span class=\"string\">'welcome'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然後在welcome.hbs裡添加這個partial:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome! My Friends!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\"><span class=\"template-variable\">&#123;&#123;&gt; pokemonInfo&#125;&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>就大功告成了!<br>當然這種做法還稱不上是完美，原因是你每次需要這份partial時，都要傳一次pokemonInfo內容，我們換種寫法，讓所有的view都能使用這份pokemonInfo內容，用的方式是加入中介軟體:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    res.locals = getPokemonInfo();</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣就能為資料注入res.locals物件，而不用在每個路由處理程式裡都寫一次</p>\n<h3 id=\"Helper\"><a href=\"#Helper\" class=\"headerlink\" title=\"Helper\"></a>Helper</h3><p>Handlebars是一個弱邏輯的模板引擎，舉個例子，你在前面看到的 <code>{ { #if} }</code> ，後面是不能接判斷式的，像 <code>{ { #if type!=null} }</code> 和 <code>{ { #if type&amp;&amp;name} }</code> 都是不合法的，但如果你想要處理更複雜的邏輯該怎麼辦呢?這時你就需要helper的協助了。</p>\n<p>你可以想像helper是一個自訂義標籤，它可以在handlebars模板的任何地方，helper和partial一樣需要被事先的註冊，底下是一個簡單的helper:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerHelper(<span class=\"string\">'list'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, option</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> out = <span class=\"string\">\"&lt;/ul&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;context.length; i++) &#123;</div><div class=\"line\">        out = out + <span class=\"string\">\"&lt;li&gt;\"</span> + options.fn(context[i]) + <span class=\"string\">\"&lt;/li&gt;\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> out + <span class=\"string\">\"&lt;/ul&gt;\"</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在解釋以上語法之前，我們先來看看傳入的內容(context)是什麼:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    people: [</div><div class=\"line\">        &#123;firstName: 'Justin', lastName: 'Chien'&#125;,</div><div class=\"line\">        &#123;firstName: 'Jack', lastName: 'Lee'&#125;,</div><div class=\"line\">        &#123;firstName: 'Mandy', lastNmae: 'Wu'&#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一個參數 <code>list</code> 是這個自定義標籤的名字，第二個參數則傳入一個function，代表你想要做到的事，function的第一個參數傳入一段context，如果沒有設則是同於當前的context，第二個參數 <code>option</code> 有一個方法 <code>fn</code> ， 假設在你的list區塊中還有其他的模板，那麼 <code>option.fn()</code> 代表的就會是編譯過的那些模板，當你傳入一段context時，它就會回傳出相應的HTML，底下是一個實際應用的例子:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;&#123;#<span class=\"name\">list</span> people&#125;&#125;</span><span class=\"xml\"></span><span class=\"template-variable\">&#123;&#123;firstName&#125;&#125;</span><span class=\"xml\"> </span><span class=\"template-variable\">&#123;&#123;lastName&#125;&#125;</span><span class=\"xml\"></span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\">list</span>&#125;&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>嘗試理解一下，people代表現在的context已經被鎖定在people陣列中，而此時的option.fn()代表的是被編譯過的 <code>{ {firstName} } { {lastName} }</code> ，譬如將{firstName: ‘Justin’, lastName: ‘Chien’}傳入option.fn()，它就會回傳給你 <code>Chien Justin</code> ，所以最終的結果會是這樣:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Justin Chien<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Jack Lee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Mandy Wu<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>老實說前面看到的 <code>{ { #if} }</code> 、 <code>{ { #each} }</code> 都是helper，只是他們是內建的helper，其他內建的helper還有 <code>{ { #with} }</code> 、 <code>{ { #unless} }</code> 等等，可以在<a href=\"https://segmentfault.com/a/1190000000342636\" target=\"_blank\" rel=\"external\">此連結</a>中查看</p>\n<h2 id=\"前端模板\"><a href=\"#前端模板\" class=\"headerlink\" title=\"前端模板\"></a>前端模板</h2><p>在前端中一樣可以引入Handlebars，步驟是這樣的:  </p>\n<ol>\n<li><p>將Handlebars下載後放入靜態內容或直接使用CDN</p>\n</li>\n<li><p>寫一個模板</p>\n</li>\n<li><p>編譯模板</p>\n</li>\n<li><p>將內容(context)傳入編譯後的模板</p>\n</li>\n</ol>\n<p>為了方便理解，底下是一個簡單的例子，首先引入Handlebars:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.10/handlebars.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來寫一個模板:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-handlebars-template\"</span>&gt;</span><span class=\"undefined\"></span></span></div><div class=\"line\">    Hi! My name is <span class=\"template-variable\">&#123;&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\">&#125;.</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然後編譯它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compiledTemplate = Handlebars.compile($(<span class=\"string\">'#template'</span>).html());</div></pre></td></tr></table></figure>\n<p>最後將內容傳入編譯後的模板:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">var data = &#123;name: 'Kevin'&#125;;</div><div class=\"line\">$('#result').html(compiledTemplate(data));</div></pre></td></tr></table></figure>\n<p>當然你一樣可以在前端模板中使用partial、helper等特性，就像Handlebars用於後端時的那樣</p>\n<p>這篇文章主要講述一些Handlebars的基礎功能，在之後的文章中我們再來探討更多Handlebars可以做到的事</p>\n"},{"title":"Collection Method - Sort","date":"2017-06-27T13:45:57.000Z","author":"Justin","cover":"/images/contact-bg.jpg","_content":"\n## Function 描述\n\njava.util.Collection 提供了sort方法，對List進行排序\n\n> public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  \n\n由於List有索引，因此才能進行排序\n\nComparator則允許你以不同的方法對List進行排序\n\n## 實作細節\n\n想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  **java.lang.Comparable** 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:\n```Java\n\timport java.util.*;\n\n\tclass Time implements Comparable< Time> {\n\t\tprivate int hour;\n\t\tprivate int minute;\n\t\tprivate int second;\n\n\t\t//Constructor\n\t\tTime(int hour, int minute, int second) {\n\t\t\tthis.hour = hour;\n\t\t\tthis.minute = minute;\n\t\t\tthis.second = second;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Time other) {\n\t\t\tint hourDifference = this.hour - other.hour;\n\n\t\t\tif(hourDifference != 0)\n\t\t\t\treturn hourDifference;\n\n\t\t\tint minuteDifference = this.minute - other.minute;\n\n\t\t\tif(minuteDifference != 0)\n\t\t\t\treturn minuteDifference;\n\n\t\t\tint secondDifference = this.second - other.second;\n\n\t\t\treturn secondDifference;\t\t\t\n\t\t}\n\t}\n```\n\n若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a>b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b\n\n\n那另一個參數 **Comparator**是什麼呢?\n\nComparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:\n```Java\n\timport java.util.*;\n\n\tclass ReverseStringComparator implements Comparator< ReverseStringComparator> {\n\t\t@Override\n\t\tpublic int compare(String s1, String s2) {\n\t\t\treturn -s1.compareTo(s2);\n\t\t}\n\t}\n```\n需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣\n\n在以下的情況中，你必須使用到Comparator\n\n1.  不能修改原始碼(修改了就不是標準API了)\n\n2.  class被宣告為final，無法先繼承再做修改\n\n3.  想有不只一種排序的方法\n\n\n其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面\n\n## Further More\n\n1.  底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序\n\n2.  Collections裡有一個方法 **reverseOrder()** 會傳回一個Comparator，倒轉原來的排序方式\n\n3.  若被比較的物件沒有實作Comparable介面，則會拋出 **ClassCastException** 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯","source":"_posts/Collection-Method-Sort.md","raw":"---\ntitle: Collection Method - Sort\ndate: 2017-06-27 21:45:57\nauthor: Justin\ncover: /images/contact-bg.jpg\ntags:\ncategories: \n- Programming\n---\n\n## Function 描述\n\njava.util.Collection 提供了sort方法，對List進行排序\n\n> public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  \n\n由於List有索引，因此才能進行排序\n\nComparator則允許你以不同的方法對List進行排序\n\n## 實作細節\n\n想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  **java.lang.Comparable** 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:\n```Java\n\timport java.util.*;\n\n\tclass Time implements Comparable< Time> {\n\t\tprivate int hour;\n\t\tprivate int minute;\n\t\tprivate int second;\n\n\t\t//Constructor\n\t\tTime(int hour, int minute, int second) {\n\t\t\tthis.hour = hour;\n\t\t\tthis.minute = minute;\n\t\t\tthis.second = second;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Time other) {\n\t\t\tint hourDifference = this.hour - other.hour;\n\n\t\t\tif(hourDifference != 0)\n\t\t\t\treturn hourDifference;\n\n\t\t\tint minuteDifference = this.minute - other.minute;\n\n\t\t\tif(minuteDifference != 0)\n\t\t\t\treturn minuteDifference;\n\n\t\t\tint secondDifference = this.second - other.second;\n\n\t\t\treturn secondDifference;\t\t\t\n\t\t}\n\t}\n```\n\n若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a>b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b\n\n\n那另一個參數 **Comparator**是什麼呢?\n\nComparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:\n```Java\n\timport java.util.*;\n\n\tclass ReverseStringComparator implements Comparator< ReverseStringComparator> {\n\t\t@Override\n\t\tpublic int compare(String s1, String s2) {\n\t\t\treturn -s1.compareTo(s2);\n\t\t}\n\t}\n```\n需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣\n\n在以下的情況中，你必須使用到Comparator\n\n1.  不能修改原始碼(修改了就不是標準API了)\n\n2.  class被宣告為final，無法先繼承再做修改\n\n3.  想有不只一種排序的方法\n\n\n其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面\n\n## Further More\n\n1.  底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序\n\n2.  Collections裡有一個方法 **reverseOrder()** 會傳回一個Comparator，倒轉原來的排序方式\n\n3.  若被比較的物件沒有實作Comparable介面，則會拋出 **ClassCastException** 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯","slug":"Collection-Method-Sort","published":1,"updated":"2017-08-30T16:23:53.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7jwjw6z0002z4juuvkrr2cj","content":"<h2 id=\"Function-描述\"><a href=\"#Function-描述\" class=\"headerlink\" title=\"Function 描述\"></a>Function 描述</h2><p>java.util.Collection 提供了sort方法，對List進行排序</p>\n<blockquote>\n<p>public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  </p>\n</blockquote>\n<p>由於List有索引，因此才能進行排序</p>\n<p>Comparator則允許你以不同的方法對List進行排序</p>\n<h2 id=\"實作細節\"><a href=\"#實作細節\" class=\"headerlink\" title=\"實作細節\"></a>實作細節</h2><p>想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  <strong>java.lang.Comparable</strong> 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Time</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt; <span class=\"title\">Time</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hour;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> minute;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> second;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//Constructor</span></div><div class=\"line\">\tTime(<span class=\"keyword\">int</span> hour, <span class=\"keyword\">int</span> minute, <span class=\"keyword\">int</span> second) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.hour = hour;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.minute = minute;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.second = second;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Time other)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hourDifference = <span class=\"keyword\">this</span>.hour - other.hour;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hourDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> hourDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> minuteDifference = <span class=\"keyword\">this</span>.minute - other.minute;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(minuteDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> minuteDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> secondDifference = <span class=\"keyword\">this</span>.second - other.second;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> secondDifference;\t\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a&gt;b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b</p>\n<p>那另一個參數 <strong>Comparator</strong>是什麼呢?</p>\n<p>Comparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReverseStringComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt; <span class=\"title\">ReverseStringComparator</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -s1.compareTo(s2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣</p>\n<p>在以下的情況中，你必須使用到Comparator</p>\n<ol>\n<li><p>不能修改原始碼(修改了就不是標準API了)</p>\n</li>\n<li><p>class被宣告為final，無法先繼承再做修改</p>\n</li>\n<li><p>想有不只一種排序的方法</p>\n</li>\n</ol>\n<p>其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面</p>\n<h2 id=\"Further-More\"><a href=\"#Further-More\" class=\"headerlink\" title=\"Further More\"></a>Further More</h2><ol>\n<li><p>底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序</p>\n</li>\n<li><p>Collections裡有一個方法 <strong>reverseOrder()</strong> 會傳回一個Comparator，倒轉原來的排序方式</p>\n</li>\n<li><p>若被比較的物件沒有實作Comparable介面，則會拋出 <strong>ClassCastException</strong> 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Function-描述\"><a href=\"#Function-描述\" class=\"headerlink\" title=\"Function 描述\"></a>Function 描述</h2><p>java.util.Collection 提供了sort方法，對List進行排序</p>\n<blockquote>\n<p>public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  </p>\n</blockquote>\n<p>由於List有索引，因此才能進行排序</p>\n<p>Comparator則允許你以不同的方法對List進行排序</p>\n<h2 id=\"實作細節\"><a href=\"#實作細節\" class=\"headerlink\" title=\"實作細節\"></a>實作細節</h2><p>想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  <strong>java.lang.Comparable</strong> 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Time</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt; <span class=\"title\">Time</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hour;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> minute;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> second;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//Constructor</span></div><div class=\"line\">\tTime(<span class=\"keyword\">int</span> hour, <span class=\"keyword\">int</span> minute, <span class=\"keyword\">int</span> second) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.hour = hour;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.minute = minute;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.second = second;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Time other)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hourDifference = <span class=\"keyword\">this</span>.hour - other.hour;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hourDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> hourDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> minuteDifference = <span class=\"keyword\">this</span>.minute - other.minute;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(minuteDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> minuteDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> secondDifference = <span class=\"keyword\">this</span>.second - other.second;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> secondDifference;\t\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a&gt;b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b</p>\n<p>那另一個參數 <strong>Comparator</strong>是什麼呢?</p>\n<p>Comparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReverseStringComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt; <span class=\"title\">ReverseStringComparator</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -s1.compareTo(s2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣</p>\n<p>在以下的情況中，你必須使用到Comparator</p>\n<ol>\n<li><p>不能修改原始碼(修改了就不是標準API了)</p>\n</li>\n<li><p>class被宣告為final，無法先繼承再做修改</p>\n</li>\n<li><p>想有不只一種排序的方法</p>\n</li>\n</ol>\n<p>其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面</p>\n<h2 id=\"Further-More\"><a href=\"#Further-More\" class=\"headerlink\" title=\"Further More\"></a>Further More</h2><ol>\n<li><p>底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序</p>\n</li>\n<li><p>Collections裡有一個方法 <strong>reverseOrder()</strong> 會傳回一個Comparator，倒轉原來的排序方式</p>\n</li>\n<li><p>若被比較的物件沒有實作Comparable介面，則會拋出 <strong>ClassCastException</strong> 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯</p>\n</li>\n</ol>\n"},{"title":"Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介","author":"Justin","cover":"/images/home-bg.jpg","_content":"## 模板引擎是什麼?\n\n有了模板引擎的協助，你可以將模板與資料分開撰寫，之後再透過模板引擎將兩者結合在一起。假設在沒有模板引擎的情況下，想要將ajax傳回來的資料填進HTML框架中，你需要這樣寫:\n\n```javascript\n$(function () {\n    ​var shoesData = [{name:\"Nike\", price:199.00 }, {name:\"Loafers\", price:59.00 }, {name:\"Wing Tip\", price:259.00 }];\n\t​\n    ​function updateAllShoes(shoes)  {\n        var theHTMLListOfShoes = \"\";\n\t​\n        shoes.forEach (function (eachShoe)  {\n            theHTMLListOfShoes += '<li class=\"shoes\">' + '<a href=\"/' + eachShoe.name.toLowerCase() + '\">' + eachShoe.name + ' -- Price: ' + eachShoe.price + '</a></li>';\n        });\n        return theHTMLListOfShoes;\n    }\n\n    $(\".shoesNav\").append (updateAllShoes(shoesData));\n});\n```\n\n這樣寫有一個最大壞處就是HTML程式碼和javascript程式碼結合在一起，當這樣子的程式碼越加龐大，你會越難看出生成出的HTML會長什麼樣子，最終導致難以維護，但若你用了模板引擎，寫法會變為這樣:\n\n```handlebars\n<script id=\"shoe-template\" type=\"x-handlebars-template\">​\n    {{#each this}}\n        <li class=\"shoes\"><a href=\"/{{name}}\">{{name}} -- Price: {{price}} </a></li>​\n    {{/each}}\n</script>\n```\n\n```javascript\n$(function  () {\n    var shoesData = [{name:\"Nike\", price:199.00 }, {name:\"Loafers\", price:59.00 }, {name:\"Wing Tip\", price:259.00 }];\n    \n    var theTemplate = Handlebars.compile (theTemplateScript); \n    $(\".shoesNav\").append (theTemplate(shoesData)); \n});\n```\n\n可以很清楚的看到模板與資料是分開的，這讓人很容易地看出生成出的HTML程式碼的樣子\n\n## 為什麼要使用javaScript模板引擎?\n\n- 如果你使用了javascript框架，如Backone.js, Ember.js，這些框架多半依賴於javascript模板引擎\n\n- 如上述的例子，javaScript模板引擎可以使HTML和javascript程式碼分離\n\n## 為什麼要使用Handlebars?\n\nHandlebars是Mustache的擴充，他有以下的好處\n\n- Handlebars是**弱邏輯**的模板引擎，意思是在你的模板內將不會有太多的邏輯。使用模板引擎的目的就是為了使HTML程式碼乾淨、清楚、好維護，所以寫於模板中的邏輯自然愈少愈好\n\n- 在許多的javascript框架中你都能使用Handlebars.js，像是Meteor.js、Ember.js、Backbone.js，所以學習Handlebars是很有價值的\n\n## Handlebars是怎麼運作的?\n\nHandlebars是一個用javascript寫成的編譯器，它能夠接受一段包含HTML和Handlebars語法的文字，並將她轉換為一個javascript函式。\n\n這個特別的javascript函式會接受一串資料(在此特別稱為**Context**)，將相對應的資料塞進原先的HTML，之後回傳一段包含資料的HTML。在之後的文章中會介紹Handlebars的語法，及其他重要的特性。\n","source":"_posts/Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介.md","raw":"---\ntitle: Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介\nauthor: Justin\ncover: /images/home-bg.jpg\ntags:\ncategories: \n- Programming\n---\n## 模板引擎是什麼?\n\n有了模板引擎的協助，你可以將模板與資料分開撰寫，之後再透過模板引擎將兩者結合在一起。假設在沒有模板引擎的情況下，想要將ajax傳回來的資料填進HTML框架中，你需要這樣寫:\n\n```javascript\n$(function () {\n    ​var shoesData = [{name:\"Nike\", price:199.00 }, {name:\"Loafers\", price:59.00 }, {name:\"Wing Tip\", price:259.00 }];\n\t​\n    ​function updateAllShoes(shoes)  {\n        var theHTMLListOfShoes = \"\";\n\t​\n        shoes.forEach (function (eachShoe)  {\n            theHTMLListOfShoes += '<li class=\"shoes\">' + '<a href=\"/' + eachShoe.name.toLowerCase() + '\">' + eachShoe.name + ' -- Price: ' + eachShoe.price + '</a></li>';\n        });\n        return theHTMLListOfShoes;\n    }\n\n    $(\".shoesNav\").append (updateAllShoes(shoesData));\n});\n```\n\n這樣寫有一個最大壞處就是HTML程式碼和javascript程式碼結合在一起，當這樣子的程式碼越加龐大，你會越難看出生成出的HTML會長什麼樣子，最終導致難以維護，但若你用了模板引擎，寫法會變為這樣:\n\n```handlebars\n<script id=\"shoe-template\" type=\"x-handlebars-template\">​\n    {{#each this}}\n        <li class=\"shoes\"><a href=\"/{{name}}\">{{name}} -- Price: {{price}} </a></li>​\n    {{/each}}\n</script>\n```\n\n```javascript\n$(function  () {\n    var shoesData = [{name:\"Nike\", price:199.00 }, {name:\"Loafers\", price:59.00 }, {name:\"Wing Tip\", price:259.00 }];\n    \n    var theTemplate = Handlebars.compile (theTemplateScript); \n    $(\".shoesNav\").append (theTemplate(shoesData)); \n});\n```\n\n可以很清楚的看到模板與資料是分開的，這讓人很容易地看出生成出的HTML程式碼的樣子\n\n## 為什麼要使用javaScript模板引擎?\n\n- 如果你使用了javascript框架，如Backone.js, Ember.js，這些框架多半依賴於javascript模板引擎\n\n- 如上述的例子，javaScript模板引擎可以使HTML和javascript程式碼分離\n\n## 為什麼要使用Handlebars?\n\nHandlebars是Mustache的擴充，他有以下的好處\n\n- Handlebars是**弱邏輯**的模板引擎，意思是在你的模板內將不會有太多的邏輯。使用模板引擎的目的就是為了使HTML程式碼乾淨、清楚、好維護，所以寫於模板中的邏輯自然愈少愈好\n\n- 在許多的javascript框架中你都能使用Handlebars.js，像是Meteor.js、Ember.js、Backbone.js，所以學習Handlebars是很有價值的\n\n## Handlebars是怎麼運作的?\n\nHandlebars是一個用javascript寫成的編譯器，它能夠接受一段包含HTML和Handlebars語法的文字，並將她轉換為一個javascript函式。\n\n這個特別的javascript函式會接受一串資料(在此特別稱為**Context**)，將相對應的資料塞進原先的HTML，之後回傳一段包含資料的HTML。在之後的文章中會介紹Handlebars的語法，及其他重要的特性。\n","slug":"Handlebars模板引擎(1) - 關於模板引擎和Handlebars簡介","published":1,"date":"2017-09-11T03:03:20.292Z","updated":"2017-09-11T03:13:16.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7jwjw7a0004z4ju5zvx3rk1","content":"<h2 id=\"模板引擎是什麼\"><a href=\"#模板引擎是什麼\" class=\"headerlink\" title=\"模板引擎是什麼?\"></a>模板引擎是什麼?</h2><p>有了模板引擎的協助，你可以將模板與資料分開撰寫，之後再透過模板引擎將兩者結合在一起。假設在沒有模板引擎的情況下，想要將ajax傳回來的資料填進HTML框架中，你需要這樣寫:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ​<span class=\"keyword\">var</span> shoesData = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nike\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">199.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Loafers\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">59.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Wing Tip\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">259.00</span> &#125;];</div><div class=\"line\">\t​</div><div class=\"line\">    ​<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateAllShoes</span>(<span class=\"params\">shoes</span>)  </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> theHTMLListOfShoes = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t​</div><div class=\"line\">        shoes.forEach (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eachShoe</span>)  </span>&#123;</div><div class=\"line\">            theHTMLListOfShoes += <span class=\"string\">'&lt;li class=\"shoes\"&gt;'</span> + <span class=\"string\">'&lt;a href=\"/'</span> + eachShoe.name.toLowerCase() + <span class=\"string\">'\"&gt;'</span> + eachShoe.name + <span class=\"string\">' -- Price: '</span> + eachShoe.price + <span class=\"string\">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> theHTMLListOfShoes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\".shoesNav\"</span>).append (updateAllShoes(shoesData));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣寫有一個最大壞處就是HTML程式碼和javascript程式碼結合在一起，當這樣子的程式碼越加龐大，你會越難看出生成出的HTML會長什麼樣子，最終導致難以維護，但若你用了模板引擎，寫法會變為這樣:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"shoe-template\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"x-handlebars-template\"</span>&gt;</span><span class=\"undefined\">​</span></span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> this&#125;&#125;</span><span class=\"xml\"><span class=\"javascript\"></span></span></div><div class=\"line\">        &lt;li <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"shoes\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/</span></span></span><span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\">\"&gt;</span></span><span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\"> -- Price: </span></span><span class=\"template-variable\">&#123;&#123;price&#125;&#125;</span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>​</span></span></span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\"></span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>  (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> shoesData = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nike\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">199.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Loafers\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">59.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Wing Tip\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">259.00</span> &#125;];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> theTemplate = Handlebars.compile (theTemplateScript); </div><div class=\"line\">    $(<span class=\"string\">\".shoesNav\"</span>).append (theTemplate(shoesData)); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>可以很清楚的看到模板與資料是分開的，這讓人很容易地看出生成出的HTML程式碼的樣子</p>\n<h2 id=\"為什麼要使用javaScript模板引擎\"><a href=\"#為什麼要使用javaScript模板引擎\" class=\"headerlink\" title=\"為什麼要使用javaScript模板引擎?\"></a>為什麼要使用javaScript模板引擎?</h2><ul>\n<li><p>如果你使用了javascript框架，如Backone.js, Ember.js，這些框架多半依賴於javascript模板引擎</p>\n</li>\n<li><p>如上述的例子，javaScript模板引擎可以使HTML和javascript程式碼分離</p>\n</li>\n</ul>\n<h2 id=\"為什麼要使用Handlebars\"><a href=\"#為什麼要使用Handlebars\" class=\"headerlink\" title=\"為什麼要使用Handlebars?\"></a>為什麼要使用Handlebars?</h2><p>Handlebars是Mustache的擴充，他有以下的好處</p>\n<ul>\n<li><p>Handlebars是<strong>弱邏輯</strong>的模板引擎，意思是在你的模板內將不會有太多的邏輯。使用模板引擎的目的就是為了使HTML程式碼乾淨、清楚、好維護，所以寫於模板中的邏輯自然愈少愈好</p>\n</li>\n<li><p>在許多的javascript框架中你都能使用Handlebars.js，像是Meteor.js、Ember.js、Backbone.js，所以學習Handlebars是很有價值的</p>\n</li>\n</ul>\n<h2 id=\"Handlebars是怎麼運作的\"><a href=\"#Handlebars是怎麼運作的\" class=\"headerlink\" title=\"Handlebars是怎麼運作的?\"></a>Handlebars是怎麼運作的?</h2><p>Handlebars是一個用javascript寫成的編譯器，它能夠接受一段包含HTML和Handlebars語法的文字，並將她轉換為一個javascript函式。</p>\n<p>這個特別的javascript函式會接受一串資料(在此特別稱為<strong>Context</strong>)，將相對應的資料塞進原先的HTML，之後回傳一段包含資料的HTML。在之後的文章中會介紹Handlebars的語法，及其他重要的特性。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模板引擎是什麼\"><a href=\"#模板引擎是什麼\" class=\"headerlink\" title=\"模板引擎是什麼?\"></a>模板引擎是什麼?</h2><p>有了模板引擎的協助，你可以將模板與資料分開撰寫，之後再透過模板引擎將兩者結合在一起。假設在沒有模板引擎的情況下，想要將ajax傳回來的資料填進HTML框架中，你需要這樣寫:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ​<span class=\"keyword\">var</span> shoesData = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nike\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">199.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Loafers\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">59.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Wing Tip\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">259.00</span> &#125;];</div><div class=\"line\">\t​</div><div class=\"line\">    ​<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateAllShoes</span>(<span class=\"params\">shoes</span>)  </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> theHTMLListOfShoes = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t​</div><div class=\"line\">        shoes.forEach (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eachShoe</span>)  </span>&#123;</div><div class=\"line\">            theHTMLListOfShoes += <span class=\"string\">'&lt;li class=\"shoes\"&gt;'</span> + <span class=\"string\">'&lt;a href=\"/'</span> + eachShoe.name.toLowerCase() + <span class=\"string\">'\"&gt;'</span> + eachShoe.name + <span class=\"string\">' -- Price: '</span> + eachShoe.price + <span class=\"string\">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> theHTMLListOfShoes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\".shoesNav\"</span>).append (updateAllShoes(shoesData));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣寫有一個最大壞處就是HTML程式碼和javascript程式碼結合在一起，當這樣子的程式碼越加龐大，你會越難看出生成出的HTML會長什麼樣子，最終導致難以維護，但若你用了模板引擎，寫法會變為這樣:</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"shoe-template\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"x-handlebars-template\"</span>&gt;</span><span class=\"undefined\">​</span></span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;#<span class=\"name\"><span class=\"builtin-name\">each</span></span> this&#125;&#125;</span><span class=\"xml\"><span class=\"javascript\"></span></span></div><div class=\"line\">        &lt;li <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"shoes\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/</span></span></span><span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\">\"&gt;</span></span><span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\"> -- Price: </span></span><span class=\"template-variable\">&#123;&#123;price&#125;&#125;</span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>​</span></span></span></div><div class=\"line\">    <span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span><span class=\"xml\"><span class=\"undefined\"></span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>  (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> shoesData = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nike\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">199.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Loafers\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">59.00</span> &#125;, &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Wing Tip\"</span>, <span class=\"attr\">price</span>:<span class=\"number\">259.00</span> &#125;];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> theTemplate = Handlebars.compile (theTemplateScript); </div><div class=\"line\">    $(<span class=\"string\">\".shoesNav\"</span>).append (theTemplate(shoesData)); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>可以很清楚的看到模板與資料是分開的，這讓人很容易地看出生成出的HTML程式碼的樣子</p>\n<h2 id=\"為什麼要使用javaScript模板引擎\"><a href=\"#為什麼要使用javaScript模板引擎\" class=\"headerlink\" title=\"為什麼要使用javaScript模板引擎?\"></a>為什麼要使用javaScript模板引擎?</h2><ul>\n<li><p>如果你使用了javascript框架，如Backone.js, Ember.js，這些框架多半依賴於javascript模板引擎</p>\n</li>\n<li><p>如上述的例子，javaScript模板引擎可以使HTML和javascript程式碼分離</p>\n</li>\n</ul>\n<h2 id=\"為什麼要使用Handlebars\"><a href=\"#為什麼要使用Handlebars\" class=\"headerlink\" title=\"為什麼要使用Handlebars?\"></a>為什麼要使用Handlebars?</h2><p>Handlebars是Mustache的擴充，他有以下的好處</p>\n<ul>\n<li><p>Handlebars是<strong>弱邏輯</strong>的模板引擎，意思是在你的模板內將不會有太多的邏輯。使用模板引擎的目的就是為了使HTML程式碼乾淨、清楚、好維護，所以寫於模板中的邏輯自然愈少愈好</p>\n</li>\n<li><p>在許多的javascript框架中你都能使用Handlebars.js，像是Meteor.js、Ember.js、Backbone.js，所以學習Handlebars是很有價值的</p>\n</li>\n</ul>\n<h2 id=\"Handlebars是怎麼運作的\"><a href=\"#Handlebars是怎麼運作的\" class=\"headerlink\" title=\"Handlebars是怎麼運作的?\"></a>Handlebars是怎麼運作的?</h2><p>Handlebars是一個用javascript寫成的編譯器，它能夠接受一段包含HTML和Handlebars語法的文字，並將她轉換為一個javascript函式。</p>\n<p>這個特別的javascript函式會接受一串資料(在此特別稱為<strong>Context</strong>)，將相對應的資料塞進原先的HTML，之後回傳一段包含資料的HTML。在之後的文章中會介紹Handlebars的語法，及其他重要的特性。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj7jwjw6k0000z4juhcv0bw5l","category_id":"cj7jwjw750003z4juzb1kr11v","_id":"cj7jwjw7h0006z4jumtra0c74"},{"post_id":"cj7jwjw6z0002z4juuvkrr2cj","category_id":"cj7jwjw750003z4juzb1kr11v","_id":"cj7jwjw7h0008z4juk7k2ec2p"},{"post_id":"cj7jwjw7a0004z4ju5zvx3rk1","category_id":"cj7jwjw750003z4juzb1kr11v","_id":"cj7jwjw7h0009z4jusjyuri2o"}],"PostTag":[],"Tag":[]}}