{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/happy.jpg","path":"images/happy.jpg","modified":1,"renderable":0},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/images/about-bg.jpg","path":"images/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/images/home-bg.jpg","path":"images/home-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/images/contact-bg.jpg","path":"images/contact-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/clean-blog/LICENSE","hash":"34ac5e147727699d1bbc346b014f2e0bdfbb0947","modified":1502933701589},{"_id":"themes/clean-blog/README.md","hash":"779e999931169acdbabf43ab0e70471e8631583a","modified":1502933701590},{"_id":"themes/clean-blog/_config.yml","hash":"a93495a986c864bf8840348f21dfe3da766ce439","modified":1502939175995},{"_id":"source/_posts/Collection-Method-Sort.md","hash":"8c10a72a35bdd5b5d383939c45733eaefb17f7e8","modified":1502938957902},{"_id":"source/_posts/Markdown初探.md","hash":"1ce3ccf6b6a6599f6df0a88e693751f17c4ee575","modified":1502937690608},{"_id":"source/categories/index.md","hash":"056224078f21e49cf4c6b4e634d0d8f795fca1e2","modified":1498581305364},{"_id":"themes/clean-blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1502933701556},{"_id":"themes/clean-blog/.git/config","hash":"17183e43f496f3a7e6bd9c1be4bd26c2a21706fc","modified":1502933701565},{"_id":"themes/clean-blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1502933679225},{"_id":"themes/clean-blog/.git/index","hash":"a9a47929579f6dc2c7e8e85a42d7a9e9ef593cdd","modified":1502933701640},{"_id":"themes/clean-blog/.git/packed-refs","hash":"78749f2f1de403b00552d862f076d37586b9b819","modified":1502933701547},{"_id":"themes/clean-blog/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1502933701592},{"_id":"themes/clean-blog/languages/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1502933701593},{"_id":"themes/clean-blog/languages/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1502933701592},{"_id":"themes/clean-blog/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1502933701594},{"_id":"themes/clean-blog/languages/fr.yml","hash":"10e3529b8492d7a7601d5b35b44d8fc9e8ea8d1b","modified":1502933701595},{"_id":"themes/clean-blog/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1502933701595},{"_id":"themes/clean-blog/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1502933701596},{"_id":"themes/clean-blog/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1502933701598},{"_id":"themes/clean-blog/languages/pt.yml","hash":"6a31d548092af8af9f25d859063b0589c23ce13a","modified":1502933701597},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1502933701600},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1502933701599},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"c3aa4a76ee8b59b0e12ddbe951a9852176058eac","modified":1502933701616},{"_id":"themes/clean-blog/layout/index.ejs","hash":"7dfdd9347f14b782d305a70f9ddb696ee1bb3864","modified":1502933701617},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"acc791dc4346c135ce4cac3cdeba6f96708115e5","modified":1502933701618},{"_id":"themes/clean-blog/layout/page.ejs","hash":"b585761947e289f0e37380780cfdebee0674c378","modified":1502933701618},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1502933701619},{"_id":"source/images/happy.jpg","hash":"80967c65d1dc9e743df528b94764e6bbb1cc32c8","modified":1498451124870},{"_id":"themes/clean-blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1502933679228},{"_id":"themes/clean-blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1502933679230},{"_id":"themes/clean-blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1502933679231},{"_id":"themes/clean-blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1502933679233},{"_id":"themes/clean-blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1502933679234},{"_id":"themes/clean-blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1502933679236},{"_id":"themes/clean-blog/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1502933679238},{"_id":"themes/clean-blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1502933679240},{"_id":"themes/clean-blog/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1502933679242},{"_id":"themes/clean-blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1502933679244},{"_id":"themes/clean-blog/.git/logs/HEAD","hash":"a32668497f68b18749dd5de6dc8a8c041679e9dd","modified":1502933701560},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"cf700a1c1c62b17d35a8f7500bf1a32d9bc6ab6a","modified":1502933701623},{"_id":"themes/clean-blog/source/css/article.styl","hash":"768418ecaa2ff17f6fa81d72096627e05579fe93","modified":1502933701621},{"_id":"themes/clean-blog/source/css/base.styl","hash":"10a3579607a088a13eba8fa6dd66ce348eb56ac7","modified":1502933701622},{"_id":"themes/clean-blog/source/css/style.styl","hash":"7200d572751c1f5888b3d0df25bf503a3f31ca2d","modified":1502933701624},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"06e16f64020cbddf2c2c49ef45f940141a1b2ada","modified":1502933701625},{"_id":"themes/clean-blog/source/images/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1502933701627},{"_id":"themes/clean-blog/source/images/favicon.ico","hash":"63750d8cd91c2ec67a689edb42f6e9e3904de344","modified":1502908160000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"f199b6e0039a7e9f840b8fbb9971fbd673ba5ce3","modified":1502933701602},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"b494e4a50f63d66e545da449af18a7198a057bd6","modified":1502933701604},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"75b9b24c226eda4884752a868177b590d3e8b06f","modified":1502933701603},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"b71cc571f43127bc0307557a201b99e7eb015fc7","modified":1502933701605},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"ad112adf312337c60d436fdd127e948fe81b3dd1","modified":1502933701606},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"12524df0c1ce5136a8f88cea2fe550f9e1b47b19","modified":1502933701607},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"5cafed11b6cfbf22e83674676c0edc6c4420cc0d","modified":1502933701608},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"8616d6fcb03ec41ea60e446cfb9273a5b8c83048","modified":1502933701609},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"15e9562d0f6146e25e22856693d1312cd3ade4af","modified":1502933701610},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1502933701611},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"09a38335f50ef6b108ec7b2ce0f54b4289e183c9","modified":1502933701612},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"3c51a2a2f950ab2ca80f10d3d3941d5d8cd08ec7","modified":1502933701613},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1502933701614},{"_id":"themes/clean-blog/layout/_partial/tag-category-index.ejs","hash":"008b4ed0b6fd6dc81bc0655ccc46e43eb310706b","modified":1502933701615},{"_id":"themes/clean-blog/.git/objects/pack/pack-757edf654c4d05aabc1264d961264199285815c4.idx","hash":"16b5bb5446bd5c3f76779f9e08cba6508430f66b","modified":1502933701426},{"_id":"themes/clean-blog/.git/refs/heads/master","hash":"0f3b4e362de29ccd7fa4b5983e9a0ea546623577","modified":1502933701558},{"_id":"themes/clean-blog/source/images/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1502933701639},{"_id":"themes/clean-blog/.git/logs/refs/heads/master","hash":"a32668497f68b18749dd5de6dc8a8c041679e9dd","modified":1502933701560},{"_id":"themes/clean-blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1502933701554},{"_id":"themes/clean-blog/source/images/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1502933701635},{"_id":"themes/clean-blog/.git/logs/refs/remotes/origin/HEAD","hash":"a32668497f68b18749dd5de6dc8a8c041679e9dd","modified":1502933701554},{"_id":"themes/clean-blog/.git/objects/pack/pack-757edf654c4d05aabc1264d961264199285815c4.pack","hash":"d2f95644371a3f3da6caa34077f234252b0aaa86","modified":1502933701428}],"Category":[{"name":"Programming","_id":"cj6fwtyio0003lojuprtziin7"},{"name":"Tool","_id":"cj6fwtyir0004loju4rzs3wfo"}],"Data":[],"Page":[{"title":"分類","date":"2017-06-27T14:07:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2017-06-27 22:07:23\ntype: \"categories\"\n---\n","updated":"2017-06-27T16:35:05.364Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj6fwtyih0001lojuy9x6tziw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Collection Method - Sort","date":"2017-06-27T13:45:57.000Z","author":"Justin","cover":"/images/contact-bg.jpg","_content":"\n### Function 描述\n\njava.util.Collection 提供了sort方法，對List進行排序\n\n> public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  \n\n由於List有索引，因此才能進行排序\n\nComparator則允許你以不同的方法對List進行排序\n\n### 實作細節\n\n想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  **java.lang.Comparable** 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:\n```Java\n\timport java.util.*;\n\n\tclass Time implements Comparable< Time> {\n\t\tprivate int hour;\n\t\tprivate int minute;\n\t\tprivate int second;\n\n\t\t//Constructor\n\t\tTime(int hour, int minute, int second) {\n\t\t\tthis.hour = hour;\n\t\t\tthis.minute = minute;\n\t\t\tthis.second = second;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Time other) {\n\t\t\tint hourDifference = this.hour - other.hour;\n\n\t\t\tif(hourDifference != 0)\n\t\t\t\treturn hourDifference;\n\n\t\t\tint minuteDifference = this.minute - other.minute;\n\n\t\t\tif(minuteDifference != 0)\n\t\t\t\treturn minuteDifference;\n\n\t\t\tint secondDifference = this.second - other.second;\n\n\t\t\treturn secondDifference;\t\t\t\n\t\t}\n\t}\n```\n\n若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a>b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b\n\n\n那另一個參數 **Comparator**是什麼呢?\n\nComparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:\n```Java\n\timport java.util.*;\n\n\tclass ReverseStringComparator implements Comparator< ReverseStringComparator> {\n\t\t@Override\n\t\tpublic int compare(String s1, String s2) {\n\t\t\treturn -s1.compareTo(s2);\n\t\t}\n\t}\n```\n需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣\n\n在以下的情況中，你必須使用到Comparator\n\n1.  不能修改原始碼(修改了就不是標準API了)\n\n2.  class被宣告為final，無法先繼承再做修改\n\n3.  想有不只一種排序的方法\n\n\n其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面\n\n### Further More\n\n1.  底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序\n\n2.  Collections裡有一個方法 **reverseOrder()** 會傳回一個Comparator，倒轉原來的排序方式\n\n3.  若被比較的物件沒有實作Comparable介面，則會拋出 **ClassCastException** 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯","source":"_posts/Collection-Method-Sort.md","raw":"---\ntitle: Collection Method - Sort\ndate: 2017-06-27 21:45:57\nauthor: Justin\ncover: /images/contact-bg.jpg\ntags:\ncategories: \n- Programming\n---\n\n### Function 描述\n\njava.util.Collection 提供了sort方法，對List進行排序\n\n> public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  \n\n由於List有索引，因此才能進行排序\n\nComparator則允許你以不同的方法對List進行排序\n\n### 實作細節\n\n想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  **java.lang.Comparable** 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:\n```Java\n\timport java.util.*;\n\n\tclass Time implements Comparable< Time> {\n\t\tprivate int hour;\n\t\tprivate int minute;\n\t\tprivate int second;\n\n\t\t//Constructor\n\t\tTime(int hour, int minute, int second) {\n\t\t\tthis.hour = hour;\n\t\t\tthis.minute = minute;\n\t\t\tthis.second = second;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(Time other) {\n\t\t\tint hourDifference = this.hour - other.hour;\n\n\t\t\tif(hourDifference != 0)\n\t\t\t\treturn hourDifference;\n\n\t\t\tint minuteDifference = this.minute - other.minute;\n\n\t\t\tif(minuteDifference != 0)\n\t\t\t\treturn minuteDifference;\n\n\t\t\tint secondDifference = this.second - other.second;\n\n\t\t\treturn secondDifference;\t\t\t\n\t\t}\n\t}\n```\n\n若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a>b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b\n\n\n那另一個參數 **Comparator**是什麼呢?\n\nComparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:\n```Java\n\timport java.util.*;\n\n\tclass ReverseStringComparator implements Comparator< ReverseStringComparator> {\n\t\t@Override\n\t\tpublic int compare(String s1, String s2) {\n\t\t\treturn -s1.compareTo(s2);\n\t\t}\n\t}\n```\n需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣\n\n在以下的情況中，你必須使用到Comparator\n\n1.  不能修改原始碼(修改了就不是標準API了)\n\n2.  class被宣告為final，無法先繼承再做修改\n\n3.  想有不只一種排序的方法\n\n\n其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面\n\n### Further More\n\n1.  底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序\n\n2.  Collections裡有一個方法 **reverseOrder()** 會傳回一個Comparator，倒轉原來的排序方式\n\n3.  若被比較的物件沒有實作Comparable介面，則會拋出 **ClassCastException** 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯","slug":"Collection-Method-Sort","published":1,"updated":"2017-08-17T03:02:37.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6fwtyia0000lojuo70lbjfc","content":"<h3 id=\"Function-描述\"><a href=\"#Function-描述\" class=\"headerlink\" title=\"Function 描述\"></a>Function 描述</h3><p>java.util.Collection 提供了sort方法，對List進行排序</p>\n<blockquote>\n<p>public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  </p>\n</blockquote>\n<p>由於List有索引，因此才能進行排序</p>\n<p>Comparator則允許你以不同的方法對List進行排序</p>\n<h3 id=\"實作細節\"><a href=\"#實作細節\" class=\"headerlink\" title=\"實作細節\"></a>實作細節</h3><p>想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  <strong>java.lang.Comparable</strong> 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Time</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt; <span class=\"title\">Time</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hour;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> minute;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> second;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//Constructor</span></div><div class=\"line\">\tTime(<span class=\"keyword\">int</span> hour, <span class=\"keyword\">int</span> minute, <span class=\"keyword\">int</span> second) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.hour = hour;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.minute = minute;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.second = second;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Time other)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hourDifference = <span class=\"keyword\">this</span>.hour - other.hour;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hourDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> hourDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> minuteDifference = <span class=\"keyword\">this</span>.minute - other.minute;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(minuteDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> minuteDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> secondDifference = <span class=\"keyword\">this</span>.second - other.second;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> secondDifference;\t\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a&gt;b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b</p>\n<p>那另一個參數 <strong>Comparator</strong>是什麼呢?</p>\n<p>Comparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReverseStringComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt; <span class=\"title\">ReverseStringComparator</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -s1.compareTo(s2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣</p>\n<p>在以下的情況中，你必須使用到Comparator</p>\n<ol>\n<li><p>不能修改原始碼(修改了就不是標準API了)</p>\n</li>\n<li><p>class被宣告為final，無法先繼承再做修改</p>\n</li>\n<li><p>想有不只一種排序的方法</p>\n</li>\n</ol>\n<p>其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面</p>\n<h3 id=\"Further-More\"><a href=\"#Further-More\" class=\"headerlink\" title=\"Further More\"></a>Further More</h3><ol>\n<li><p>底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序</p>\n</li>\n<li><p>Collections裡有一個方法 <strong>reverseOrder()</strong> 會傳回一個Comparator，倒轉原來的排序方式</p>\n</li>\n<li><p>若被比較的物件沒有實作Comparable介面，則會拋出 <strong>ClassCastException</strong> 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Function-描述\"><a href=\"#Function-描述\" class=\"headerlink\" title=\"Function 描述\"></a>Function 描述</h3><p>java.util.Collection 提供了sort方法，對List進行排序</p>\n<blockquote>\n<p>public static &lt; T&gt; void sort(List&lt; T&gt; list, Comparator&lt; ? super T&gt; c)  </p>\n</blockquote>\n<p>由於List有索引，因此才能進行排序</p>\n<p>Comparator則允許你以不同的方法對List進行排序</p>\n<h3 id=\"實作細節\"><a href=\"#實作細節\" class=\"headerlink\" title=\"實作細節\"></a>實作細節</h3><p>想對一個物件進行排序，必須先予他一個排序的規則，而方法就是使被排序的物件實作  <strong>java.lang.Comparable</strong> 介面，且實作compareTo()方法，這個方法必須傳入被比較的物件，然後傳回大於0、等於0、小於0的數，以下是一個範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Time</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt; <span class=\"title\">Time</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hour;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> minute;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> second;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//Constructor</span></div><div class=\"line\">\tTime(<span class=\"keyword\">int</span> hour, <span class=\"keyword\">int</span> minute, <span class=\"keyword\">int</span> second) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.hour = hour;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.minute = minute;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.second = second;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Time other)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hourDifference = <span class=\"keyword\">this</span>.hour - other.hour;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hourDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> hourDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> minuteDifference = <span class=\"keyword\">this</span>.minute - other.minute;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(minuteDifference != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> minuteDifference;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> secondDifference = <span class=\"keyword\">this</span>.second - other.second;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> secondDifference;\t\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若是a.compareTo(b)這樣的一個比較，則傳回值大於0，表示a&gt;b;傳回值小於0，表示a&lt; b;傳回值等於0，表示a=b</p>\n<p>那另一個參數 <strong>Comparator</strong>是什麼呢?</p>\n<p>Comparator是指實作了java.util.Comparator介面的物件，是一個可加可不加的parameter，若沒有加，則值視為null，代表依原來預設的規則進行排序( compareTo() )，若有加，則改依Comparator的規則進行排序，以下是範例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReverseStringComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt; <span class=\"title\">ReverseStringComparator</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -s1.compareTo(s2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是必須要實作compare()方法，這個方法將會取代原本的比較方式，傳回值一樣是大於0、小於0或等於0，意義也都一樣</p>\n<p>在以下的情況中，你必須使用到Comparator</p>\n<ol>\n<li><p>不能修改原始碼(修改了就不是標準API了)</p>\n</li>\n<li><p>class被宣告為final，無法先繼承再做修改</p>\n</li>\n<li><p>想有不只一種排序的方法</p>\n</li>\n</ol>\n<p>其實，String, Integer都能直接用sort()方法進行排序，最根本的原因就是他們已經實作了Comparable介面</p>\n<h3 id=\"Further-More\"><a href=\"#Further-More\" class=\"headerlink\" title=\"Further More\"></a>Further More</h3><ol>\n<li><p>底層的排序實現是Merge Sort，所需時間複雜度是O( nlog(n) )，且是一個stable的排序</p>\n</li>\n<li><p>Collections裡有一個方法 <strong>reverseOrder()</strong> 會傳回一個Comparator，倒轉原來的排序方式</p>\n</li>\n<li><p>若被比較的物件沒有實作Comparable介面，則會拋出 <strong>ClassCastException</strong> 例外。原因是當a物件與b物件進行比較時，a物件會先cast成Comparable型態，若沒實作Comparable，就會出錯</p>\n</li>\n</ol>\n"},{"title":"Markdown初探","date":"2017-06-27T14:32:12.000Z","_content":"\t\n資訊世界真的很神奇，在任何角落都可能迸發出新的創意，在任何角落也都有可能遇見他人的創意。\n\n像這次，我因為想利用Evernote記錄下我學程式的一些心得，但卻不滿意Evernote內建的程式碼區塊，且也不太清楚如何使用，而決定到網路上搜尋其他的方案，碰巧發現了**Markdown**這新奇的玩意，在遍覽數個網站後，發現沒有簡易的方法將Evernote調適為適合撰寫程式碼的筆記，加上在無數個網站上都看到**Markdown**這名詞，於是我便下定決心好好了解它一翻。\n\n這一了解下去不得了了，發現這個工具實在是太好玩太方便啦!!\n\n**Markdown**是個輕量級標記性語言，其目標是為了實現**易寫易讀**，利用Markdown寫出的文章比起Html更像是一篇純文章，這個特性對於用來寫筆記而言實在太適合，且他的說明文件並不難，學過Html的應該都十分容易上手，在Markdown中亦可穿插Html，若兩種都會了，就能隨心所欲在不同場合利用較有效率的工具，達到事半功倍啊 ~ ~ \n\n在說明文件中有一段話，我覺得非常棒，恰恰點出了Markdown的定位\n\n>HTML 是一種發佈的格式\n\n>Markdown是一種編寫的格式\n\n另外我也對創造出Markdown的人深感敬佩，居然能有如此特別的想法!\n\n好! 再來就羅列些Markdown在**易寫易讀**這方面的特色吧!\n\n(完整說明請參閱[說明文件](http://markdown.tw/))\n\n### 特殊字元自動轉型\n\t\n若想在Html中寫Html碼，一些字須做轉換，像 `<` 和 `&` 必須轉成 `&lt;` 和 `&amp;`\n\n例如: 想在網頁上呈現\n\n    <br/> 是換行符號\n\n必須在html裡打成\n\n\t&lt;br /&gt; 是換行符號\n\n但在Markdown裡並不需要，只要將它放在程式碼區塊就好，如用以下的寫法\n\n\t`<br/>`\n\n轉換後會得到如下的Html碼\n\n\t<code> &lt;br /&gt; </code>\n\n達到特殊字元自動轉型的功能  \n結果會是 `<br/>` \n\n### 換行的方便\n\n-   在Markdown裡的換行只須加兩個空白後再加上enter即可，相當於做到了 `<br/>`的效果，若不這樣做，Markdown也會做到自動分行\n\n-   在Markdown裡的分段只須段與段間空一行即可，相當於用了 `<p>` 分別夾住兩個不同的段落  \n\n-   但也有個小問題，那就是無論你段與段間空了幾行，效果依舊和指控一行是一樣的，因此若須空多行，可能得依靠 `<br /> `來解決\n\n### Html語法的簡化\n\t\n在Markdown中你能用更簡潔的語法達到與Html語法有相同功能的效果  \n\n在Html中表示標題位階的 `<h1>` 到 `<h6>` ，在Markdown中可以以如下的方式實現\n\n    # h1  \n    ## h2  \n    ### h3  \n\n其中一個 `#` 代表的就是第一位階，也就是最大的標題，再來以此類推\n\n在Html中的連結，Markdown用以下的方式做到\n\t\n先假設Html語法 \n\n  \t<a href=\"https://www.google.com.tw/\"> Google </a>\n\n-   行內方式\n\n\t    [Google](https://www.google.com.tw/)\n\n-   參考方式\n\n\t\t[Google][src]\n\n\t在下面加上src代表的URL\n\n\t<code>[src]: https://www.google.com.tw/</code>\n\t\t\t\n-   簡化方式\n\n\t   \t[Google][]  \n\t<code>[Google]: https://www.google.com.tw/</code>  \n\t(小提醒: 用參考方式或簡化方式時，記得標註網址的那一行之前不可以有空格)\n\nHtml中的清單一樣在Markdown中有更簡單的表示法\n\n-   無序\n\n\t\t* xxx  \n\t\t* ooo  \n\t\t* xox\n\n\t其中 `*` 可以 `+` 或 `-` 替代，但記得後面都要加一個空白鍵\n\n-   有序\n\n\t    1. xxx  \n\t    2. ooo  \n\t\t3. xox\n\n\t蠻直觀的，但後面一樣要有空白鍵\n\n-   巢狀\n\n\t\t1. xxx  \n\t\t\t* ooo  \n\t\t2. xxx  \n\t\t\t* ooo  \n\t\t\t* ooo\n\n\t差一個階層必須距離一個tab( = 4個空白鍵)\n\n### 程式碼區塊\n\t\n添加程式碼區塊的方便性是我最喜歡Markdown的地方，添加的方式十分簡單\n\n-   單詞\n\n\t用 `` ` `` 把單詞夾住，例如 ``  `單詞`  `` ，記得前後都要多加上一個空白鍵\n\n-   一段程式碼\n\n    先空一行，再將下一行開頭空出一個tab後再開始寫，如果程式碼想寫在清單中，則每多一個階級必須多空一個tab\n\n    雖然看似蠻複雜的，但熟悉之後就會覺得這項語法實在是太方便啦!!\n\n    如果看的不是很懂，這裡有一篇[文章][codeInList]專門在講清單裡的程式碼區塊究竟該如何插入\n      \n[codeInList]:http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown\n\n<br />\n好啦! 這就是對Markdown的小小簡單介紹，如果還有興趣，歡迎再更深入的了解哦\n\n話說這是我第一篇用Markdown寫出的文章哩，真的覺得好好玩 ^_^\n\n<br />\n參考資料:\n1. https://zh.wikipedia.org/wiki/Markdown\n2. http://markdown.tw/\n3. http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown\n\n\n\n\n","source":"_posts/Markdown初探.md","raw":"---\ntitle: Markdown初探\ndate: 2017-06-27 22:32:12\ntags:\ncategories:\n- Tool\n---\n\t\n資訊世界真的很神奇，在任何角落都可能迸發出新的創意，在任何角落也都有可能遇見他人的創意。\n\n像這次，我因為想利用Evernote記錄下我學程式的一些心得，但卻不滿意Evernote內建的程式碼區塊，且也不太清楚如何使用，而決定到網路上搜尋其他的方案，碰巧發現了**Markdown**這新奇的玩意，在遍覽數個網站後，發現沒有簡易的方法將Evernote調適為適合撰寫程式碼的筆記，加上在無數個網站上都看到**Markdown**這名詞，於是我便下定決心好好了解它一翻。\n\n這一了解下去不得了了，發現這個工具實在是太好玩太方便啦!!\n\n**Markdown**是個輕量級標記性語言，其目標是為了實現**易寫易讀**，利用Markdown寫出的文章比起Html更像是一篇純文章，這個特性對於用來寫筆記而言實在太適合，且他的說明文件並不難，學過Html的應該都十分容易上手，在Markdown中亦可穿插Html，若兩種都會了，就能隨心所欲在不同場合利用較有效率的工具，達到事半功倍啊 ~ ~ \n\n在說明文件中有一段話，我覺得非常棒，恰恰點出了Markdown的定位\n\n>HTML 是一種發佈的格式\n\n>Markdown是一種編寫的格式\n\n另外我也對創造出Markdown的人深感敬佩，居然能有如此特別的想法!\n\n好! 再來就羅列些Markdown在**易寫易讀**這方面的特色吧!\n\n(完整說明請參閱[說明文件](http://markdown.tw/))\n\n### 特殊字元自動轉型\n\t\n若想在Html中寫Html碼，一些字須做轉換，像 `<` 和 `&` 必須轉成 `&lt;` 和 `&amp;`\n\n例如: 想在網頁上呈現\n\n    <br/> 是換行符號\n\n必須在html裡打成\n\n\t&lt;br /&gt; 是換行符號\n\n但在Markdown裡並不需要，只要將它放在程式碼區塊就好，如用以下的寫法\n\n\t`<br/>`\n\n轉換後會得到如下的Html碼\n\n\t<code> &lt;br /&gt; </code>\n\n達到特殊字元自動轉型的功能  \n結果會是 `<br/>` \n\n### 換行的方便\n\n-   在Markdown裡的換行只須加兩個空白後再加上enter即可，相當於做到了 `<br/>`的效果，若不這樣做，Markdown也會做到自動分行\n\n-   在Markdown裡的分段只須段與段間空一行即可，相當於用了 `<p>` 分別夾住兩個不同的段落  \n\n-   但也有個小問題，那就是無論你段與段間空了幾行，效果依舊和指控一行是一樣的，因此若須空多行，可能得依靠 `<br /> `來解決\n\n### Html語法的簡化\n\t\n在Markdown中你能用更簡潔的語法達到與Html語法有相同功能的效果  \n\n在Html中表示標題位階的 `<h1>` 到 `<h6>` ，在Markdown中可以以如下的方式實現\n\n    # h1  \n    ## h2  \n    ### h3  \n\n其中一個 `#` 代表的就是第一位階，也就是最大的標題，再來以此類推\n\n在Html中的連結，Markdown用以下的方式做到\n\t\n先假設Html語法 \n\n  \t<a href=\"https://www.google.com.tw/\"> Google </a>\n\n-   行內方式\n\n\t    [Google](https://www.google.com.tw/)\n\n-   參考方式\n\n\t\t[Google][src]\n\n\t在下面加上src代表的URL\n\n\t<code>[src]: https://www.google.com.tw/</code>\n\t\t\t\n-   簡化方式\n\n\t   \t[Google][]  \n\t<code>[Google]: https://www.google.com.tw/</code>  \n\t(小提醒: 用參考方式或簡化方式時，記得標註網址的那一行之前不可以有空格)\n\nHtml中的清單一樣在Markdown中有更簡單的表示法\n\n-   無序\n\n\t\t* xxx  \n\t\t* ooo  \n\t\t* xox\n\n\t其中 `*` 可以 `+` 或 `-` 替代，但記得後面都要加一個空白鍵\n\n-   有序\n\n\t    1. xxx  \n\t    2. ooo  \n\t\t3. xox\n\n\t蠻直觀的，但後面一樣要有空白鍵\n\n-   巢狀\n\n\t\t1. xxx  \n\t\t\t* ooo  \n\t\t2. xxx  \n\t\t\t* ooo  \n\t\t\t* ooo\n\n\t差一個階層必須距離一個tab( = 4個空白鍵)\n\n### 程式碼區塊\n\t\n添加程式碼區塊的方便性是我最喜歡Markdown的地方，添加的方式十分簡單\n\n-   單詞\n\n\t用 `` ` `` 把單詞夾住，例如 ``  `單詞`  `` ，記得前後都要多加上一個空白鍵\n\n-   一段程式碼\n\n    先空一行，再將下一行開頭空出一個tab後再開始寫，如果程式碼想寫在清單中，則每多一個階級必須多空一個tab\n\n    雖然看似蠻複雜的，但熟悉之後就會覺得這項語法實在是太方便啦!!\n\n    如果看的不是很懂，這裡有一篇[文章][codeInList]專門在講清單裡的程式碼區塊究竟該如何插入\n      \n[codeInList]:http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown\n\n<br />\n好啦! 這就是對Markdown的小小簡單介紹，如果還有興趣，歡迎再更深入的了解哦\n\n話說這是我第一篇用Markdown寫出的文章哩，真的覺得好好玩 ^_^\n\n<br />\n參考資料:\n1. https://zh.wikipedia.org/wiki/Markdown\n2. http://markdown.tw/\n3. http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown\n\n\n\n\n","slug":"Markdown初探","published":1,"updated":"2017-08-17T02:41:30.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6fwtyij0002loju9p7kubiu","content":"<p>資訊世界真的很神奇，在任何角落都可能迸發出新的創意，在任何角落也都有可能遇見他人的創意。</p>\n<p>像這次，我因為想利用Evernote記錄下我學程式的一些心得，但卻不滿意Evernote內建的程式碼區塊，且也不太清楚如何使用，而決定到網路上搜尋其他的方案，碰巧發現了<strong>Markdown</strong>這新奇的玩意，在遍覽數個網站後，發現沒有簡易的方法將Evernote調適為適合撰寫程式碼的筆記，加上在無數個網站上都看到<strong>Markdown</strong>這名詞，於是我便下定決心好好了解它一翻。</p>\n<p>這一了解下去不得了了，發現這個工具實在是太好玩太方便啦!!</p>\n<p><strong>Markdown</strong>是個輕量級標記性語言，其目標是為了實現<strong>易寫易讀</strong>，利用Markdown寫出的文章比起Html更像是一篇純文章，這個特性對於用來寫筆記而言實在太適合，且他的說明文件並不難，學過Html的應該都十分容易上手，在Markdown中亦可穿插Html，若兩種都會了，就能隨心所欲在不同場合利用較有效率的工具，達到事半功倍啊 ~ ~ </p>\n<p>在說明文件中有一段話，我覺得非常棒，恰恰點出了Markdown的定位</p>\n<blockquote>\n<p>HTML 是一種發佈的格式</p>\n<p>Markdown是一種編寫的格式</p>\n</blockquote>\n<p>另外我也對創造出Markdown的人深感敬佩，居然能有如此特別的想法!</p>\n<p>好! 再來就羅列些Markdown在<strong>易寫易讀</strong>這方面的特色吧!</p>\n<p>(完整說明請參閱<a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">說明文件</a>)</p>\n<h3 id=\"特殊字元自動轉型\"><a href=\"#特殊字元自動轉型\" class=\"headerlink\" title=\"特殊字元自動轉型\"></a>特殊字元自動轉型</h3><p>若想在Html中寫Html碼，一些字須做轉換，像 <code>&lt;</code> 和 <code>&amp;</code> 必須轉成 <code>&amp;lt;</code> 和 <code>&amp;amp;</code></p>\n<p>例如: 想在網頁上呈現</p>\n<pre><code>&lt;br/&gt; 是換行符號\n</code></pre><p>必須在html裡打成</p>\n<pre><code>&amp;lt;br /&amp;gt; 是換行符號\n</code></pre><p>但在Markdown裡並不需要，只要將它放在程式碼區塊就好，如用以下的寫法</p>\n<pre><code>`&lt;br/&gt;`\n</code></pre><p>轉換後會得到如下的Html碼</p>\n<pre><code>&lt;code&gt; &amp;lt;br /&amp;gt; &lt;/code&gt;\n</code></pre><p>達到特殊字元自動轉型的功能<br>結果會是 <code>&lt;br/&gt;</code> </p>\n<h3 id=\"換行的方便\"><a href=\"#換行的方便\" class=\"headerlink\" title=\"換行的方便\"></a>換行的方便</h3><ul>\n<li><p>在Markdown裡的換行只須加兩個空白後再加上enter即可，相當於做到了 <code>&lt;br/&gt;</code>的效果，若不這樣做，Markdown也會做到自動分行</p>\n</li>\n<li><p>在Markdown裡的分段只須段與段間空一行即可，相當於用了 <code>&lt;p&gt;</code> 分別夾住兩個不同的段落  </p>\n</li>\n<li><p>但也有個小問題，那就是無論你段與段間空了幾行，效果依舊和指控一行是一樣的，因此若須空多行，可能得依靠 <code>&lt;br /&gt;</code>來解決</p>\n</li>\n</ul>\n<h3 id=\"Html語法的簡化\"><a href=\"#Html語法的簡化\" class=\"headerlink\" title=\"Html語法的簡化\"></a>Html語法的簡化</h3><p>在Markdown中你能用更簡潔的語法達到與Html語法有相同功能的效果  </p>\n<p>在Html中表示標題位階的 <code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> ，在Markdown中可以以如下的方式實現</p>\n<pre><code># h1  \n## h2  \n### h3  \n</code></pre><p>其中一個 <code>#</code> 代表的就是第一位階，也就是最大的標題，再來以此類推</p>\n<p>在Html中的連結，Markdown用以下的方式做到</p>\n<p>先假設Html語法 </p>\n<pre><code>&lt;a href=&quot;https://www.google.com.tw/&quot;&gt; Google &lt;/a&gt;\n</code></pre><ul>\n<li><p>行內方式</p>\n<pre><code>[Google](https://www.google.com.tw/)\n</code></pre></li>\n<li><p>參考方式</p>\n<pre><code>[Google][src]\n</code></pre><p>在下面加上src代表的URL</p>\n<p><code>[src]: <a href=\"https://www.google.com.tw/\" target=\"_blank\" rel=\"external\">https://www.google.com.tw/</a></code></p>\n</li>\n<li><p>簡化方式</p>\n<pre><code>[Google][]  \n</code></pre><p><code>[Google]: <a href=\"https://www.google.com.tw/\" target=\"_blank\" rel=\"external\">https://www.google.com.tw/</a></code><br>(小提醒: 用參考方式或簡化方式時，記得標註網址的那一行之前不可以有空格)</p>\n</li>\n</ul>\n<p>Html中的清單一樣在Markdown中有更簡單的表示法</p>\n<ul>\n<li><p>無序</p>\n<pre><code>* xxx  \n* ooo  \n* xox\n</code></pre><p>其中 <code>*</code> 可以 <code>+</code> 或 <code>-</code> 替代，但記得後面都要加一個空白鍵</p>\n</li>\n<li><p>有序</p>\n<pre><code>1. xxx  \n2. ooo  \n3. xox\n</code></pre><p>蠻直觀的，但後面一樣要有空白鍵</p>\n</li>\n<li><p>巢狀</p>\n<pre><code>1. xxx  \n    * ooo  \n2. xxx  \n    * ooo  \n    * ooo\n</code></pre><p>差一個階層必須距離一個tab( = 4個空白鍵)</p>\n</li>\n</ul>\n<h3 id=\"程式碼區塊\"><a href=\"#程式碼區塊\" class=\"headerlink\" title=\"程式碼區塊\"></a>程式碼區塊</h3><p>添加程式碼區塊的方便性是我最喜歡Markdown的地方，添加的方式十分簡單</p>\n<ul>\n<li><p>單詞</p>\n<p>用 <code>` </code> 把單詞夾住，例如 <code>`單詞` </code> ，記得前後都要多加上一個空白鍵</p>\n</li>\n<li><p>一段程式碼</p>\n<p>先空一行，再將下一行開頭空出一個tab後再開始寫，如果程式碼想寫在清單中，則每多一個階級必須多空一個tab</p>\n<p>雖然看似蠻複雜的，但熟悉之後就會覺得這項語法實在是太方便啦!!</p>\n<p>如果看的不是很懂，這裡有一篇<a href=\"http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown\" target=\"_blank\" rel=\"external\">文章</a>專門在講清單裡的程式碼區塊究竟該如何插入</p>\n</li>\n</ul>\n<p><br><br>好啦! 這就是對Markdown的小小簡單介紹，如果還有興趣，歡迎再更深入的了解哦</p>\n<p>話說這是我第一篇用Markdown寫出的文章哩，真的覺得好好玩 ^_^</p>\n<p><br><br>參考資料:</p>\n<ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/Markdown</a></li>\n<li><a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">http://markdown.tw/</a></li>\n<li><a href=\"http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown\" target=\"_blank\" rel=\"external\">http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>資訊世界真的很神奇，在任何角落都可能迸發出新的創意，在任何角落也都有可能遇見他人的創意。</p>\n<p>像這次，我因為想利用Evernote記錄下我學程式的一些心得，但卻不滿意Evernote內建的程式碼區塊，且也不太清楚如何使用，而決定到網路上搜尋其他的方案，碰巧發現了<strong>Markdown</strong>這新奇的玩意，在遍覽數個網站後，發現沒有簡易的方法將Evernote調適為適合撰寫程式碼的筆記，加上在無數個網站上都看到<strong>Markdown</strong>這名詞，於是我便下定決心好好了解它一翻。</p>\n<p>這一了解下去不得了了，發現這個工具實在是太好玩太方便啦!!</p>\n<p><strong>Markdown</strong>是個輕量級標記性語言，其目標是為了實現<strong>易寫易讀</strong>，利用Markdown寫出的文章比起Html更像是一篇純文章，這個特性對於用來寫筆記而言實在太適合，且他的說明文件並不難，學過Html的應該都十分容易上手，在Markdown中亦可穿插Html，若兩種都會了，就能隨心所欲在不同場合利用較有效率的工具，達到事半功倍啊 ~ ~ </p>\n<p>在說明文件中有一段話，我覺得非常棒，恰恰點出了Markdown的定位</p>\n<blockquote>\n<p>HTML 是一種發佈的格式</p>\n<p>Markdown是一種編寫的格式</p>\n</blockquote>\n<p>另外我也對創造出Markdown的人深感敬佩，居然能有如此特別的想法!</p>\n<p>好! 再來就羅列些Markdown在<strong>易寫易讀</strong>這方面的特色吧!</p>\n<p>(完整說明請參閱<a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">說明文件</a>)</p>\n<h3 id=\"特殊字元自動轉型\"><a href=\"#特殊字元自動轉型\" class=\"headerlink\" title=\"特殊字元自動轉型\"></a>特殊字元自動轉型</h3><p>若想在Html中寫Html碼，一些字須做轉換，像 <code>&lt;</code> 和 <code>&amp;</code> 必須轉成 <code>&amp;lt;</code> 和 <code>&amp;amp;</code></p>\n<p>例如: 想在網頁上呈現</p>\n<pre><code>&lt;br/&gt; 是換行符號\n</code></pre><p>必須在html裡打成</p>\n<pre><code>&amp;lt;br /&amp;gt; 是換行符號\n</code></pre><p>但在Markdown裡並不需要，只要將它放在程式碼區塊就好，如用以下的寫法</p>\n<pre><code>`&lt;br/&gt;`\n</code></pre><p>轉換後會得到如下的Html碼</p>\n<pre><code>&lt;code&gt; &amp;lt;br /&amp;gt; &lt;/code&gt;\n</code></pre><p>達到特殊字元自動轉型的功能<br>結果會是 <code>&lt;br/&gt;</code> </p>\n<h3 id=\"換行的方便\"><a href=\"#換行的方便\" class=\"headerlink\" title=\"換行的方便\"></a>換行的方便</h3><ul>\n<li><p>在Markdown裡的換行只須加兩個空白後再加上enter即可，相當於做到了 <code>&lt;br/&gt;</code>的效果，若不這樣做，Markdown也會做到自動分行</p>\n</li>\n<li><p>在Markdown裡的分段只須段與段間空一行即可，相當於用了 <code>&lt;p&gt;</code> 分別夾住兩個不同的段落  </p>\n</li>\n<li><p>但也有個小問題，那就是無論你段與段間空了幾行，效果依舊和指控一行是一樣的，因此若須空多行，可能得依靠 <code>&lt;br /&gt;</code>來解決</p>\n</li>\n</ul>\n<h3 id=\"Html語法的簡化\"><a href=\"#Html語法的簡化\" class=\"headerlink\" title=\"Html語法的簡化\"></a>Html語法的簡化</h3><p>在Markdown中你能用更簡潔的語法達到與Html語法有相同功能的效果  </p>\n<p>在Html中表示標題位階的 <code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> ，在Markdown中可以以如下的方式實現</p>\n<pre><code># h1  \n## h2  \n### h3  \n</code></pre><p>其中一個 <code>#</code> 代表的就是第一位階，也就是最大的標題，再來以此類推</p>\n<p>在Html中的連結，Markdown用以下的方式做到</p>\n<p>先假設Html語法 </p>\n<pre><code>&lt;a href=&quot;https://www.google.com.tw/&quot;&gt; Google &lt;/a&gt;\n</code></pre><ul>\n<li><p>行內方式</p>\n<pre><code>[Google](https://www.google.com.tw/)\n</code></pre></li>\n<li><p>參考方式</p>\n<pre><code>[Google][src]\n</code></pre><p>在下面加上src代表的URL</p>\n<p><code>[src]: <a href=\"https://www.google.com.tw/\" target=\"_blank\" rel=\"external\">https://www.google.com.tw/</a></code></p>\n</li>\n<li><p>簡化方式</p>\n<pre><code>[Google][]  \n</code></pre><p><code>[Google]: <a href=\"https://www.google.com.tw/\" target=\"_blank\" rel=\"external\">https://www.google.com.tw/</a></code><br>(小提醒: 用參考方式或簡化方式時，記得標註網址的那一行之前不可以有空格)</p>\n</li>\n</ul>\n<p>Html中的清單一樣在Markdown中有更簡單的表示法</p>\n<ul>\n<li><p>無序</p>\n<pre><code>* xxx  \n* ooo  \n* xox\n</code></pre><p>其中 <code>*</code> 可以 <code>+</code> 或 <code>-</code> 替代，但記得後面都要加一個空白鍵</p>\n</li>\n<li><p>有序</p>\n<pre><code>1. xxx  \n2. ooo  \n3. xox\n</code></pre><p>蠻直觀的，但後面一樣要有空白鍵</p>\n</li>\n<li><p>巢狀</p>\n<pre><code>1. xxx  \n    * ooo  \n2. xxx  \n    * ooo  \n    * ooo\n</code></pre><p>差一個階層必須距離一個tab( = 4個空白鍵)</p>\n</li>\n</ul>\n<h3 id=\"程式碼區塊\"><a href=\"#程式碼區塊\" class=\"headerlink\" title=\"程式碼區塊\"></a>程式碼區塊</h3><p>添加程式碼區塊的方便性是我最喜歡Markdown的地方，添加的方式十分簡單</p>\n<ul>\n<li><p>單詞</p>\n<p>用 <code>` </code> 把單詞夾住，例如 <code>`單詞` </code> ，記得前後都要多加上一個空白鍵</p>\n</li>\n<li><p>一段程式碼</p>\n<p>先空一行，再將下一行開頭空出一個tab後再開始寫，如果程式碼想寫在清單中，則每多一個階級必須多空一個tab</p>\n<p>雖然看似蠻複雜的，但熟悉之後就會覺得這項語法實在是太方便啦!!</p>\n<p>如果看的不是很懂，這裡有一篇<a href=\"http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown\" target=\"_blank\" rel=\"external\">文章</a>專門在講清單裡的程式碼區塊究竟該如何插入</p>\n</li>\n</ul>\n<p><br><br>好啦! 這就是對Markdown的小小簡單介紹，如果還有興趣，歡迎再更深入的了解哦</p>\n<p>話說這是我第一篇用Markdown寫出的文章哩，真的覺得好好玩 ^_^</p>\n<p><br><br>參考資料:</p>\n<ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/Markdown</a></li>\n<li><a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">http://markdown.tw/</a></li>\n<li><a href=\"http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown\" target=\"_blank\" rel=\"external\">http://meta.stackexchange.com/questions/3792/how-to-nest-code-within-a-list-using-markdown</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6fwtyia0000lojuo70lbjfc","category_id":"cj6fwtyio0003lojuprtziin7","_id":"cj6fwtyis0005lojuqgbtivky"},{"post_id":"cj6fwtyij0002loju9p7kubiu","category_id":"cj6fwtyir0004loju4rzs3wfo","_id":"cj6fwtyit0006lojuw9opza20"}],"PostTag":[],"Tag":[]}}